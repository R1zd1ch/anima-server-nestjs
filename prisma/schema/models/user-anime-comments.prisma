model Comment {
  id      String @id @default(uuid())
  content String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  anime      Anime?  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId    String?
  likesCount Int     @default(0)

  episode Int?

  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)

  replies Comment[] @relation("CommentReplies")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CommentLike CommentLike[]

  @@map("comments")
}

model CommentLike {
  userId    String
  commentId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  likedAt DateTime @default(now())

  @@id([userId, commentId])
  @@unique([userId, commentId])
  @@index([commentId])
  @@index([userId])
  @@map("comment_likes")
}
