
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Demographic
 * 
 */
export type Demographic = $Result.DefaultSelection<Prisma.$DemographicPayload>
/**
 * Model AnimeDemographic
 * 
 */
export type AnimeDemographic = $Result.DefaultSelection<Prisma.$AnimeDemographicPayload>
/**
 * Model Genre
 * 
 */
export type Genre = $Result.DefaultSelection<Prisma.$GenrePayload>
/**
 * Model AnimeGenre
 * 
 */
export type AnimeGenre = $Result.DefaultSelection<Prisma.$AnimeGenrePayload>
/**
 * Model AnimePoster
 * 
 */
export type AnimePoster = $Result.DefaultSelection<Prisma.$AnimePosterPayload>
/**
 * Model RelatedAnime
 * 
 */
export type RelatedAnime = $Result.DefaultSelection<Prisma.$RelatedAnimePayload>
/**
 * Model Screenshots
 * 
 */
export type Screenshots = $Result.DefaultSelection<Prisma.$ScreenshotsPayload>
/**
 * Model AnimeScreenshot
 * 
 */
export type AnimeScreenshot = $Result.DefaultSelection<Prisma.$AnimeScreenshotPayload>
/**
 * Model Studio
 * 
 */
export type Studio = $Result.DefaultSelection<Prisma.$StudioPayload>
/**
 * Model AnimeStudio
 * 
 */
export type AnimeStudio = $Result.DefaultSelection<Prisma.$AnimeStudioPayload>
/**
 * Model Theme
 * 
 */
export type Theme = $Result.DefaultSelection<Prisma.$ThemePayload>
/**
 * Model AnimeTheme
 * 
 */
export type AnimeTheme = $Result.DefaultSelection<Prisma.$AnimeThemePayload>
/**
 * Model AnimeVideo
 * 
 */
export type AnimeVideo = $Result.DefaultSelection<Prisma.$AnimeVideoPayload>
/**
 * Model Video
 * 
 */
export type Video = $Result.DefaultSelection<Prisma.$VideoPayload>
/**
 * Model Anime
 * 
 */
export type Anime = $Result.DefaultSelection<Prisma.$AnimePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model ParsingSession
 * 
 */
export type ParsingSession = $Result.DefaultSelection<Prisma.$ParsingSessionPayload>
/**
 * Model AnimeCollection
 * 
 */
export type AnimeCollection = $Result.DefaultSelection<Prisma.$AnimeCollectionPayload>
/**
 * Model AnimeInCollection
 * 
 */
export type AnimeInCollection = $Result.DefaultSelection<Prisma.$AnimeInCollectionPayload>
/**
 * Model AnimeCollectionLike
 * 
 */
export type AnimeCollectionLike = $Result.DefaultSelection<Prisma.$AnimeCollectionLikePayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model CommentLike
 * 
 */
export type CommentLike = $Result.DefaultSelection<Prisma.$CommentLikePayload>
/**
 * Model AnimeEpisodeProgress
 * 
 */
export type AnimeEpisodeProgress = $Result.DefaultSelection<Prisma.$AnimeEpisodeProgressPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model ReviewLike
 * 
 */
export type ReviewLike = $Result.DefaultSelection<Prisma.$ReviewLikePayload>
/**
 * Model UserSettings
 * 
 */
export type UserSettings = $Result.DefaultSelection<Prisma.$UserSettingsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const VideoKindEnum: {
  pv: 'pv',
  character_trailer: 'character_trailer',
  cm: 'cm',
  op: 'op',
  ed: 'ed',
  op_ed_clip: 'op_ed_clip',
  clip: 'clip',
  other: 'other',
  episode_preview: 'episode_preview'
};

export type VideoKindEnum = (typeof VideoKindEnum)[keyof typeof VideoKindEnum]


export const AnimeStatus: {
  anons: 'anons',
  ongoing: 'ongoing',
  released: 'released'
};

export type AnimeStatus = (typeof AnimeStatus)[keyof typeof AnimeStatus]


export const AnimeKind: {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  ona: 'ona',
  special: 'special',
  tv_special: 'tv_special',
  music: 'music',
  pv: 'pv',
  cm: 'cm'
};

export type AnimeKind = (typeof AnimeKind)[keyof typeof AnimeKind]


export const AnimeRating: {
  none: 'none',
  g: 'g',
  pg: 'pg',
  pg_13: 'pg_13',
  r: 'r',
  r_plus: 'r_plus',
  rx: 'rx'
};

export type AnimeRating = (typeof AnimeRating)[keyof typeof AnimeRating]


export const RelationKind: {
  adaptation: 'adaptation',
  alternative_setting: 'alternative_setting',
  alternative_version: 'alternative_version',
  character: 'character',
  full_story: 'full_story',
  other: 'other',
  parent_story: 'parent_story',
  prequel: 'prequel',
  sequel: 'sequel',
  side_story: 'side_story',
  spin_off: 'spin_off',
  summary: 'summary'
};

export type RelationKind = (typeof RelationKind)[keyof typeof RelationKind]


export const UserRole: {
  REGULAR: 'REGULAR',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const AuthMethod: {
  CREDENTIALS: 'CREDENTIALS',
  GOOGLE: 'GOOGLE',
  YANDEX: 'YANDEX'
};

export type AuthMethod = (typeof AuthMethod)[keyof typeof AuthMethod]


export const TokenType: {
  VERIFICATION: 'VERIFICATION',
  TWO_FACTOR: 'TWO_FACTOR',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

export type TokenType = (typeof TokenType)[keyof typeof TokenType]


export const ParsingSessionStatus: {
  CREATED: 'CREATED',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  PAUSED: 'PAUSED',
  FAILED: 'FAILED'
};

export type ParsingSessionStatus = (typeof ParsingSessionStatus)[keyof typeof ParsingSessionStatus]


export const ParsingSessionType: {
  CREATE_DATABASE: 'CREATE_DATABASE',
  UPDATE_ONGOINGS: 'UPDATE_ONGOINGS',
  UPDATE_THIS_YEAR: 'UPDATE_THIS_YEAR'
};

export type ParsingSessionType = (typeof ParsingSessionType)[keyof typeof ParsingSessionType]


export const AnimeCollectionType: {
  PLANNED: 'PLANNED',
  WATCHING: 'WATCHING',
  COMPLETED: 'COMPLETED',
  DROPPED: 'DROPPED',
  FAVORITE: 'FAVORITE',
  CUSTOM: 'CUSTOM'
};

export type AnimeCollectionType = (typeof AnimeCollectionType)[keyof typeof AnimeCollectionType]

}

export type VideoKindEnum = $Enums.VideoKindEnum

export const VideoKindEnum: typeof $Enums.VideoKindEnum

export type AnimeStatus = $Enums.AnimeStatus

export const AnimeStatus: typeof $Enums.AnimeStatus

export type AnimeKind = $Enums.AnimeKind

export const AnimeKind: typeof $Enums.AnimeKind

export type AnimeRating = $Enums.AnimeRating

export const AnimeRating: typeof $Enums.AnimeRating

export type RelationKind = $Enums.RelationKind

export const RelationKind: typeof $Enums.RelationKind

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type AuthMethod = $Enums.AuthMethod

export const AuthMethod: typeof $Enums.AuthMethod

export type TokenType = $Enums.TokenType

export const TokenType: typeof $Enums.TokenType

export type ParsingSessionStatus = $Enums.ParsingSessionStatus

export const ParsingSessionStatus: typeof $Enums.ParsingSessionStatus

export type ParsingSessionType = $Enums.ParsingSessionType

export const ParsingSessionType: typeof $Enums.ParsingSessionType

export type AnimeCollectionType = $Enums.AnimeCollectionType

export const AnimeCollectionType: typeof $Enums.AnimeCollectionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Demographics
 * const demographics = await prisma.demographic.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Demographics
   * const demographics = await prisma.demographic.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.demographic`: Exposes CRUD operations for the **Demographic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Demographics
    * const demographics = await prisma.demographic.findMany()
    * ```
    */
  get demographic(): Prisma.DemographicDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeDemographic`: Exposes CRUD operations for the **AnimeDemographic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeDemographics
    * const animeDemographics = await prisma.animeDemographic.findMany()
    * ```
    */
  get animeDemographic(): Prisma.AnimeDemographicDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.GenreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeGenre`: Exposes CRUD operations for the **AnimeGenre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeGenres
    * const animeGenres = await prisma.animeGenre.findMany()
    * ```
    */
  get animeGenre(): Prisma.AnimeGenreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animePoster`: Exposes CRUD operations for the **AnimePoster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimePosters
    * const animePosters = await prisma.animePoster.findMany()
    * ```
    */
  get animePoster(): Prisma.AnimePosterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.relatedAnime`: Exposes CRUD operations for the **RelatedAnime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RelatedAnimes
    * const relatedAnimes = await prisma.relatedAnime.findMany()
    * ```
    */
  get relatedAnime(): Prisma.RelatedAnimeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.screenshots`: Exposes CRUD operations for the **Screenshots** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Screenshots
    * const screenshots = await prisma.screenshots.findMany()
    * ```
    */
  get screenshots(): Prisma.ScreenshotsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeScreenshot`: Exposes CRUD operations for the **AnimeScreenshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeScreenshots
    * const animeScreenshots = await prisma.animeScreenshot.findMany()
    * ```
    */
  get animeScreenshot(): Prisma.AnimeScreenshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studio`: Exposes CRUD operations for the **Studio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Studios
    * const studios = await prisma.studio.findMany()
    * ```
    */
  get studio(): Prisma.StudioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeStudio`: Exposes CRUD operations for the **AnimeStudio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeStudios
    * const animeStudios = await prisma.animeStudio.findMany()
    * ```
    */
  get animeStudio(): Prisma.AnimeStudioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.theme`: Exposes CRUD operations for the **Theme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Themes
    * const themes = await prisma.theme.findMany()
    * ```
    */
  get theme(): Prisma.ThemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeTheme`: Exposes CRUD operations for the **AnimeTheme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeThemes
    * const animeThemes = await prisma.animeTheme.findMany()
    * ```
    */
  get animeTheme(): Prisma.AnimeThemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeVideo`: Exposes CRUD operations for the **AnimeVideo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeVideos
    * const animeVideos = await prisma.animeVideo.findMany()
    * ```
    */
  get animeVideo(): Prisma.AnimeVideoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.anime`: Exposes CRUD operations for the **Anime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anime
    * const anime = await prisma.anime.findMany()
    * ```
    */
  get anime(): Prisma.AnimeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.parsingSession`: Exposes CRUD operations for the **ParsingSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParsingSessions
    * const parsingSessions = await prisma.parsingSession.findMany()
    * ```
    */
  get parsingSession(): Prisma.ParsingSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeCollection`: Exposes CRUD operations for the **AnimeCollection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeCollections
    * const animeCollections = await prisma.animeCollection.findMany()
    * ```
    */
  get animeCollection(): Prisma.AnimeCollectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeInCollection`: Exposes CRUD operations for the **AnimeInCollection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeInCollections
    * const animeInCollections = await prisma.animeInCollection.findMany()
    * ```
    */
  get animeInCollection(): Prisma.AnimeInCollectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeCollectionLike`: Exposes CRUD operations for the **AnimeCollectionLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeCollectionLikes
    * const animeCollectionLikes = await prisma.animeCollectionLike.findMany()
    * ```
    */
  get animeCollectionLike(): Prisma.AnimeCollectionLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commentLike`: Exposes CRUD operations for the **CommentLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommentLikes
    * const commentLikes = await prisma.commentLike.findMany()
    * ```
    */
  get commentLike(): Prisma.CommentLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animeEpisodeProgress`: Exposes CRUD operations for the **AnimeEpisodeProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimeEpisodeProgresses
    * const animeEpisodeProgresses = await prisma.animeEpisodeProgress.findMany()
    * ```
    */
  get animeEpisodeProgress(): Prisma.AnimeEpisodeProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewLike`: Exposes CRUD operations for the **ReviewLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewLikes
    * const reviewLikes = await prisma.reviewLike.findMany()
    * ```
    */
  get reviewLike(): Prisma.ReviewLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Demographic: 'Demographic',
    AnimeDemographic: 'AnimeDemographic',
    Genre: 'Genre',
    AnimeGenre: 'AnimeGenre',
    AnimePoster: 'AnimePoster',
    RelatedAnime: 'RelatedAnime',
    Screenshots: 'Screenshots',
    AnimeScreenshot: 'AnimeScreenshot',
    Studio: 'Studio',
    AnimeStudio: 'AnimeStudio',
    Theme: 'Theme',
    AnimeTheme: 'AnimeTheme',
    AnimeVideo: 'AnimeVideo',
    Video: 'Video',
    Anime: 'Anime',
    Account: 'Account',
    Token: 'Token',
    ParsingSession: 'ParsingSession',
    AnimeCollection: 'AnimeCollection',
    AnimeInCollection: 'AnimeInCollection',
    AnimeCollectionLike: 'AnimeCollectionLike',
    Comment: 'Comment',
    CommentLike: 'CommentLike',
    AnimeEpisodeProgress: 'AnimeEpisodeProgress',
    Review: 'Review',
    ReviewLike: 'ReviewLike',
    UserSettings: 'UserSettings',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "demographic" | "animeDemographic" | "genre" | "animeGenre" | "animePoster" | "relatedAnime" | "screenshots" | "animeScreenshot" | "studio" | "animeStudio" | "theme" | "animeTheme" | "animeVideo" | "video" | "anime" | "account" | "token" | "parsingSession" | "animeCollection" | "animeInCollection" | "animeCollectionLike" | "comment" | "commentLike" | "animeEpisodeProgress" | "review" | "reviewLike" | "userSettings" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Demographic: {
        payload: Prisma.$DemographicPayload<ExtArgs>
        fields: Prisma.DemographicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DemographicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DemographicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>
          }
          findFirst: {
            args: Prisma.DemographicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DemographicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>
          }
          findMany: {
            args: Prisma.DemographicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>[]
          }
          create: {
            args: Prisma.DemographicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>
          }
          createMany: {
            args: Prisma.DemographicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DemographicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>[]
          }
          delete: {
            args: Prisma.DemographicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>
          }
          update: {
            args: Prisma.DemographicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>
          }
          deleteMany: {
            args: Prisma.DemographicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DemographicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DemographicUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>[]
          }
          upsert: {
            args: Prisma.DemographicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemographicPayload>
          }
          aggregate: {
            args: Prisma.DemographicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDemographic>
          }
          groupBy: {
            args: Prisma.DemographicGroupByArgs<ExtArgs>
            result: $Utils.Optional<DemographicGroupByOutputType>[]
          }
          count: {
            args: Prisma.DemographicCountArgs<ExtArgs>
            result: $Utils.Optional<DemographicCountAggregateOutputType> | number
          }
        }
      }
      AnimeDemographic: {
        payload: Prisma.$AnimeDemographicPayload<ExtArgs>
        fields: Prisma.AnimeDemographicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeDemographicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeDemographicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>
          }
          findFirst: {
            args: Prisma.AnimeDemographicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeDemographicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>
          }
          findMany: {
            args: Prisma.AnimeDemographicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>[]
          }
          create: {
            args: Prisma.AnimeDemographicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>
          }
          createMany: {
            args: Prisma.AnimeDemographicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeDemographicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>[]
          }
          delete: {
            args: Prisma.AnimeDemographicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>
          }
          update: {
            args: Prisma.AnimeDemographicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>
          }
          deleteMany: {
            args: Prisma.AnimeDemographicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeDemographicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeDemographicUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>[]
          }
          upsert: {
            args: Prisma.AnimeDemographicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeDemographicPayload>
          }
          aggregate: {
            args: Prisma.AnimeDemographicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeDemographic>
          }
          groupBy: {
            args: Prisma.AnimeDemographicGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeDemographicGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeDemographicCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeDemographicCountAggregateOutputType> | number
          }
        }
      }
      Genre: {
        payload: Prisma.$GenrePayload<ExtArgs>
        fields: Prisma.GenreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GenreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GenreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          findFirst: {
            args: Prisma.GenreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GenreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          findMany: {
            args: Prisma.GenreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          create: {
            args: Prisma.GenreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          createMany: {
            args: Prisma.GenreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GenreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          delete: {
            args: Prisma.GenreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          update: {
            args: Prisma.GenreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          deleteMany: {
            args: Prisma.GenreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GenreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GenreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          upsert: {
            args: Prisma.GenreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          aggregate: {
            args: Prisma.GenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenre>
          }
          groupBy: {
            args: Prisma.GenreGroupByArgs<ExtArgs>
            result: $Utils.Optional<GenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.GenreCountArgs<ExtArgs>
            result: $Utils.Optional<GenreCountAggregateOutputType> | number
          }
        }
      }
      AnimeGenre: {
        payload: Prisma.$AnimeGenrePayload<ExtArgs>
        fields: Prisma.AnimeGenreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeGenreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeGenreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>
          }
          findFirst: {
            args: Prisma.AnimeGenreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeGenreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>
          }
          findMany: {
            args: Prisma.AnimeGenreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>[]
          }
          create: {
            args: Prisma.AnimeGenreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>
          }
          createMany: {
            args: Prisma.AnimeGenreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeGenreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>[]
          }
          delete: {
            args: Prisma.AnimeGenreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>
          }
          update: {
            args: Prisma.AnimeGenreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>
          }
          deleteMany: {
            args: Prisma.AnimeGenreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeGenreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeGenreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>[]
          }
          upsert: {
            args: Prisma.AnimeGenreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeGenrePayload>
          }
          aggregate: {
            args: Prisma.AnimeGenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeGenre>
          }
          groupBy: {
            args: Prisma.AnimeGenreGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeGenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeGenreCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeGenreCountAggregateOutputType> | number
          }
        }
      }
      AnimePoster: {
        payload: Prisma.$AnimePosterPayload<ExtArgs>
        fields: Prisma.AnimePosterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimePosterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimePosterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>
          }
          findFirst: {
            args: Prisma.AnimePosterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimePosterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>
          }
          findMany: {
            args: Prisma.AnimePosterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>[]
          }
          create: {
            args: Prisma.AnimePosterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>
          }
          createMany: {
            args: Prisma.AnimePosterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimePosterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>[]
          }
          delete: {
            args: Prisma.AnimePosterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>
          }
          update: {
            args: Prisma.AnimePosterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>
          }
          deleteMany: {
            args: Prisma.AnimePosterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimePosterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimePosterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>[]
          }
          upsert: {
            args: Prisma.AnimePosterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePosterPayload>
          }
          aggregate: {
            args: Prisma.AnimePosterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimePoster>
          }
          groupBy: {
            args: Prisma.AnimePosterGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimePosterGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimePosterCountArgs<ExtArgs>
            result: $Utils.Optional<AnimePosterCountAggregateOutputType> | number
          }
        }
      }
      RelatedAnime: {
        payload: Prisma.$RelatedAnimePayload<ExtArgs>
        fields: Prisma.RelatedAnimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelatedAnimeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelatedAnimeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>
          }
          findFirst: {
            args: Prisma.RelatedAnimeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelatedAnimeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>
          }
          findMany: {
            args: Prisma.RelatedAnimeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>[]
          }
          create: {
            args: Prisma.RelatedAnimeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>
          }
          createMany: {
            args: Prisma.RelatedAnimeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RelatedAnimeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>[]
          }
          delete: {
            args: Prisma.RelatedAnimeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>
          }
          update: {
            args: Prisma.RelatedAnimeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>
          }
          deleteMany: {
            args: Prisma.RelatedAnimeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelatedAnimeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RelatedAnimeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>[]
          }
          upsert: {
            args: Prisma.RelatedAnimeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedAnimePayload>
          }
          aggregate: {
            args: Prisma.RelatedAnimeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelatedAnime>
          }
          groupBy: {
            args: Prisma.RelatedAnimeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelatedAnimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelatedAnimeCountArgs<ExtArgs>
            result: $Utils.Optional<RelatedAnimeCountAggregateOutputType> | number
          }
        }
      }
      Screenshots: {
        payload: Prisma.$ScreenshotsPayload<ExtArgs>
        fields: Prisma.ScreenshotsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScreenshotsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScreenshotsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          findFirst: {
            args: Prisma.ScreenshotsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScreenshotsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          findMany: {
            args: Prisma.ScreenshotsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>[]
          }
          create: {
            args: Prisma.ScreenshotsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          createMany: {
            args: Prisma.ScreenshotsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScreenshotsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>[]
          }
          delete: {
            args: Prisma.ScreenshotsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          update: {
            args: Prisma.ScreenshotsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          deleteMany: {
            args: Prisma.ScreenshotsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScreenshotsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScreenshotsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>[]
          }
          upsert: {
            args: Prisma.ScreenshotsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          aggregate: {
            args: Prisma.ScreenshotsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScreenshots>
          }
          groupBy: {
            args: Prisma.ScreenshotsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScreenshotsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScreenshotsCountArgs<ExtArgs>
            result: $Utils.Optional<ScreenshotsCountAggregateOutputType> | number
          }
        }
      }
      AnimeScreenshot: {
        payload: Prisma.$AnimeScreenshotPayload<ExtArgs>
        fields: Prisma.AnimeScreenshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeScreenshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeScreenshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>
          }
          findFirst: {
            args: Prisma.AnimeScreenshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeScreenshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>
          }
          findMany: {
            args: Prisma.AnimeScreenshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>[]
          }
          create: {
            args: Prisma.AnimeScreenshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>
          }
          createMany: {
            args: Prisma.AnimeScreenshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeScreenshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>[]
          }
          delete: {
            args: Prisma.AnimeScreenshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>
          }
          update: {
            args: Prisma.AnimeScreenshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>
          }
          deleteMany: {
            args: Prisma.AnimeScreenshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeScreenshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeScreenshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>[]
          }
          upsert: {
            args: Prisma.AnimeScreenshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeScreenshotPayload>
          }
          aggregate: {
            args: Prisma.AnimeScreenshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeScreenshot>
          }
          groupBy: {
            args: Prisma.AnimeScreenshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeScreenshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeScreenshotCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeScreenshotCountAggregateOutputType> | number
          }
        }
      }
      Studio: {
        payload: Prisma.$StudioPayload<ExtArgs>
        fields: Prisma.StudioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>
          }
          findFirst: {
            args: Prisma.StudioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>
          }
          findMany: {
            args: Prisma.StudioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>[]
          }
          create: {
            args: Prisma.StudioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>
          }
          createMany: {
            args: Prisma.StudioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>[]
          }
          delete: {
            args: Prisma.StudioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>
          }
          update: {
            args: Prisma.StudioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>
          }
          deleteMany: {
            args: Prisma.StudioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>[]
          }
          upsert: {
            args: Prisma.StudioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudioPayload>
          }
          aggregate: {
            args: Prisma.StudioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudio>
          }
          groupBy: {
            args: Prisma.StudioGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudioGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudioCountArgs<ExtArgs>
            result: $Utils.Optional<StudioCountAggregateOutputType> | number
          }
        }
      }
      AnimeStudio: {
        payload: Prisma.$AnimeStudioPayload<ExtArgs>
        fields: Prisma.AnimeStudioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeStudioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeStudioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>
          }
          findFirst: {
            args: Prisma.AnimeStudioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeStudioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>
          }
          findMany: {
            args: Prisma.AnimeStudioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>[]
          }
          create: {
            args: Prisma.AnimeStudioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>
          }
          createMany: {
            args: Prisma.AnimeStudioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeStudioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>[]
          }
          delete: {
            args: Prisma.AnimeStudioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>
          }
          update: {
            args: Prisma.AnimeStudioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>
          }
          deleteMany: {
            args: Prisma.AnimeStudioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeStudioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeStudioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>[]
          }
          upsert: {
            args: Prisma.AnimeStudioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeStudioPayload>
          }
          aggregate: {
            args: Prisma.AnimeStudioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeStudio>
          }
          groupBy: {
            args: Prisma.AnimeStudioGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeStudioGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeStudioCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeStudioCountAggregateOutputType> | number
          }
        }
      }
      Theme: {
        payload: Prisma.$ThemePayload<ExtArgs>
        fields: Prisma.ThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findFirst: {
            args: Prisma.ThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findMany: {
            args: Prisma.ThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          create: {
            args: Prisma.ThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          createMany: {
            args: Prisma.ThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          delete: {
            args: Prisma.ThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          update: {
            args: Prisma.ThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          deleteMany: {
            args: Prisma.ThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          upsert: {
            args: Prisma.ThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          aggregate: {
            args: Prisma.ThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheme>
          }
          groupBy: {
            args: Prisma.ThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeCountAggregateOutputType> | number
          }
        }
      }
      AnimeTheme: {
        payload: Prisma.$AnimeThemePayload<ExtArgs>
        fields: Prisma.AnimeThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>
          }
          findFirst: {
            args: Prisma.AnimeThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>
          }
          findMany: {
            args: Prisma.AnimeThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>[]
          }
          create: {
            args: Prisma.AnimeThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>
          }
          createMany: {
            args: Prisma.AnimeThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeThemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>[]
          }
          delete: {
            args: Prisma.AnimeThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>
          }
          update: {
            args: Prisma.AnimeThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>
          }
          deleteMany: {
            args: Prisma.AnimeThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeThemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>[]
          }
          upsert: {
            args: Prisma.AnimeThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeThemePayload>
          }
          aggregate: {
            args: Prisma.AnimeThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeTheme>
          }
          groupBy: {
            args: Prisma.AnimeThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeThemeCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeThemeCountAggregateOutputType> | number
          }
        }
      }
      AnimeVideo: {
        payload: Prisma.$AnimeVideoPayload<ExtArgs>
        fields: Prisma.AnimeVideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeVideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeVideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>
          }
          findFirst: {
            args: Prisma.AnimeVideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeVideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>
          }
          findMany: {
            args: Prisma.AnimeVideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>[]
          }
          create: {
            args: Prisma.AnimeVideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>
          }
          createMany: {
            args: Prisma.AnimeVideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeVideoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>[]
          }
          delete: {
            args: Prisma.AnimeVideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>
          }
          update: {
            args: Prisma.AnimeVideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>
          }
          deleteMany: {
            args: Prisma.AnimeVideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeVideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeVideoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>[]
          }
          upsert: {
            args: Prisma.AnimeVideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeVideoPayload>
          }
          aggregate: {
            args: Prisma.AnimeVideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeVideo>
          }
          groupBy: {
            args: Prisma.AnimeVideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeVideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeVideoCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeVideoCountAggregateOutputType> | number
          }
        }
      }
      Video: {
        payload: Prisma.$VideoPayload<ExtArgs>
        fields: Prisma.VideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VideoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VideoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
      Anime: {
        payload: Prisma.$AnimePayload<ExtArgs>
        fields: Prisma.AnimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          findFirst: {
            args: Prisma.AnimeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          findMany: {
            args: Prisma.AnimeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>[]
          }
          create: {
            args: Prisma.AnimeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          createMany: {
            args: Prisma.AnimeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>[]
          }
          delete: {
            args: Prisma.AnimeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          update: {
            args: Prisma.AnimeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          deleteMany: {
            args: Prisma.AnimeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>[]
          }
          upsert: {
            args: Prisma.AnimeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimePayload>
          }
          aggregate: {
            args: Prisma.AnimeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnime>
          }
          groupBy: {
            args: Prisma.AnimeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      ParsingSession: {
        payload: Prisma.$ParsingSessionPayload<ExtArgs>
        fields: Prisma.ParsingSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParsingSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParsingSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>
          }
          findFirst: {
            args: Prisma.ParsingSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParsingSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>
          }
          findMany: {
            args: Prisma.ParsingSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>[]
          }
          create: {
            args: Prisma.ParsingSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>
          }
          createMany: {
            args: Prisma.ParsingSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParsingSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>[]
          }
          delete: {
            args: Prisma.ParsingSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>
          }
          update: {
            args: Prisma.ParsingSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>
          }
          deleteMany: {
            args: Prisma.ParsingSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParsingSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParsingSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>[]
          }
          upsert: {
            args: Prisma.ParsingSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParsingSessionPayload>
          }
          aggregate: {
            args: Prisma.ParsingSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParsingSession>
          }
          groupBy: {
            args: Prisma.ParsingSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParsingSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParsingSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ParsingSessionCountAggregateOutputType> | number
          }
        }
      }
      AnimeCollection: {
        payload: Prisma.$AnimeCollectionPayload<ExtArgs>
        fields: Prisma.AnimeCollectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeCollectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeCollectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>
          }
          findFirst: {
            args: Prisma.AnimeCollectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeCollectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>
          }
          findMany: {
            args: Prisma.AnimeCollectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>[]
          }
          create: {
            args: Prisma.AnimeCollectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>
          }
          createMany: {
            args: Prisma.AnimeCollectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeCollectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>[]
          }
          delete: {
            args: Prisma.AnimeCollectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>
          }
          update: {
            args: Prisma.AnimeCollectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>
          }
          deleteMany: {
            args: Prisma.AnimeCollectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeCollectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeCollectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>[]
          }
          upsert: {
            args: Prisma.AnimeCollectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionPayload>
          }
          aggregate: {
            args: Prisma.AnimeCollectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeCollection>
          }
          groupBy: {
            args: Prisma.AnimeCollectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeCollectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeCollectionCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeCollectionCountAggregateOutputType> | number
          }
        }
      }
      AnimeInCollection: {
        payload: Prisma.$AnimeInCollectionPayload<ExtArgs>
        fields: Prisma.AnimeInCollectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeInCollectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeInCollectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>
          }
          findFirst: {
            args: Prisma.AnimeInCollectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeInCollectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>
          }
          findMany: {
            args: Prisma.AnimeInCollectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>[]
          }
          create: {
            args: Prisma.AnimeInCollectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>
          }
          createMany: {
            args: Prisma.AnimeInCollectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeInCollectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>[]
          }
          delete: {
            args: Prisma.AnimeInCollectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>
          }
          update: {
            args: Prisma.AnimeInCollectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>
          }
          deleteMany: {
            args: Prisma.AnimeInCollectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeInCollectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeInCollectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>[]
          }
          upsert: {
            args: Prisma.AnimeInCollectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeInCollectionPayload>
          }
          aggregate: {
            args: Prisma.AnimeInCollectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeInCollection>
          }
          groupBy: {
            args: Prisma.AnimeInCollectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeInCollectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeInCollectionCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeInCollectionCountAggregateOutputType> | number
          }
        }
      }
      AnimeCollectionLike: {
        payload: Prisma.$AnimeCollectionLikePayload<ExtArgs>
        fields: Prisma.AnimeCollectionLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeCollectionLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeCollectionLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>
          }
          findFirst: {
            args: Prisma.AnimeCollectionLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeCollectionLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>
          }
          findMany: {
            args: Prisma.AnimeCollectionLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>[]
          }
          create: {
            args: Prisma.AnimeCollectionLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>
          }
          createMany: {
            args: Prisma.AnimeCollectionLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeCollectionLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>[]
          }
          delete: {
            args: Prisma.AnimeCollectionLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>
          }
          update: {
            args: Prisma.AnimeCollectionLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>
          }
          deleteMany: {
            args: Prisma.AnimeCollectionLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeCollectionLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeCollectionLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>[]
          }
          upsert: {
            args: Prisma.AnimeCollectionLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeCollectionLikePayload>
          }
          aggregate: {
            args: Prisma.AnimeCollectionLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeCollectionLike>
          }
          groupBy: {
            args: Prisma.AnimeCollectionLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeCollectionLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeCollectionLikeCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeCollectionLikeCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      CommentLike: {
        payload: Prisma.$CommentLikePayload<ExtArgs>
        fields: Prisma.CommentLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          findFirst: {
            args: Prisma.CommentLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          findMany: {
            args: Prisma.CommentLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>[]
          }
          create: {
            args: Prisma.CommentLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          createMany: {
            args: Prisma.CommentLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>[]
          }
          delete: {
            args: Prisma.CommentLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          update: {
            args: Prisma.CommentLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          deleteMany: {
            args: Prisma.CommentLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>[]
          }
          upsert: {
            args: Prisma.CommentLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          aggregate: {
            args: Prisma.CommentLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommentLike>
          }
          groupBy: {
            args: Prisma.CommentLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentLikeCountArgs<ExtArgs>
            result: $Utils.Optional<CommentLikeCountAggregateOutputType> | number
          }
        }
      }
      AnimeEpisodeProgress: {
        payload: Prisma.$AnimeEpisodeProgressPayload<ExtArgs>
        fields: Prisma.AnimeEpisodeProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimeEpisodeProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimeEpisodeProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>
          }
          findFirst: {
            args: Prisma.AnimeEpisodeProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimeEpisodeProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>
          }
          findMany: {
            args: Prisma.AnimeEpisodeProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>[]
          }
          create: {
            args: Prisma.AnimeEpisodeProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>
          }
          createMany: {
            args: Prisma.AnimeEpisodeProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimeEpisodeProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>[]
          }
          delete: {
            args: Prisma.AnimeEpisodeProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>
          }
          update: {
            args: Prisma.AnimeEpisodeProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>
          }
          deleteMany: {
            args: Prisma.AnimeEpisodeProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimeEpisodeProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimeEpisodeProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>[]
          }
          upsert: {
            args: Prisma.AnimeEpisodeProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimeEpisodeProgressPayload>
          }
          aggregate: {
            args: Prisma.AnimeEpisodeProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimeEpisodeProgress>
          }
          groupBy: {
            args: Prisma.AnimeEpisodeProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimeEpisodeProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimeEpisodeProgressCountArgs<ExtArgs>
            result: $Utils.Optional<AnimeEpisodeProgressCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      ReviewLike: {
        payload: Prisma.$ReviewLikePayload<ExtArgs>
        fields: Prisma.ReviewLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          findFirst: {
            args: Prisma.ReviewLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          findMany: {
            args: Prisma.ReviewLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>[]
          }
          create: {
            args: Prisma.ReviewLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          createMany: {
            args: Prisma.ReviewLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>[]
          }
          delete: {
            args: Prisma.ReviewLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          update: {
            args: Prisma.ReviewLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          deleteMany: {
            args: Prisma.ReviewLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>[]
          }
          upsert: {
            args: Prisma.ReviewLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          aggregate: {
            args: Prisma.ReviewLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewLike>
          }
          groupBy: {
            args: Prisma.ReviewLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewLikeCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewLikeCountAggregateOutputType> | number
          }
        }
      }
      UserSettings: {
        payload: Prisma.$UserSettingsPayload<ExtArgs>
        fields: Prisma.UserSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findFirst: {
            args: Prisma.UserSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findMany: {
            args: Prisma.UserSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          create: {
            args: Prisma.UserSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          createMany: {
            args: Prisma.UserSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          delete: {
            args: Prisma.UserSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          update: {
            args: Prisma.UserSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          deleteMany: {
            args: Prisma.UserSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          upsert: {
            args: Prisma.UserSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          aggregate: {
            args: Prisma.UserSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSettings>
          }
          groupBy: {
            args: Prisma.UserSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    demographic?: DemographicOmit
    animeDemographic?: AnimeDemographicOmit
    genre?: GenreOmit
    animeGenre?: AnimeGenreOmit
    animePoster?: AnimePosterOmit
    relatedAnime?: RelatedAnimeOmit
    screenshots?: ScreenshotsOmit
    animeScreenshot?: AnimeScreenshotOmit
    studio?: StudioOmit
    animeStudio?: AnimeStudioOmit
    theme?: ThemeOmit
    animeTheme?: AnimeThemeOmit
    animeVideo?: AnimeVideoOmit
    video?: VideoOmit
    anime?: AnimeOmit
    account?: AccountOmit
    token?: TokenOmit
    parsingSession?: ParsingSessionOmit
    animeCollection?: AnimeCollectionOmit
    animeInCollection?: AnimeInCollectionOmit
    animeCollectionLike?: AnimeCollectionLikeOmit
    comment?: CommentOmit
    commentLike?: CommentLikeOmit
    animeEpisodeProgress?: AnimeEpisodeProgressOmit
    review?: ReviewOmit
    reviewLike?: ReviewLikeOmit
    userSettings?: UserSettingsOmit
    user?: UserOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DemographicCountOutputType
   */

  export type DemographicCountOutputType = {
    animes: number
  }

  export type DemographicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animes?: boolean | DemographicCountOutputTypeCountAnimesArgs
  }

  // Custom InputTypes
  /**
   * DemographicCountOutputType without action
   */
  export type DemographicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemographicCountOutputType
     */
    select?: DemographicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DemographicCountOutputType without action
   */
  export type DemographicCountOutputTypeCountAnimesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeDemographicWhereInput
  }


  /**
   * Count Type GenreCountOutputType
   */

  export type GenreCountOutputType = {
    animes: number
  }

  export type GenreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animes?: boolean | GenreCountOutputTypeCountAnimesArgs
  }

  // Custom InputTypes
  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     */
    select?: GenreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeCountAnimesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeGenreWhereInput
  }


  /**
   * Count Type ScreenshotsCountOutputType
   */

  export type ScreenshotsCountOutputType = {
    animeScreenshot: number
  }

  export type ScreenshotsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animeScreenshot?: boolean | ScreenshotsCountOutputTypeCountAnimeScreenshotArgs
  }

  // Custom InputTypes
  /**
   * ScreenshotsCountOutputType without action
   */
  export type ScreenshotsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScreenshotsCountOutputType
     */
    select?: ScreenshotsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScreenshotsCountOutputType without action
   */
  export type ScreenshotsCountOutputTypeCountAnimeScreenshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeScreenshotWhereInput
  }


  /**
   * Count Type StudioCountOutputType
   */

  export type StudioCountOutputType = {
    AnimeStudio: number
  }

  export type StudioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AnimeStudio?: boolean | StudioCountOutputTypeCountAnimeStudioArgs
  }

  // Custom InputTypes
  /**
   * StudioCountOutputType without action
   */
  export type StudioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudioCountOutputType
     */
    select?: StudioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudioCountOutputType without action
   */
  export type StudioCountOutputTypeCountAnimeStudioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeStudioWhereInput
  }


  /**
   * Count Type ThemeCountOutputType
   */

  export type ThemeCountOutputType = {
    animes: number
  }

  export type ThemeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animes?: boolean | ThemeCountOutputTypeCountAnimesArgs
  }

  // Custom InputTypes
  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeCountOutputType
     */
    select?: ThemeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeCountAnimesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeThemeWhereInput
  }


  /**
   * Count Type VideoCountOutputType
   */

  export type VideoCountOutputType = {
    animeVideo: number
  }

  export type VideoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animeVideo?: boolean | VideoCountOutputTypeCountAnimeVideoArgs
  }

  // Custom InputTypes
  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoCountOutputType
     */
    select?: VideoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountAnimeVideoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeVideoWhereInput
  }


  /**
   * Count Type AnimeCountOutputType
   */

  export type AnimeCountOutputType = {
    poster: number
    studios: number
    related: number
    videos: number
    screenshots: number
    genres: number
    theme: number
    demographic: number
    relatedAnime: number
    userProgress: number
    animeInCollection: number
    comments: number
    reviews: number
  }

  export type AnimeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    poster?: boolean | AnimeCountOutputTypeCountPosterArgs
    studios?: boolean | AnimeCountOutputTypeCountStudiosArgs
    related?: boolean | AnimeCountOutputTypeCountRelatedArgs
    videos?: boolean | AnimeCountOutputTypeCountVideosArgs
    screenshots?: boolean | AnimeCountOutputTypeCountScreenshotsArgs
    genres?: boolean | AnimeCountOutputTypeCountGenresArgs
    theme?: boolean | AnimeCountOutputTypeCountThemeArgs
    demographic?: boolean | AnimeCountOutputTypeCountDemographicArgs
    relatedAnime?: boolean | AnimeCountOutputTypeCountRelatedAnimeArgs
    userProgress?: boolean | AnimeCountOutputTypeCountUserProgressArgs
    animeInCollection?: boolean | AnimeCountOutputTypeCountAnimeInCollectionArgs
    comments?: boolean | AnimeCountOutputTypeCountCommentsArgs
    reviews?: boolean | AnimeCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCountOutputType
     */
    select?: AnimeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountPosterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimePosterWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountStudiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeStudioWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountRelatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedAnimeWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeVideoWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountScreenshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeScreenshotWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeGenreWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountThemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeThemeWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountDemographicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeDemographicWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountRelatedAnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedAnimeWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountUserProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeEpisodeProgressWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountAnimeInCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeInCollectionWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type AnimeCollectionCountOutputType
   */

  export type AnimeCollectionCountOutputType = {
    items: number
    likes: number
  }

  export type AnimeCollectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | AnimeCollectionCountOutputTypeCountItemsArgs
    likes?: boolean | AnimeCollectionCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * AnimeCollectionCountOutputType without action
   */
  export type AnimeCollectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionCountOutputType
     */
    select?: AnimeCollectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnimeCollectionCountOutputType without action
   */
  export type AnimeCollectionCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeInCollectionWhereInput
  }

  /**
   * AnimeCollectionCountOutputType without action
   */
  export type AnimeCollectionCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeCollectionLikeWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    replies: number
    CommentLike: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | CommentCountOutputTypeCountRepliesArgs
    CommentLike?: boolean | CommentCountOutputTypeCountCommentLikeArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountCommentLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
  }


  /**
   * Count Type ReviewCountOutputType
   */

  export type ReviewCountOutputType = {
    reviewLikes: number
  }

  export type ReviewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewLikes?: boolean | ReviewCountOutputTypeCountReviewLikesArgs
  }

  // Custom InputTypes
  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewCountOutputType
     */
    select?: ReviewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewLikeWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    animeProgress: number
    animeCollection: number
    likedCollection: number
    animeComments: number
    animeCommentLikes: number
    animeReviews: number
    reviewLikes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    animeProgress?: boolean | UserCountOutputTypeCountAnimeProgressArgs
    animeCollection?: boolean | UserCountOutputTypeCountAnimeCollectionArgs
    likedCollection?: boolean | UserCountOutputTypeCountLikedCollectionArgs
    animeComments?: boolean | UserCountOutputTypeCountAnimeCommentsArgs
    animeCommentLikes?: boolean | UserCountOutputTypeCountAnimeCommentLikesArgs
    animeReviews?: boolean | UserCountOutputTypeCountAnimeReviewsArgs
    reviewLikes?: boolean | UserCountOutputTypeCountReviewLikesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnimeProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeEpisodeProgressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnimeCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeCollectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikedCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeCollectionLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnimeCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnimeCommentLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnimeReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewLikeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Demographic
   */

  export type AggregateDemographic = {
    _count: DemographicCountAggregateOutputType | null
    _avg: DemographicAvgAggregateOutputType | null
    _sum: DemographicSumAggregateOutputType | null
    _min: DemographicMinAggregateOutputType | null
    _max: DemographicMaxAggregateOutputType | null
  }

  export type DemographicAvgAggregateOutputType = {
    requestId: number | null
  }

  export type DemographicSumAggregateOutputType = {
    requestId: number | null
  }

  export type DemographicMinAggregateOutputType = {
    id: string | null
    requestId: number | null
    name: string | null
    russian: string | null
  }

  export type DemographicMaxAggregateOutputType = {
    id: string | null
    requestId: number | null
    name: string | null
    russian: string | null
  }

  export type DemographicCountAggregateOutputType = {
    id: number
    requestId: number
    name: number
    russian: number
    _all: number
  }


  export type DemographicAvgAggregateInputType = {
    requestId?: true
  }

  export type DemographicSumAggregateInputType = {
    requestId?: true
  }

  export type DemographicMinAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
  }

  export type DemographicMaxAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
  }

  export type DemographicCountAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
    _all?: true
  }

  export type DemographicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Demographic to aggregate.
     */
    where?: DemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demographics to fetch.
     */
    orderBy?: DemographicOrderByWithRelationInput | DemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demographics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Demographics
    **/
    _count?: true | DemographicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DemographicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DemographicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DemographicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DemographicMaxAggregateInputType
  }

  export type GetDemographicAggregateType<T extends DemographicAggregateArgs> = {
        [P in keyof T & keyof AggregateDemographic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDemographic[P]>
      : GetScalarType<T[P], AggregateDemographic[P]>
  }




  export type DemographicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemographicWhereInput
    orderBy?: DemographicOrderByWithAggregationInput | DemographicOrderByWithAggregationInput[]
    by: DemographicScalarFieldEnum[] | DemographicScalarFieldEnum
    having?: DemographicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DemographicCountAggregateInputType | true
    _avg?: DemographicAvgAggregateInputType
    _sum?: DemographicSumAggregateInputType
    _min?: DemographicMinAggregateInputType
    _max?: DemographicMaxAggregateInputType
  }

  export type DemographicGroupByOutputType = {
    id: string
    requestId: number
    name: string
    russian: string
    _count: DemographicCountAggregateOutputType | null
    _avg: DemographicAvgAggregateOutputType | null
    _sum: DemographicSumAggregateOutputType | null
    _min: DemographicMinAggregateOutputType | null
    _max: DemographicMaxAggregateOutputType | null
  }

  type GetDemographicGroupByPayload<T extends DemographicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DemographicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DemographicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DemographicGroupByOutputType[P]>
            : GetScalarType<T[P], DemographicGroupByOutputType[P]>
        }
      >
    >


  export type DemographicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
    animes?: boolean | Demographic$animesArgs<ExtArgs>
    _count?: boolean | DemographicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["demographic"]>

  export type DemographicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }, ExtArgs["result"]["demographic"]>

  export type DemographicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }, ExtArgs["result"]["demographic"]>

  export type DemographicSelectScalar = {
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }

  export type DemographicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "name" | "russian", ExtArgs["result"]["demographic"]>
  export type DemographicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animes?: boolean | Demographic$animesArgs<ExtArgs>
    _count?: boolean | DemographicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DemographicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DemographicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DemographicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Demographic"
    objects: {
      animes: Prisma.$AnimeDemographicPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: number
      name: string
      russian: string
    }, ExtArgs["result"]["demographic"]>
    composites: {}
  }

  type DemographicGetPayload<S extends boolean | null | undefined | DemographicDefaultArgs> = $Result.GetResult<Prisma.$DemographicPayload, S>

  type DemographicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DemographicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DemographicCountAggregateInputType | true
    }

  export interface DemographicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Demographic'], meta: { name: 'Demographic' } }
    /**
     * Find zero or one Demographic that matches the filter.
     * @param {DemographicFindUniqueArgs} args - Arguments to find a Demographic
     * @example
     * // Get one Demographic
     * const demographic = await prisma.demographic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DemographicFindUniqueArgs>(args: SelectSubset<T, DemographicFindUniqueArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Demographic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DemographicFindUniqueOrThrowArgs} args - Arguments to find a Demographic
     * @example
     * // Get one Demographic
     * const demographic = await prisma.demographic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DemographicFindUniqueOrThrowArgs>(args: SelectSubset<T, DemographicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Demographic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemographicFindFirstArgs} args - Arguments to find a Demographic
     * @example
     * // Get one Demographic
     * const demographic = await prisma.demographic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DemographicFindFirstArgs>(args?: SelectSubset<T, DemographicFindFirstArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Demographic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemographicFindFirstOrThrowArgs} args - Arguments to find a Demographic
     * @example
     * // Get one Demographic
     * const demographic = await prisma.demographic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DemographicFindFirstOrThrowArgs>(args?: SelectSubset<T, DemographicFindFirstOrThrowArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Demographics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemographicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Demographics
     * const demographics = await prisma.demographic.findMany()
     * 
     * // Get first 10 Demographics
     * const demographics = await prisma.demographic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demographicWithIdOnly = await prisma.demographic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DemographicFindManyArgs>(args?: SelectSubset<T, DemographicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Demographic.
     * @param {DemographicCreateArgs} args - Arguments to create a Demographic.
     * @example
     * // Create one Demographic
     * const Demographic = await prisma.demographic.create({
     *   data: {
     *     // ... data to create a Demographic
     *   }
     * })
     * 
     */
    create<T extends DemographicCreateArgs>(args: SelectSubset<T, DemographicCreateArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Demographics.
     * @param {DemographicCreateManyArgs} args - Arguments to create many Demographics.
     * @example
     * // Create many Demographics
     * const demographic = await prisma.demographic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DemographicCreateManyArgs>(args?: SelectSubset<T, DemographicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Demographics and returns the data saved in the database.
     * @param {DemographicCreateManyAndReturnArgs} args - Arguments to create many Demographics.
     * @example
     * // Create many Demographics
     * const demographic = await prisma.demographic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Demographics and only return the `id`
     * const demographicWithIdOnly = await prisma.demographic.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DemographicCreateManyAndReturnArgs>(args?: SelectSubset<T, DemographicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Demographic.
     * @param {DemographicDeleteArgs} args - Arguments to delete one Demographic.
     * @example
     * // Delete one Demographic
     * const Demographic = await prisma.demographic.delete({
     *   where: {
     *     // ... filter to delete one Demographic
     *   }
     * })
     * 
     */
    delete<T extends DemographicDeleteArgs>(args: SelectSubset<T, DemographicDeleteArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Demographic.
     * @param {DemographicUpdateArgs} args - Arguments to update one Demographic.
     * @example
     * // Update one Demographic
     * const demographic = await prisma.demographic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DemographicUpdateArgs>(args: SelectSubset<T, DemographicUpdateArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Demographics.
     * @param {DemographicDeleteManyArgs} args - Arguments to filter Demographics to delete.
     * @example
     * // Delete a few Demographics
     * const { count } = await prisma.demographic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DemographicDeleteManyArgs>(args?: SelectSubset<T, DemographicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Demographics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemographicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Demographics
     * const demographic = await prisma.demographic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DemographicUpdateManyArgs>(args: SelectSubset<T, DemographicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Demographics and returns the data updated in the database.
     * @param {DemographicUpdateManyAndReturnArgs} args - Arguments to update many Demographics.
     * @example
     * // Update many Demographics
     * const demographic = await prisma.demographic.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Demographics and only return the `id`
     * const demographicWithIdOnly = await prisma.demographic.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DemographicUpdateManyAndReturnArgs>(args: SelectSubset<T, DemographicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Demographic.
     * @param {DemographicUpsertArgs} args - Arguments to update or create a Demographic.
     * @example
     * // Update or create a Demographic
     * const demographic = await prisma.demographic.upsert({
     *   create: {
     *     // ... data to create a Demographic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Demographic we want to update
     *   }
     * })
     */
    upsert<T extends DemographicUpsertArgs>(args: SelectSubset<T, DemographicUpsertArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Demographics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemographicCountArgs} args - Arguments to filter Demographics to count.
     * @example
     * // Count the number of Demographics
     * const count = await prisma.demographic.count({
     *   where: {
     *     // ... the filter for the Demographics we want to count
     *   }
     * })
    **/
    count<T extends DemographicCountArgs>(
      args?: Subset<T, DemographicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DemographicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Demographic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemographicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DemographicAggregateArgs>(args: Subset<T, DemographicAggregateArgs>): Prisma.PrismaPromise<GetDemographicAggregateType<T>>

    /**
     * Group by Demographic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemographicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DemographicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DemographicGroupByArgs['orderBy'] }
        : { orderBy?: DemographicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DemographicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemographicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Demographic model
   */
  readonly fields: DemographicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Demographic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DemographicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    animes<T extends Demographic$animesArgs<ExtArgs> = {}>(args?: Subset<T, Demographic$animesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Demographic model
   */
  interface DemographicFieldRefs {
    readonly id: FieldRef<"Demographic", 'String'>
    readonly requestId: FieldRef<"Demographic", 'Int'>
    readonly name: FieldRef<"Demographic", 'String'>
    readonly russian: FieldRef<"Demographic", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Demographic findUnique
   */
  export type DemographicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * Filter, which Demographic to fetch.
     */
    where: DemographicWhereUniqueInput
  }

  /**
   * Demographic findUniqueOrThrow
   */
  export type DemographicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * Filter, which Demographic to fetch.
     */
    where: DemographicWhereUniqueInput
  }

  /**
   * Demographic findFirst
   */
  export type DemographicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * Filter, which Demographic to fetch.
     */
    where?: DemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demographics to fetch.
     */
    orderBy?: DemographicOrderByWithRelationInput | DemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Demographics.
     */
    cursor?: DemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demographics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Demographics.
     */
    distinct?: DemographicScalarFieldEnum | DemographicScalarFieldEnum[]
  }

  /**
   * Demographic findFirstOrThrow
   */
  export type DemographicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * Filter, which Demographic to fetch.
     */
    where?: DemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demographics to fetch.
     */
    orderBy?: DemographicOrderByWithRelationInput | DemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Demographics.
     */
    cursor?: DemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demographics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Demographics.
     */
    distinct?: DemographicScalarFieldEnum | DemographicScalarFieldEnum[]
  }

  /**
   * Demographic findMany
   */
  export type DemographicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * Filter, which Demographics to fetch.
     */
    where?: DemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demographics to fetch.
     */
    orderBy?: DemographicOrderByWithRelationInput | DemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Demographics.
     */
    cursor?: DemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demographics.
     */
    skip?: number
    distinct?: DemographicScalarFieldEnum | DemographicScalarFieldEnum[]
  }

  /**
   * Demographic create
   */
  export type DemographicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * The data needed to create a Demographic.
     */
    data: XOR<DemographicCreateInput, DemographicUncheckedCreateInput>
  }

  /**
   * Demographic createMany
   */
  export type DemographicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Demographics.
     */
    data: DemographicCreateManyInput | DemographicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Demographic createManyAndReturn
   */
  export type DemographicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * The data used to create many Demographics.
     */
    data: DemographicCreateManyInput | DemographicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Demographic update
   */
  export type DemographicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * The data needed to update a Demographic.
     */
    data: XOR<DemographicUpdateInput, DemographicUncheckedUpdateInput>
    /**
     * Choose, which Demographic to update.
     */
    where: DemographicWhereUniqueInput
  }

  /**
   * Demographic updateMany
   */
  export type DemographicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Demographics.
     */
    data: XOR<DemographicUpdateManyMutationInput, DemographicUncheckedUpdateManyInput>
    /**
     * Filter which Demographics to update
     */
    where?: DemographicWhereInput
    /**
     * Limit how many Demographics to update.
     */
    limit?: number
  }

  /**
   * Demographic updateManyAndReturn
   */
  export type DemographicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * The data used to update Demographics.
     */
    data: XOR<DemographicUpdateManyMutationInput, DemographicUncheckedUpdateManyInput>
    /**
     * Filter which Demographics to update
     */
    where?: DemographicWhereInput
    /**
     * Limit how many Demographics to update.
     */
    limit?: number
  }

  /**
   * Demographic upsert
   */
  export type DemographicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * The filter to search for the Demographic to update in case it exists.
     */
    where: DemographicWhereUniqueInput
    /**
     * In case the Demographic found by the `where` argument doesn't exist, create a new Demographic with this data.
     */
    create: XOR<DemographicCreateInput, DemographicUncheckedCreateInput>
    /**
     * In case the Demographic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DemographicUpdateInput, DemographicUncheckedUpdateInput>
  }

  /**
   * Demographic delete
   */
  export type DemographicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
    /**
     * Filter which Demographic to delete.
     */
    where: DemographicWhereUniqueInput
  }

  /**
   * Demographic deleteMany
   */
  export type DemographicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Demographics to delete
     */
    where?: DemographicWhereInput
    /**
     * Limit how many Demographics to delete.
     */
    limit?: number
  }

  /**
   * Demographic.animes
   */
  export type Demographic$animesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    where?: AnimeDemographicWhereInput
    orderBy?: AnimeDemographicOrderByWithRelationInput | AnimeDemographicOrderByWithRelationInput[]
    cursor?: AnimeDemographicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeDemographicScalarFieldEnum | AnimeDemographicScalarFieldEnum[]
  }

  /**
   * Demographic without action
   */
  export type DemographicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demographic
     */
    select?: DemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demographic
     */
    omit?: DemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemographicInclude<ExtArgs> | null
  }


  /**
   * Model AnimeDemographic
   */

  export type AggregateAnimeDemographic = {
    _count: AnimeDemographicCountAggregateOutputType | null
    _min: AnimeDemographicMinAggregateOutputType | null
    _max: AnimeDemographicMaxAggregateOutputType | null
  }

  export type AnimeDemographicMinAggregateOutputType = {
    animeId: string | null
    demographicId: string | null
  }

  export type AnimeDemographicMaxAggregateOutputType = {
    animeId: string | null
    demographicId: string | null
  }

  export type AnimeDemographicCountAggregateOutputType = {
    animeId: number
    demographicId: number
    _all: number
  }


  export type AnimeDemographicMinAggregateInputType = {
    animeId?: true
    demographicId?: true
  }

  export type AnimeDemographicMaxAggregateInputType = {
    animeId?: true
    demographicId?: true
  }

  export type AnimeDemographicCountAggregateInputType = {
    animeId?: true
    demographicId?: true
    _all?: true
  }

  export type AnimeDemographicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeDemographic to aggregate.
     */
    where?: AnimeDemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeDemographics to fetch.
     */
    orderBy?: AnimeDemographicOrderByWithRelationInput | AnimeDemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeDemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeDemographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeDemographics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeDemographics
    **/
    _count?: true | AnimeDemographicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeDemographicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeDemographicMaxAggregateInputType
  }

  export type GetAnimeDemographicAggregateType<T extends AnimeDemographicAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeDemographic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeDemographic[P]>
      : GetScalarType<T[P], AggregateAnimeDemographic[P]>
  }




  export type AnimeDemographicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeDemographicWhereInput
    orderBy?: AnimeDemographicOrderByWithAggregationInput | AnimeDemographicOrderByWithAggregationInput[]
    by: AnimeDemographicScalarFieldEnum[] | AnimeDemographicScalarFieldEnum
    having?: AnimeDemographicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeDemographicCountAggregateInputType | true
    _min?: AnimeDemographicMinAggregateInputType
    _max?: AnimeDemographicMaxAggregateInputType
  }

  export type AnimeDemographicGroupByOutputType = {
    animeId: string
    demographicId: string
    _count: AnimeDemographicCountAggregateOutputType | null
    _min: AnimeDemographicMinAggregateOutputType | null
    _max: AnimeDemographicMaxAggregateOutputType | null
  }

  type GetAnimeDemographicGroupByPayload<T extends AnimeDemographicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeDemographicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeDemographicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeDemographicGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeDemographicGroupByOutputType[P]>
        }
      >
    >


  export type AnimeDemographicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    demographicId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    demographic?: boolean | DemographicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeDemographic"]>

  export type AnimeDemographicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    demographicId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    demographic?: boolean | DemographicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeDemographic"]>

  export type AnimeDemographicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    demographicId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    demographic?: boolean | DemographicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeDemographic"]>

  export type AnimeDemographicSelectScalar = {
    animeId?: boolean
    demographicId?: boolean
  }

  export type AnimeDemographicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"animeId" | "demographicId", ExtArgs["result"]["animeDemographic"]>
  export type AnimeDemographicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    demographic?: boolean | DemographicDefaultArgs<ExtArgs>
  }
  export type AnimeDemographicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    demographic?: boolean | DemographicDefaultArgs<ExtArgs>
  }
  export type AnimeDemographicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    demographic?: boolean | DemographicDefaultArgs<ExtArgs>
  }

  export type $AnimeDemographicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeDemographic"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      demographic: Prisma.$DemographicPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      animeId: string
      demographicId: string
    }, ExtArgs["result"]["animeDemographic"]>
    composites: {}
  }

  type AnimeDemographicGetPayload<S extends boolean | null | undefined | AnimeDemographicDefaultArgs> = $Result.GetResult<Prisma.$AnimeDemographicPayload, S>

  type AnimeDemographicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeDemographicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeDemographicCountAggregateInputType | true
    }

  export interface AnimeDemographicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeDemographic'], meta: { name: 'AnimeDemographic' } }
    /**
     * Find zero or one AnimeDemographic that matches the filter.
     * @param {AnimeDemographicFindUniqueArgs} args - Arguments to find a AnimeDemographic
     * @example
     * // Get one AnimeDemographic
     * const animeDemographic = await prisma.animeDemographic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeDemographicFindUniqueArgs>(args: SelectSubset<T, AnimeDemographicFindUniqueArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeDemographic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeDemographicFindUniqueOrThrowArgs} args - Arguments to find a AnimeDemographic
     * @example
     * // Get one AnimeDemographic
     * const animeDemographic = await prisma.animeDemographic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeDemographicFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeDemographicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeDemographic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeDemographicFindFirstArgs} args - Arguments to find a AnimeDemographic
     * @example
     * // Get one AnimeDemographic
     * const animeDemographic = await prisma.animeDemographic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeDemographicFindFirstArgs>(args?: SelectSubset<T, AnimeDemographicFindFirstArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeDemographic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeDemographicFindFirstOrThrowArgs} args - Arguments to find a AnimeDemographic
     * @example
     * // Get one AnimeDemographic
     * const animeDemographic = await prisma.animeDemographic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeDemographicFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeDemographicFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeDemographics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeDemographicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeDemographics
     * const animeDemographics = await prisma.animeDemographic.findMany()
     * 
     * // Get first 10 AnimeDemographics
     * const animeDemographics = await prisma.animeDemographic.findMany({ take: 10 })
     * 
     * // Only select the `animeId`
     * const animeDemographicWithAnimeIdOnly = await prisma.animeDemographic.findMany({ select: { animeId: true } })
     * 
     */
    findMany<T extends AnimeDemographicFindManyArgs>(args?: SelectSubset<T, AnimeDemographicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeDemographic.
     * @param {AnimeDemographicCreateArgs} args - Arguments to create a AnimeDemographic.
     * @example
     * // Create one AnimeDemographic
     * const AnimeDemographic = await prisma.animeDemographic.create({
     *   data: {
     *     // ... data to create a AnimeDemographic
     *   }
     * })
     * 
     */
    create<T extends AnimeDemographicCreateArgs>(args: SelectSubset<T, AnimeDemographicCreateArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeDemographics.
     * @param {AnimeDemographicCreateManyArgs} args - Arguments to create many AnimeDemographics.
     * @example
     * // Create many AnimeDemographics
     * const animeDemographic = await prisma.animeDemographic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeDemographicCreateManyArgs>(args?: SelectSubset<T, AnimeDemographicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeDemographics and returns the data saved in the database.
     * @param {AnimeDemographicCreateManyAndReturnArgs} args - Arguments to create many AnimeDemographics.
     * @example
     * // Create many AnimeDemographics
     * const animeDemographic = await prisma.animeDemographic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeDemographics and only return the `animeId`
     * const animeDemographicWithAnimeIdOnly = await prisma.animeDemographic.createManyAndReturn({
     *   select: { animeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeDemographicCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeDemographicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeDemographic.
     * @param {AnimeDemographicDeleteArgs} args - Arguments to delete one AnimeDemographic.
     * @example
     * // Delete one AnimeDemographic
     * const AnimeDemographic = await prisma.animeDemographic.delete({
     *   where: {
     *     // ... filter to delete one AnimeDemographic
     *   }
     * })
     * 
     */
    delete<T extends AnimeDemographicDeleteArgs>(args: SelectSubset<T, AnimeDemographicDeleteArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeDemographic.
     * @param {AnimeDemographicUpdateArgs} args - Arguments to update one AnimeDemographic.
     * @example
     * // Update one AnimeDemographic
     * const animeDemographic = await prisma.animeDemographic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeDemographicUpdateArgs>(args: SelectSubset<T, AnimeDemographicUpdateArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeDemographics.
     * @param {AnimeDemographicDeleteManyArgs} args - Arguments to filter AnimeDemographics to delete.
     * @example
     * // Delete a few AnimeDemographics
     * const { count } = await prisma.animeDemographic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeDemographicDeleteManyArgs>(args?: SelectSubset<T, AnimeDemographicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeDemographics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeDemographicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeDemographics
     * const animeDemographic = await prisma.animeDemographic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeDemographicUpdateManyArgs>(args: SelectSubset<T, AnimeDemographicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeDemographics and returns the data updated in the database.
     * @param {AnimeDemographicUpdateManyAndReturnArgs} args - Arguments to update many AnimeDemographics.
     * @example
     * // Update many AnimeDemographics
     * const animeDemographic = await prisma.animeDemographic.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeDemographics and only return the `animeId`
     * const animeDemographicWithAnimeIdOnly = await prisma.animeDemographic.updateManyAndReturn({
     *   select: { animeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeDemographicUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeDemographicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeDemographic.
     * @param {AnimeDemographicUpsertArgs} args - Arguments to update or create a AnimeDemographic.
     * @example
     * // Update or create a AnimeDemographic
     * const animeDemographic = await prisma.animeDemographic.upsert({
     *   create: {
     *     // ... data to create a AnimeDemographic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeDemographic we want to update
     *   }
     * })
     */
    upsert<T extends AnimeDemographicUpsertArgs>(args: SelectSubset<T, AnimeDemographicUpsertArgs<ExtArgs>>): Prisma__AnimeDemographicClient<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeDemographics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeDemographicCountArgs} args - Arguments to filter AnimeDemographics to count.
     * @example
     * // Count the number of AnimeDemographics
     * const count = await prisma.animeDemographic.count({
     *   where: {
     *     // ... the filter for the AnimeDemographics we want to count
     *   }
     * })
    **/
    count<T extends AnimeDemographicCountArgs>(
      args?: Subset<T, AnimeDemographicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeDemographicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeDemographic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeDemographicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeDemographicAggregateArgs>(args: Subset<T, AnimeDemographicAggregateArgs>): Prisma.PrismaPromise<GetAnimeDemographicAggregateType<T>>

    /**
     * Group by AnimeDemographic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeDemographicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeDemographicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeDemographicGroupByArgs['orderBy'] }
        : { orderBy?: AnimeDemographicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeDemographicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeDemographicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeDemographic model
   */
  readonly fields: AnimeDemographicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeDemographic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeDemographicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    demographic<T extends DemographicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DemographicDefaultArgs<ExtArgs>>): Prisma__DemographicClient<$Result.GetResult<Prisma.$DemographicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeDemographic model
   */
  interface AnimeDemographicFieldRefs {
    readonly animeId: FieldRef<"AnimeDemographic", 'String'>
    readonly demographicId: FieldRef<"AnimeDemographic", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AnimeDemographic findUnique
   */
  export type AnimeDemographicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * Filter, which AnimeDemographic to fetch.
     */
    where: AnimeDemographicWhereUniqueInput
  }

  /**
   * AnimeDemographic findUniqueOrThrow
   */
  export type AnimeDemographicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * Filter, which AnimeDemographic to fetch.
     */
    where: AnimeDemographicWhereUniqueInput
  }

  /**
   * AnimeDemographic findFirst
   */
  export type AnimeDemographicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * Filter, which AnimeDemographic to fetch.
     */
    where?: AnimeDemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeDemographics to fetch.
     */
    orderBy?: AnimeDemographicOrderByWithRelationInput | AnimeDemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeDemographics.
     */
    cursor?: AnimeDemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeDemographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeDemographics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeDemographics.
     */
    distinct?: AnimeDemographicScalarFieldEnum | AnimeDemographicScalarFieldEnum[]
  }

  /**
   * AnimeDemographic findFirstOrThrow
   */
  export type AnimeDemographicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * Filter, which AnimeDemographic to fetch.
     */
    where?: AnimeDemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeDemographics to fetch.
     */
    orderBy?: AnimeDemographicOrderByWithRelationInput | AnimeDemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeDemographics.
     */
    cursor?: AnimeDemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeDemographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeDemographics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeDemographics.
     */
    distinct?: AnimeDemographicScalarFieldEnum | AnimeDemographicScalarFieldEnum[]
  }

  /**
   * AnimeDemographic findMany
   */
  export type AnimeDemographicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * Filter, which AnimeDemographics to fetch.
     */
    where?: AnimeDemographicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeDemographics to fetch.
     */
    orderBy?: AnimeDemographicOrderByWithRelationInput | AnimeDemographicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeDemographics.
     */
    cursor?: AnimeDemographicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeDemographics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeDemographics.
     */
    skip?: number
    distinct?: AnimeDemographicScalarFieldEnum | AnimeDemographicScalarFieldEnum[]
  }

  /**
   * AnimeDemographic create
   */
  export type AnimeDemographicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeDemographic.
     */
    data: XOR<AnimeDemographicCreateInput, AnimeDemographicUncheckedCreateInput>
  }

  /**
   * AnimeDemographic createMany
   */
  export type AnimeDemographicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeDemographics.
     */
    data: AnimeDemographicCreateManyInput | AnimeDemographicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeDemographic createManyAndReturn
   */
  export type AnimeDemographicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeDemographics.
     */
    data: AnimeDemographicCreateManyInput | AnimeDemographicCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeDemographic update
   */
  export type AnimeDemographicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeDemographic.
     */
    data: XOR<AnimeDemographicUpdateInput, AnimeDemographicUncheckedUpdateInput>
    /**
     * Choose, which AnimeDemographic to update.
     */
    where: AnimeDemographicWhereUniqueInput
  }

  /**
   * AnimeDemographic updateMany
   */
  export type AnimeDemographicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeDemographics.
     */
    data: XOR<AnimeDemographicUpdateManyMutationInput, AnimeDemographicUncheckedUpdateManyInput>
    /**
     * Filter which AnimeDemographics to update
     */
    where?: AnimeDemographicWhereInput
    /**
     * Limit how many AnimeDemographics to update.
     */
    limit?: number
  }

  /**
   * AnimeDemographic updateManyAndReturn
   */
  export type AnimeDemographicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * The data used to update AnimeDemographics.
     */
    data: XOR<AnimeDemographicUpdateManyMutationInput, AnimeDemographicUncheckedUpdateManyInput>
    /**
     * Filter which AnimeDemographics to update
     */
    where?: AnimeDemographicWhereInput
    /**
     * Limit how many AnimeDemographics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeDemographic upsert
   */
  export type AnimeDemographicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeDemographic to update in case it exists.
     */
    where: AnimeDemographicWhereUniqueInput
    /**
     * In case the AnimeDemographic found by the `where` argument doesn't exist, create a new AnimeDemographic with this data.
     */
    create: XOR<AnimeDemographicCreateInput, AnimeDemographicUncheckedCreateInput>
    /**
     * In case the AnimeDemographic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeDemographicUpdateInput, AnimeDemographicUncheckedUpdateInput>
  }

  /**
   * AnimeDemographic delete
   */
  export type AnimeDemographicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    /**
     * Filter which AnimeDemographic to delete.
     */
    where: AnimeDemographicWhereUniqueInput
  }

  /**
   * AnimeDemographic deleteMany
   */
  export type AnimeDemographicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeDemographics to delete
     */
    where?: AnimeDemographicWhereInput
    /**
     * Limit how many AnimeDemographics to delete.
     */
    limit?: number
  }

  /**
   * AnimeDemographic without action
   */
  export type AnimeDemographicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
  }


  /**
   * Model Genre
   */

  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreAvgAggregateOutputType = {
    requestId: number | null
  }

  export type GenreSumAggregateOutputType = {
    requestId: number | null
  }

  export type GenreMinAggregateOutputType = {
    id: string | null
    requestId: number | null
    name: string | null
    russian: string | null
  }

  export type GenreMaxAggregateOutputType = {
    id: string | null
    requestId: number | null
    name: string | null
    russian: string | null
  }

  export type GenreCountAggregateOutputType = {
    id: number
    requestId: number
    name: number
    russian: number
    _all: number
  }


  export type GenreAvgAggregateInputType = {
    requestId?: true
  }

  export type GenreSumAggregateInputType = {
    requestId?: true
  }

  export type GenreMinAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
  }

  export type GenreMaxAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
  }

  export type GenreCountAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
    _all?: true
  }

  export type GenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genre to aggregate.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type GenreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenreWhereInput
    orderBy?: GenreOrderByWithAggregationInput | GenreOrderByWithAggregationInput[]
    by: GenreScalarFieldEnum[] | GenreScalarFieldEnum
    having?: GenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _avg?: GenreAvgAggregateInputType
    _sum?: GenreSumAggregateInputType
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }

  export type GenreGroupByOutputType = {
    id: string
    requestId: number
    name: string
    russian: string
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends GenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type GenreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
    animes?: boolean | Genre$animesArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectScalar = {
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }

  export type GenreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "name" | "russian", ExtArgs["result"]["genre"]>
  export type GenreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animes?: boolean | Genre$animesArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GenreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GenreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GenrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Genre"
    objects: {
      animes: Prisma.$AnimeGenrePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: number
      name: string
      russian: string
    }, ExtArgs["result"]["genre"]>
    composites: {}
  }

  type GenreGetPayload<S extends boolean | null | undefined | GenreDefaultArgs> = $Result.GetResult<Prisma.$GenrePayload, S>

  type GenreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GenreCountAggregateInputType | true
    }

  export interface GenreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genre'], meta: { name: 'Genre' } }
    /**
     * Find zero or one Genre that matches the filter.
     * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GenreFindUniqueArgs>(args: SelectSubset<T, GenreFindUniqueArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Genre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(args: SelectSubset<T, GenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GenreFindFirstArgs>(args?: SelectSubset<T, GenreFindFirstArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(args?: SelectSubset<T, GenreFindFirstOrThrowArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GenreFindManyArgs>(args?: SelectSubset<T, GenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Genre.
     * @param {GenreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
     */
    create<T extends GenreCreateArgs>(args: SelectSubset<T, GenreCreateArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Genres.
     * @param {GenreCreateManyArgs} args - Arguments to create many Genres.
     * @example
     * // Create many Genres
     * const genre = await prisma.genre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GenreCreateManyArgs>(args?: SelectSubset<T, GenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Genres and returns the data saved in the database.
     * @param {GenreCreateManyAndReturnArgs} args - Arguments to create many Genres.
     * @example
     * // Create many Genres
     * const genre = await prisma.genre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Genres and only return the `id`
     * const genreWithIdOnly = await prisma.genre.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GenreCreateManyAndReturnArgs>(args?: SelectSubset<T, GenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Genre.
     * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
     */
    delete<T extends GenreDeleteArgs>(args: SelectSubset<T, GenreDeleteArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Genre.
     * @param {GenreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GenreUpdateArgs>(args: SelectSubset<T, GenreUpdateArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Genres.
     * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GenreDeleteManyArgs>(args?: SelectSubset<T, GenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GenreUpdateManyArgs>(args: SelectSubset<T, GenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres and returns the data updated in the database.
     * @param {GenreUpdateManyAndReturnArgs} args - Arguments to update many Genres.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Genres and only return the `id`
     * const genreWithIdOnly = await prisma.genre.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GenreUpdateManyAndReturnArgs>(args: SelectSubset<T, GenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Genre.
     * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
     */
    upsert<T extends GenreUpsertArgs>(args: SelectSubset<T, GenreUpsertArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends GenreCountArgs>(
      args?: Subset<T, GenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): Prisma.PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenreGroupByArgs['orderBy'] }
        : { orderBy?: GenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Genre model
   */
  readonly fields: GenreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GenreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    animes<T extends Genre$animesArgs<ExtArgs> = {}>(args?: Subset<T, Genre$animesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Genre model
   */
  interface GenreFieldRefs {
    readonly id: FieldRef<"Genre", 'String'>
    readonly requestId: FieldRef<"Genre", 'Int'>
    readonly name: FieldRef<"Genre", 'String'>
    readonly russian: FieldRef<"Genre", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Genre findUnique
   */
  export type GenreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findUniqueOrThrow
   */
  export type GenreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findFirst
   */
  export type GenreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre findFirstOrThrow
   */
  export type GenreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre findMany
   */
  export type GenreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genres to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre create
   */
  export type GenreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The data needed to create a Genre.
     */
    data: XOR<GenreCreateInput, GenreUncheckedCreateInput>
  }

  /**
   * Genre createMany
   */
  export type GenreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Genres.
     */
    data: GenreCreateManyInput | GenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genre createManyAndReturn
   */
  export type GenreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * The data used to create many Genres.
     */
    data: GenreCreateManyInput | GenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genre update
   */
  export type GenreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The data needed to update a Genre.
     */
    data: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
    /**
     * Choose, which Genre to update.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre updateMany
   */
  export type GenreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to update.
     */
    limit?: number
  }

  /**
   * Genre updateManyAndReturn
   */
  export type GenreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to update.
     */
    limit?: number
  }

  /**
   * Genre upsert
   */
  export type GenreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The filter to search for the Genre to update in case it exists.
     */
    where: GenreWhereUniqueInput
    /**
     * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
     */
    create: XOR<GenreCreateInput, GenreUncheckedCreateInput>
    /**
     * In case the Genre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
  }

  /**
   * Genre delete
   */
  export type GenreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter which Genre to delete.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre deleteMany
   */
  export type GenreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genres to delete
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to delete.
     */
    limit?: number
  }

  /**
   * Genre.animes
   */
  export type Genre$animesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    where?: AnimeGenreWhereInput
    orderBy?: AnimeGenreOrderByWithRelationInput | AnimeGenreOrderByWithRelationInput[]
    cursor?: AnimeGenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeGenreScalarFieldEnum | AnimeGenreScalarFieldEnum[]
  }

  /**
   * Genre without action
   */
  export type GenreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
  }


  /**
   * Model AnimeGenre
   */

  export type AggregateAnimeGenre = {
    _count: AnimeGenreCountAggregateOutputType | null
    _min: AnimeGenreMinAggregateOutputType | null
    _max: AnimeGenreMaxAggregateOutputType | null
  }

  export type AnimeGenreMinAggregateOutputType = {
    animeId: string | null
    genreId: string | null
  }

  export type AnimeGenreMaxAggregateOutputType = {
    animeId: string | null
    genreId: string | null
  }

  export type AnimeGenreCountAggregateOutputType = {
    animeId: number
    genreId: number
    _all: number
  }


  export type AnimeGenreMinAggregateInputType = {
    animeId?: true
    genreId?: true
  }

  export type AnimeGenreMaxAggregateInputType = {
    animeId?: true
    genreId?: true
  }

  export type AnimeGenreCountAggregateInputType = {
    animeId?: true
    genreId?: true
    _all?: true
  }

  export type AnimeGenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeGenre to aggregate.
     */
    where?: AnimeGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeGenres to fetch.
     */
    orderBy?: AnimeGenreOrderByWithRelationInput | AnimeGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeGenres
    **/
    _count?: true | AnimeGenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeGenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeGenreMaxAggregateInputType
  }

  export type GetAnimeGenreAggregateType<T extends AnimeGenreAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeGenre[P]>
      : GetScalarType<T[P], AggregateAnimeGenre[P]>
  }




  export type AnimeGenreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeGenreWhereInput
    orderBy?: AnimeGenreOrderByWithAggregationInput | AnimeGenreOrderByWithAggregationInput[]
    by: AnimeGenreScalarFieldEnum[] | AnimeGenreScalarFieldEnum
    having?: AnimeGenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeGenreCountAggregateInputType | true
    _min?: AnimeGenreMinAggregateInputType
    _max?: AnimeGenreMaxAggregateInputType
  }

  export type AnimeGenreGroupByOutputType = {
    animeId: string
    genreId: string
    _count: AnimeGenreCountAggregateOutputType | null
    _min: AnimeGenreMinAggregateOutputType | null
    _max: AnimeGenreMaxAggregateOutputType | null
  }

  type GetAnimeGenreGroupByPayload<T extends AnimeGenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeGenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeGenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeGenreGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeGenreGroupByOutputType[P]>
        }
      >
    >


  export type AnimeGenreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    genreId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeGenre"]>

  export type AnimeGenreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    genreId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeGenre"]>

  export type AnimeGenreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    genreId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeGenre"]>

  export type AnimeGenreSelectScalar = {
    animeId?: boolean
    genreId?: boolean
  }

  export type AnimeGenreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"animeId" | "genreId", ExtArgs["result"]["animeGenre"]>
  export type AnimeGenreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }
  export type AnimeGenreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }
  export type AnimeGenreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }

  export type $AnimeGenrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeGenre"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      genre: Prisma.$GenrePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      animeId: string
      genreId: string
    }, ExtArgs["result"]["animeGenre"]>
    composites: {}
  }

  type AnimeGenreGetPayload<S extends boolean | null | undefined | AnimeGenreDefaultArgs> = $Result.GetResult<Prisma.$AnimeGenrePayload, S>

  type AnimeGenreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeGenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeGenreCountAggregateInputType | true
    }

  export interface AnimeGenreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeGenre'], meta: { name: 'AnimeGenre' } }
    /**
     * Find zero or one AnimeGenre that matches the filter.
     * @param {AnimeGenreFindUniqueArgs} args - Arguments to find a AnimeGenre
     * @example
     * // Get one AnimeGenre
     * const animeGenre = await prisma.animeGenre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeGenreFindUniqueArgs>(args: SelectSubset<T, AnimeGenreFindUniqueArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeGenre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeGenreFindUniqueOrThrowArgs} args - Arguments to find a AnimeGenre
     * @example
     * // Get one AnimeGenre
     * const animeGenre = await prisma.animeGenre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeGenreFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeGenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeGenre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGenreFindFirstArgs} args - Arguments to find a AnimeGenre
     * @example
     * // Get one AnimeGenre
     * const animeGenre = await prisma.animeGenre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeGenreFindFirstArgs>(args?: SelectSubset<T, AnimeGenreFindFirstArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeGenre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGenreFindFirstOrThrowArgs} args - Arguments to find a AnimeGenre
     * @example
     * // Get one AnimeGenre
     * const animeGenre = await prisma.animeGenre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeGenreFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeGenreFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeGenres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGenreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeGenres
     * const animeGenres = await prisma.animeGenre.findMany()
     * 
     * // Get first 10 AnimeGenres
     * const animeGenres = await prisma.animeGenre.findMany({ take: 10 })
     * 
     * // Only select the `animeId`
     * const animeGenreWithAnimeIdOnly = await prisma.animeGenre.findMany({ select: { animeId: true } })
     * 
     */
    findMany<T extends AnimeGenreFindManyArgs>(args?: SelectSubset<T, AnimeGenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeGenre.
     * @param {AnimeGenreCreateArgs} args - Arguments to create a AnimeGenre.
     * @example
     * // Create one AnimeGenre
     * const AnimeGenre = await prisma.animeGenre.create({
     *   data: {
     *     // ... data to create a AnimeGenre
     *   }
     * })
     * 
     */
    create<T extends AnimeGenreCreateArgs>(args: SelectSubset<T, AnimeGenreCreateArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeGenres.
     * @param {AnimeGenreCreateManyArgs} args - Arguments to create many AnimeGenres.
     * @example
     * // Create many AnimeGenres
     * const animeGenre = await prisma.animeGenre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeGenreCreateManyArgs>(args?: SelectSubset<T, AnimeGenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeGenres and returns the data saved in the database.
     * @param {AnimeGenreCreateManyAndReturnArgs} args - Arguments to create many AnimeGenres.
     * @example
     * // Create many AnimeGenres
     * const animeGenre = await prisma.animeGenre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeGenres and only return the `animeId`
     * const animeGenreWithAnimeIdOnly = await prisma.animeGenre.createManyAndReturn({
     *   select: { animeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeGenreCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeGenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeGenre.
     * @param {AnimeGenreDeleteArgs} args - Arguments to delete one AnimeGenre.
     * @example
     * // Delete one AnimeGenre
     * const AnimeGenre = await prisma.animeGenre.delete({
     *   where: {
     *     // ... filter to delete one AnimeGenre
     *   }
     * })
     * 
     */
    delete<T extends AnimeGenreDeleteArgs>(args: SelectSubset<T, AnimeGenreDeleteArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeGenre.
     * @param {AnimeGenreUpdateArgs} args - Arguments to update one AnimeGenre.
     * @example
     * // Update one AnimeGenre
     * const animeGenre = await prisma.animeGenre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeGenreUpdateArgs>(args: SelectSubset<T, AnimeGenreUpdateArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeGenres.
     * @param {AnimeGenreDeleteManyArgs} args - Arguments to filter AnimeGenres to delete.
     * @example
     * // Delete a few AnimeGenres
     * const { count } = await prisma.animeGenre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeGenreDeleteManyArgs>(args?: SelectSubset<T, AnimeGenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeGenres
     * const animeGenre = await prisma.animeGenre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeGenreUpdateManyArgs>(args: SelectSubset<T, AnimeGenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeGenres and returns the data updated in the database.
     * @param {AnimeGenreUpdateManyAndReturnArgs} args - Arguments to update many AnimeGenres.
     * @example
     * // Update many AnimeGenres
     * const animeGenre = await prisma.animeGenre.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeGenres and only return the `animeId`
     * const animeGenreWithAnimeIdOnly = await prisma.animeGenre.updateManyAndReturn({
     *   select: { animeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeGenreUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeGenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeGenre.
     * @param {AnimeGenreUpsertArgs} args - Arguments to update or create a AnimeGenre.
     * @example
     * // Update or create a AnimeGenre
     * const animeGenre = await prisma.animeGenre.upsert({
     *   create: {
     *     // ... data to create a AnimeGenre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeGenre we want to update
     *   }
     * })
     */
    upsert<T extends AnimeGenreUpsertArgs>(args: SelectSubset<T, AnimeGenreUpsertArgs<ExtArgs>>): Prisma__AnimeGenreClient<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGenreCountArgs} args - Arguments to filter AnimeGenres to count.
     * @example
     * // Count the number of AnimeGenres
     * const count = await prisma.animeGenre.count({
     *   where: {
     *     // ... the filter for the AnimeGenres we want to count
     *   }
     * })
    **/
    count<T extends AnimeGenreCountArgs>(
      args?: Subset<T, AnimeGenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeGenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeGenreAggregateArgs>(args: Subset<T, AnimeGenreAggregateArgs>): Prisma.PrismaPromise<GetAnimeGenreAggregateType<T>>

    /**
     * Group by AnimeGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeGenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeGenreGroupByArgs['orderBy'] }
        : { orderBy?: AnimeGenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeGenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeGenre model
   */
  readonly fields: AnimeGenreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeGenre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeGenreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    genre<T extends GenreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GenreDefaultArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeGenre model
   */
  interface AnimeGenreFieldRefs {
    readonly animeId: FieldRef<"AnimeGenre", 'String'>
    readonly genreId: FieldRef<"AnimeGenre", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AnimeGenre findUnique
   */
  export type AnimeGenreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * Filter, which AnimeGenre to fetch.
     */
    where: AnimeGenreWhereUniqueInput
  }

  /**
   * AnimeGenre findUniqueOrThrow
   */
  export type AnimeGenreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * Filter, which AnimeGenre to fetch.
     */
    where: AnimeGenreWhereUniqueInput
  }

  /**
   * AnimeGenre findFirst
   */
  export type AnimeGenreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * Filter, which AnimeGenre to fetch.
     */
    where?: AnimeGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeGenres to fetch.
     */
    orderBy?: AnimeGenreOrderByWithRelationInput | AnimeGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeGenres.
     */
    cursor?: AnimeGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeGenres.
     */
    distinct?: AnimeGenreScalarFieldEnum | AnimeGenreScalarFieldEnum[]
  }

  /**
   * AnimeGenre findFirstOrThrow
   */
  export type AnimeGenreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * Filter, which AnimeGenre to fetch.
     */
    where?: AnimeGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeGenres to fetch.
     */
    orderBy?: AnimeGenreOrderByWithRelationInput | AnimeGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeGenres.
     */
    cursor?: AnimeGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeGenres.
     */
    distinct?: AnimeGenreScalarFieldEnum | AnimeGenreScalarFieldEnum[]
  }

  /**
   * AnimeGenre findMany
   */
  export type AnimeGenreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * Filter, which AnimeGenres to fetch.
     */
    where?: AnimeGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeGenres to fetch.
     */
    orderBy?: AnimeGenreOrderByWithRelationInput | AnimeGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeGenres.
     */
    cursor?: AnimeGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeGenres.
     */
    skip?: number
    distinct?: AnimeGenreScalarFieldEnum | AnimeGenreScalarFieldEnum[]
  }

  /**
   * AnimeGenre create
   */
  export type AnimeGenreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeGenre.
     */
    data: XOR<AnimeGenreCreateInput, AnimeGenreUncheckedCreateInput>
  }

  /**
   * AnimeGenre createMany
   */
  export type AnimeGenreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeGenres.
     */
    data: AnimeGenreCreateManyInput | AnimeGenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeGenre createManyAndReturn
   */
  export type AnimeGenreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeGenres.
     */
    data: AnimeGenreCreateManyInput | AnimeGenreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeGenre update
   */
  export type AnimeGenreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeGenre.
     */
    data: XOR<AnimeGenreUpdateInput, AnimeGenreUncheckedUpdateInput>
    /**
     * Choose, which AnimeGenre to update.
     */
    where: AnimeGenreWhereUniqueInput
  }

  /**
   * AnimeGenre updateMany
   */
  export type AnimeGenreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeGenres.
     */
    data: XOR<AnimeGenreUpdateManyMutationInput, AnimeGenreUncheckedUpdateManyInput>
    /**
     * Filter which AnimeGenres to update
     */
    where?: AnimeGenreWhereInput
    /**
     * Limit how many AnimeGenres to update.
     */
    limit?: number
  }

  /**
   * AnimeGenre updateManyAndReturn
   */
  export type AnimeGenreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * The data used to update AnimeGenres.
     */
    data: XOR<AnimeGenreUpdateManyMutationInput, AnimeGenreUncheckedUpdateManyInput>
    /**
     * Filter which AnimeGenres to update
     */
    where?: AnimeGenreWhereInput
    /**
     * Limit how many AnimeGenres to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeGenre upsert
   */
  export type AnimeGenreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeGenre to update in case it exists.
     */
    where: AnimeGenreWhereUniqueInput
    /**
     * In case the AnimeGenre found by the `where` argument doesn't exist, create a new AnimeGenre with this data.
     */
    create: XOR<AnimeGenreCreateInput, AnimeGenreUncheckedCreateInput>
    /**
     * In case the AnimeGenre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeGenreUpdateInput, AnimeGenreUncheckedUpdateInput>
  }

  /**
   * AnimeGenre delete
   */
  export type AnimeGenreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    /**
     * Filter which AnimeGenre to delete.
     */
    where: AnimeGenreWhereUniqueInput
  }

  /**
   * AnimeGenre deleteMany
   */
  export type AnimeGenreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeGenres to delete
     */
    where?: AnimeGenreWhereInput
    /**
     * Limit how many AnimeGenres to delete.
     */
    limit?: number
  }

  /**
   * AnimeGenre without action
   */
  export type AnimeGenreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
  }


  /**
   * Model AnimePoster
   */

  export type AggregateAnimePoster = {
    _count: AnimePosterCountAggregateOutputType | null
    _min: AnimePosterMinAggregateOutputType | null
    _max: AnimePosterMaxAggregateOutputType | null
  }

  export type AnimePosterMinAggregateOutputType = {
    id: string | null
    shikimoriId: string | null
    animeId: string | null
    originalUrl: string | null
    mainUrl: string | null
  }

  export type AnimePosterMaxAggregateOutputType = {
    id: string | null
    shikimoriId: string | null
    animeId: string | null
    originalUrl: string | null
    mainUrl: string | null
  }

  export type AnimePosterCountAggregateOutputType = {
    id: number
    shikimoriId: number
    animeId: number
    originalUrl: number
    mainUrl: number
    _all: number
  }


  export type AnimePosterMinAggregateInputType = {
    id?: true
    shikimoriId?: true
    animeId?: true
    originalUrl?: true
    mainUrl?: true
  }

  export type AnimePosterMaxAggregateInputType = {
    id?: true
    shikimoriId?: true
    animeId?: true
    originalUrl?: true
    mainUrl?: true
  }

  export type AnimePosterCountAggregateInputType = {
    id?: true
    shikimoriId?: true
    animeId?: true
    originalUrl?: true
    mainUrl?: true
    _all?: true
  }

  export type AnimePosterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimePoster to aggregate.
     */
    where?: AnimePosterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimePosters to fetch.
     */
    orderBy?: AnimePosterOrderByWithRelationInput | AnimePosterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimePosterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimePosters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimePosters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimePosters
    **/
    _count?: true | AnimePosterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimePosterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimePosterMaxAggregateInputType
  }

  export type GetAnimePosterAggregateType<T extends AnimePosterAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimePoster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimePoster[P]>
      : GetScalarType<T[P], AggregateAnimePoster[P]>
  }




  export type AnimePosterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimePosterWhereInput
    orderBy?: AnimePosterOrderByWithAggregationInput | AnimePosterOrderByWithAggregationInput[]
    by: AnimePosterScalarFieldEnum[] | AnimePosterScalarFieldEnum
    having?: AnimePosterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimePosterCountAggregateInputType | true
    _min?: AnimePosterMinAggregateInputType
    _max?: AnimePosterMaxAggregateInputType
  }

  export type AnimePosterGroupByOutputType = {
    id: string
    shikimoriId: string | null
    animeId: string
    originalUrl: string | null
    mainUrl: string | null
    _count: AnimePosterCountAggregateOutputType | null
    _min: AnimePosterMinAggregateOutputType | null
    _max: AnimePosterMaxAggregateOutputType | null
  }

  type GetAnimePosterGroupByPayload<T extends AnimePosterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimePosterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimePosterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimePosterGroupByOutputType[P]>
            : GetScalarType<T[P], AnimePosterGroupByOutputType[P]>
        }
      >
    >


  export type AnimePosterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    animeId?: boolean
    originalUrl?: boolean
    mainUrl?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animePoster"]>

  export type AnimePosterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    animeId?: boolean
    originalUrl?: boolean
    mainUrl?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animePoster"]>

  export type AnimePosterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    animeId?: boolean
    originalUrl?: boolean
    mainUrl?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animePoster"]>

  export type AnimePosterSelectScalar = {
    id?: boolean
    shikimoriId?: boolean
    animeId?: boolean
    originalUrl?: boolean
    mainUrl?: boolean
  }

  export type AnimePosterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shikimoriId" | "animeId" | "originalUrl" | "mainUrl", ExtArgs["result"]["animePoster"]>
  export type AnimePosterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }
  export type AnimePosterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }
  export type AnimePosterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }

  export type $AnimePosterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimePoster"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shikimoriId: string | null
      animeId: string
      originalUrl: string | null
      mainUrl: string | null
    }, ExtArgs["result"]["animePoster"]>
    composites: {}
  }

  type AnimePosterGetPayload<S extends boolean | null | undefined | AnimePosterDefaultArgs> = $Result.GetResult<Prisma.$AnimePosterPayload, S>

  type AnimePosterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimePosterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimePosterCountAggregateInputType | true
    }

  export interface AnimePosterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimePoster'], meta: { name: 'AnimePoster' } }
    /**
     * Find zero or one AnimePoster that matches the filter.
     * @param {AnimePosterFindUniqueArgs} args - Arguments to find a AnimePoster
     * @example
     * // Get one AnimePoster
     * const animePoster = await prisma.animePoster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimePosterFindUniqueArgs>(args: SelectSubset<T, AnimePosterFindUniqueArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimePoster that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimePosterFindUniqueOrThrowArgs} args - Arguments to find a AnimePoster
     * @example
     * // Get one AnimePoster
     * const animePoster = await prisma.animePoster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimePosterFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimePosterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimePoster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimePosterFindFirstArgs} args - Arguments to find a AnimePoster
     * @example
     * // Get one AnimePoster
     * const animePoster = await prisma.animePoster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimePosterFindFirstArgs>(args?: SelectSubset<T, AnimePosterFindFirstArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimePoster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimePosterFindFirstOrThrowArgs} args - Arguments to find a AnimePoster
     * @example
     * // Get one AnimePoster
     * const animePoster = await prisma.animePoster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimePosterFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimePosterFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimePosters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimePosterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimePosters
     * const animePosters = await prisma.animePoster.findMany()
     * 
     * // Get first 10 AnimePosters
     * const animePosters = await prisma.animePoster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animePosterWithIdOnly = await prisma.animePoster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnimePosterFindManyArgs>(args?: SelectSubset<T, AnimePosterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimePoster.
     * @param {AnimePosterCreateArgs} args - Arguments to create a AnimePoster.
     * @example
     * // Create one AnimePoster
     * const AnimePoster = await prisma.animePoster.create({
     *   data: {
     *     // ... data to create a AnimePoster
     *   }
     * })
     * 
     */
    create<T extends AnimePosterCreateArgs>(args: SelectSubset<T, AnimePosterCreateArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimePosters.
     * @param {AnimePosterCreateManyArgs} args - Arguments to create many AnimePosters.
     * @example
     * // Create many AnimePosters
     * const animePoster = await prisma.animePoster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimePosterCreateManyArgs>(args?: SelectSubset<T, AnimePosterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimePosters and returns the data saved in the database.
     * @param {AnimePosterCreateManyAndReturnArgs} args - Arguments to create many AnimePosters.
     * @example
     * // Create many AnimePosters
     * const animePoster = await prisma.animePoster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimePosters and only return the `id`
     * const animePosterWithIdOnly = await prisma.animePoster.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimePosterCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimePosterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimePoster.
     * @param {AnimePosterDeleteArgs} args - Arguments to delete one AnimePoster.
     * @example
     * // Delete one AnimePoster
     * const AnimePoster = await prisma.animePoster.delete({
     *   where: {
     *     // ... filter to delete one AnimePoster
     *   }
     * })
     * 
     */
    delete<T extends AnimePosterDeleteArgs>(args: SelectSubset<T, AnimePosterDeleteArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimePoster.
     * @param {AnimePosterUpdateArgs} args - Arguments to update one AnimePoster.
     * @example
     * // Update one AnimePoster
     * const animePoster = await prisma.animePoster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimePosterUpdateArgs>(args: SelectSubset<T, AnimePosterUpdateArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimePosters.
     * @param {AnimePosterDeleteManyArgs} args - Arguments to filter AnimePosters to delete.
     * @example
     * // Delete a few AnimePosters
     * const { count } = await prisma.animePoster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimePosterDeleteManyArgs>(args?: SelectSubset<T, AnimePosterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimePosters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimePosterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimePosters
     * const animePoster = await prisma.animePoster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimePosterUpdateManyArgs>(args: SelectSubset<T, AnimePosterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimePosters and returns the data updated in the database.
     * @param {AnimePosterUpdateManyAndReturnArgs} args - Arguments to update many AnimePosters.
     * @example
     * // Update many AnimePosters
     * const animePoster = await prisma.animePoster.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimePosters and only return the `id`
     * const animePosterWithIdOnly = await prisma.animePoster.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimePosterUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimePosterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimePoster.
     * @param {AnimePosterUpsertArgs} args - Arguments to update or create a AnimePoster.
     * @example
     * // Update or create a AnimePoster
     * const animePoster = await prisma.animePoster.upsert({
     *   create: {
     *     // ... data to create a AnimePoster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimePoster we want to update
     *   }
     * })
     */
    upsert<T extends AnimePosterUpsertArgs>(args: SelectSubset<T, AnimePosterUpsertArgs<ExtArgs>>): Prisma__AnimePosterClient<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimePosters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimePosterCountArgs} args - Arguments to filter AnimePosters to count.
     * @example
     * // Count the number of AnimePosters
     * const count = await prisma.animePoster.count({
     *   where: {
     *     // ... the filter for the AnimePosters we want to count
     *   }
     * })
    **/
    count<T extends AnimePosterCountArgs>(
      args?: Subset<T, AnimePosterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimePosterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimePoster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimePosterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimePosterAggregateArgs>(args: Subset<T, AnimePosterAggregateArgs>): Prisma.PrismaPromise<GetAnimePosterAggregateType<T>>

    /**
     * Group by AnimePoster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimePosterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimePosterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimePosterGroupByArgs['orderBy'] }
        : { orderBy?: AnimePosterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimePosterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimePosterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimePoster model
   */
  readonly fields: AnimePosterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimePoster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimePosterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimePoster model
   */
  interface AnimePosterFieldRefs {
    readonly id: FieldRef<"AnimePoster", 'String'>
    readonly shikimoriId: FieldRef<"AnimePoster", 'String'>
    readonly animeId: FieldRef<"AnimePoster", 'String'>
    readonly originalUrl: FieldRef<"AnimePoster", 'String'>
    readonly mainUrl: FieldRef<"AnimePoster", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AnimePoster findUnique
   */
  export type AnimePosterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * Filter, which AnimePoster to fetch.
     */
    where: AnimePosterWhereUniqueInput
  }

  /**
   * AnimePoster findUniqueOrThrow
   */
  export type AnimePosterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * Filter, which AnimePoster to fetch.
     */
    where: AnimePosterWhereUniqueInput
  }

  /**
   * AnimePoster findFirst
   */
  export type AnimePosterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * Filter, which AnimePoster to fetch.
     */
    where?: AnimePosterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimePosters to fetch.
     */
    orderBy?: AnimePosterOrderByWithRelationInput | AnimePosterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimePosters.
     */
    cursor?: AnimePosterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimePosters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimePosters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimePosters.
     */
    distinct?: AnimePosterScalarFieldEnum | AnimePosterScalarFieldEnum[]
  }

  /**
   * AnimePoster findFirstOrThrow
   */
  export type AnimePosterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * Filter, which AnimePoster to fetch.
     */
    where?: AnimePosterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimePosters to fetch.
     */
    orderBy?: AnimePosterOrderByWithRelationInput | AnimePosterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimePosters.
     */
    cursor?: AnimePosterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimePosters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimePosters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimePosters.
     */
    distinct?: AnimePosterScalarFieldEnum | AnimePosterScalarFieldEnum[]
  }

  /**
   * AnimePoster findMany
   */
  export type AnimePosterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * Filter, which AnimePosters to fetch.
     */
    where?: AnimePosterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimePosters to fetch.
     */
    orderBy?: AnimePosterOrderByWithRelationInput | AnimePosterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimePosters.
     */
    cursor?: AnimePosterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimePosters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimePosters.
     */
    skip?: number
    distinct?: AnimePosterScalarFieldEnum | AnimePosterScalarFieldEnum[]
  }

  /**
   * AnimePoster create
   */
  export type AnimePosterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimePoster.
     */
    data: XOR<AnimePosterCreateInput, AnimePosterUncheckedCreateInput>
  }

  /**
   * AnimePoster createMany
   */
  export type AnimePosterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimePosters.
     */
    data: AnimePosterCreateManyInput | AnimePosterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimePoster createManyAndReturn
   */
  export type AnimePosterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * The data used to create many AnimePosters.
     */
    data: AnimePosterCreateManyInput | AnimePosterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimePoster update
   */
  export type AnimePosterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimePoster.
     */
    data: XOR<AnimePosterUpdateInput, AnimePosterUncheckedUpdateInput>
    /**
     * Choose, which AnimePoster to update.
     */
    where: AnimePosterWhereUniqueInput
  }

  /**
   * AnimePoster updateMany
   */
  export type AnimePosterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimePosters.
     */
    data: XOR<AnimePosterUpdateManyMutationInput, AnimePosterUncheckedUpdateManyInput>
    /**
     * Filter which AnimePosters to update
     */
    where?: AnimePosterWhereInput
    /**
     * Limit how many AnimePosters to update.
     */
    limit?: number
  }

  /**
   * AnimePoster updateManyAndReturn
   */
  export type AnimePosterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * The data used to update AnimePosters.
     */
    data: XOR<AnimePosterUpdateManyMutationInput, AnimePosterUncheckedUpdateManyInput>
    /**
     * Filter which AnimePosters to update
     */
    where?: AnimePosterWhereInput
    /**
     * Limit how many AnimePosters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimePoster upsert
   */
  export type AnimePosterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimePoster to update in case it exists.
     */
    where: AnimePosterWhereUniqueInput
    /**
     * In case the AnimePoster found by the `where` argument doesn't exist, create a new AnimePoster with this data.
     */
    create: XOR<AnimePosterCreateInput, AnimePosterUncheckedCreateInput>
    /**
     * In case the AnimePoster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimePosterUpdateInput, AnimePosterUncheckedUpdateInput>
  }

  /**
   * AnimePoster delete
   */
  export type AnimePosterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    /**
     * Filter which AnimePoster to delete.
     */
    where: AnimePosterWhereUniqueInput
  }

  /**
   * AnimePoster deleteMany
   */
  export type AnimePosterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimePosters to delete
     */
    where?: AnimePosterWhereInput
    /**
     * Limit how many AnimePosters to delete.
     */
    limit?: number
  }

  /**
   * AnimePoster without action
   */
  export type AnimePosterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
  }


  /**
   * Model RelatedAnime
   */

  export type AggregateRelatedAnime = {
    _count: RelatedAnimeCountAggregateOutputType | null
    _min: RelatedAnimeMinAggregateOutputType | null
    _max: RelatedAnimeMaxAggregateOutputType | null
  }

  export type RelatedAnimeMinAggregateOutputType = {
    id: string | null
    animeId: string | null
    relatedAnimeId: string | null
    relationKind: $Enums.RelationKind | null
  }

  export type RelatedAnimeMaxAggregateOutputType = {
    id: string | null
    animeId: string | null
    relatedAnimeId: string | null
    relationKind: $Enums.RelationKind | null
  }

  export type RelatedAnimeCountAggregateOutputType = {
    id: number
    animeId: number
    relatedAnimeId: number
    relationKind: number
    _all: number
  }


  export type RelatedAnimeMinAggregateInputType = {
    id?: true
    animeId?: true
    relatedAnimeId?: true
    relationKind?: true
  }

  export type RelatedAnimeMaxAggregateInputType = {
    id?: true
    animeId?: true
    relatedAnimeId?: true
    relationKind?: true
  }

  export type RelatedAnimeCountAggregateInputType = {
    id?: true
    animeId?: true
    relatedAnimeId?: true
    relationKind?: true
    _all?: true
  }

  export type RelatedAnimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatedAnime to aggregate.
     */
    where?: RelatedAnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedAnimes to fetch.
     */
    orderBy?: RelatedAnimeOrderByWithRelationInput | RelatedAnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelatedAnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedAnimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedAnimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RelatedAnimes
    **/
    _count?: true | RelatedAnimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelatedAnimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelatedAnimeMaxAggregateInputType
  }

  export type GetRelatedAnimeAggregateType<T extends RelatedAnimeAggregateArgs> = {
        [P in keyof T & keyof AggregateRelatedAnime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelatedAnime[P]>
      : GetScalarType<T[P], AggregateRelatedAnime[P]>
  }




  export type RelatedAnimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedAnimeWhereInput
    orderBy?: RelatedAnimeOrderByWithAggregationInput | RelatedAnimeOrderByWithAggregationInput[]
    by: RelatedAnimeScalarFieldEnum[] | RelatedAnimeScalarFieldEnum
    having?: RelatedAnimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelatedAnimeCountAggregateInputType | true
    _min?: RelatedAnimeMinAggregateInputType
    _max?: RelatedAnimeMaxAggregateInputType
  }

  export type RelatedAnimeGroupByOutputType = {
    id: string
    animeId: string
    relatedAnimeId: string
    relationKind: $Enums.RelationKind
    _count: RelatedAnimeCountAggregateOutputType | null
    _min: RelatedAnimeMinAggregateOutputType | null
    _max: RelatedAnimeMaxAggregateOutputType | null
  }

  type GetRelatedAnimeGroupByPayload<T extends RelatedAnimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelatedAnimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelatedAnimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelatedAnimeGroupByOutputType[P]>
            : GetScalarType<T[P], RelatedAnimeGroupByOutputType[P]>
        }
      >
    >


  export type RelatedAnimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    animeId?: boolean
    relatedAnimeId?: boolean
    relationKind?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    related?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatedAnime"]>

  export type RelatedAnimeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    animeId?: boolean
    relatedAnimeId?: boolean
    relationKind?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    related?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatedAnime"]>

  export type RelatedAnimeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    animeId?: boolean
    relatedAnimeId?: boolean
    relationKind?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    related?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatedAnime"]>

  export type RelatedAnimeSelectScalar = {
    id?: boolean
    animeId?: boolean
    relatedAnimeId?: boolean
    relationKind?: boolean
  }

  export type RelatedAnimeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "animeId" | "relatedAnimeId" | "relationKind", ExtArgs["result"]["relatedAnime"]>
  export type RelatedAnimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    related?: boolean | AnimeDefaultArgs<ExtArgs>
  }
  export type RelatedAnimeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    related?: boolean | AnimeDefaultArgs<ExtArgs>
  }
  export type RelatedAnimeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    related?: boolean | AnimeDefaultArgs<ExtArgs>
  }

  export type $RelatedAnimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RelatedAnime"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      related: Prisma.$AnimePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      animeId: string
      relatedAnimeId: string
      relationKind: $Enums.RelationKind
    }, ExtArgs["result"]["relatedAnime"]>
    composites: {}
  }

  type RelatedAnimeGetPayload<S extends boolean | null | undefined | RelatedAnimeDefaultArgs> = $Result.GetResult<Prisma.$RelatedAnimePayload, S>

  type RelatedAnimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RelatedAnimeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RelatedAnimeCountAggregateInputType | true
    }

  export interface RelatedAnimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RelatedAnime'], meta: { name: 'RelatedAnime' } }
    /**
     * Find zero or one RelatedAnime that matches the filter.
     * @param {RelatedAnimeFindUniqueArgs} args - Arguments to find a RelatedAnime
     * @example
     * // Get one RelatedAnime
     * const relatedAnime = await prisma.relatedAnime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelatedAnimeFindUniqueArgs>(args: SelectSubset<T, RelatedAnimeFindUniqueArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RelatedAnime that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RelatedAnimeFindUniqueOrThrowArgs} args - Arguments to find a RelatedAnime
     * @example
     * // Get one RelatedAnime
     * const relatedAnime = await prisma.relatedAnime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelatedAnimeFindUniqueOrThrowArgs>(args: SelectSubset<T, RelatedAnimeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RelatedAnime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAnimeFindFirstArgs} args - Arguments to find a RelatedAnime
     * @example
     * // Get one RelatedAnime
     * const relatedAnime = await prisma.relatedAnime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelatedAnimeFindFirstArgs>(args?: SelectSubset<T, RelatedAnimeFindFirstArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RelatedAnime that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAnimeFindFirstOrThrowArgs} args - Arguments to find a RelatedAnime
     * @example
     * // Get one RelatedAnime
     * const relatedAnime = await prisma.relatedAnime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelatedAnimeFindFirstOrThrowArgs>(args?: SelectSubset<T, RelatedAnimeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RelatedAnimes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAnimeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RelatedAnimes
     * const relatedAnimes = await prisma.relatedAnime.findMany()
     * 
     * // Get first 10 RelatedAnimes
     * const relatedAnimes = await prisma.relatedAnime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relatedAnimeWithIdOnly = await prisma.relatedAnime.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelatedAnimeFindManyArgs>(args?: SelectSubset<T, RelatedAnimeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RelatedAnime.
     * @param {RelatedAnimeCreateArgs} args - Arguments to create a RelatedAnime.
     * @example
     * // Create one RelatedAnime
     * const RelatedAnime = await prisma.relatedAnime.create({
     *   data: {
     *     // ... data to create a RelatedAnime
     *   }
     * })
     * 
     */
    create<T extends RelatedAnimeCreateArgs>(args: SelectSubset<T, RelatedAnimeCreateArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RelatedAnimes.
     * @param {RelatedAnimeCreateManyArgs} args - Arguments to create many RelatedAnimes.
     * @example
     * // Create many RelatedAnimes
     * const relatedAnime = await prisma.relatedAnime.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelatedAnimeCreateManyArgs>(args?: SelectSubset<T, RelatedAnimeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RelatedAnimes and returns the data saved in the database.
     * @param {RelatedAnimeCreateManyAndReturnArgs} args - Arguments to create many RelatedAnimes.
     * @example
     * // Create many RelatedAnimes
     * const relatedAnime = await prisma.relatedAnime.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RelatedAnimes and only return the `id`
     * const relatedAnimeWithIdOnly = await prisma.relatedAnime.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RelatedAnimeCreateManyAndReturnArgs>(args?: SelectSubset<T, RelatedAnimeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RelatedAnime.
     * @param {RelatedAnimeDeleteArgs} args - Arguments to delete one RelatedAnime.
     * @example
     * // Delete one RelatedAnime
     * const RelatedAnime = await prisma.relatedAnime.delete({
     *   where: {
     *     // ... filter to delete one RelatedAnime
     *   }
     * })
     * 
     */
    delete<T extends RelatedAnimeDeleteArgs>(args: SelectSubset<T, RelatedAnimeDeleteArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RelatedAnime.
     * @param {RelatedAnimeUpdateArgs} args - Arguments to update one RelatedAnime.
     * @example
     * // Update one RelatedAnime
     * const relatedAnime = await prisma.relatedAnime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelatedAnimeUpdateArgs>(args: SelectSubset<T, RelatedAnimeUpdateArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RelatedAnimes.
     * @param {RelatedAnimeDeleteManyArgs} args - Arguments to filter RelatedAnimes to delete.
     * @example
     * // Delete a few RelatedAnimes
     * const { count } = await prisma.relatedAnime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelatedAnimeDeleteManyArgs>(args?: SelectSubset<T, RelatedAnimeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelatedAnimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAnimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RelatedAnimes
     * const relatedAnime = await prisma.relatedAnime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelatedAnimeUpdateManyArgs>(args: SelectSubset<T, RelatedAnimeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelatedAnimes and returns the data updated in the database.
     * @param {RelatedAnimeUpdateManyAndReturnArgs} args - Arguments to update many RelatedAnimes.
     * @example
     * // Update many RelatedAnimes
     * const relatedAnime = await prisma.relatedAnime.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RelatedAnimes and only return the `id`
     * const relatedAnimeWithIdOnly = await prisma.relatedAnime.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RelatedAnimeUpdateManyAndReturnArgs>(args: SelectSubset<T, RelatedAnimeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RelatedAnime.
     * @param {RelatedAnimeUpsertArgs} args - Arguments to update or create a RelatedAnime.
     * @example
     * // Update or create a RelatedAnime
     * const relatedAnime = await prisma.relatedAnime.upsert({
     *   create: {
     *     // ... data to create a RelatedAnime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RelatedAnime we want to update
     *   }
     * })
     */
    upsert<T extends RelatedAnimeUpsertArgs>(args: SelectSubset<T, RelatedAnimeUpsertArgs<ExtArgs>>): Prisma__RelatedAnimeClient<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RelatedAnimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAnimeCountArgs} args - Arguments to filter RelatedAnimes to count.
     * @example
     * // Count the number of RelatedAnimes
     * const count = await prisma.relatedAnime.count({
     *   where: {
     *     // ... the filter for the RelatedAnimes we want to count
     *   }
     * })
    **/
    count<T extends RelatedAnimeCountArgs>(
      args?: Subset<T, RelatedAnimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelatedAnimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RelatedAnime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAnimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelatedAnimeAggregateArgs>(args: Subset<T, RelatedAnimeAggregateArgs>): Prisma.PrismaPromise<GetRelatedAnimeAggregateType<T>>

    /**
     * Group by RelatedAnime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedAnimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelatedAnimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelatedAnimeGroupByArgs['orderBy'] }
        : { orderBy?: RelatedAnimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelatedAnimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelatedAnimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RelatedAnime model
   */
  readonly fields: RelatedAnimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RelatedAnime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelatedAnimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    related<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RelatedAnime model
   */
  interface RelatedAnimeFieldRefs {
    readonly id: FieldRef<"RelatedAnime", 'String'>
    readonly animeId: FieldRef<"RelatedAnime", 'String'>
    readonly relatedAnimeId: FieldRef<"RelatedAnime", 'String'>
    readonly relationKind: FieldRef<"RelatedAnime", 'RelationKind'>
  }
    

  // Custom InputTypes
  /**
   * RelatedAnime findUnique
   */
  export type RelatedAnimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * Filter, which RelatedAnime to fetch.
     */
    where: RelatedAnimeWhereUniqueInput
  }

  /**
   * RelatedAnime findUniqueOrThrow
   */
  export type RelatedAnimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * Filter, which RelatedAnime to fetch.
     */
    where: RelatedAnimeWhereUniqueInput
  }

  /**
   * RelatedAnime findFirst
   */
  export type RelatedAnimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * Filter, which RelatedAnime to fetch.
     */
    where?: RelatedAnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedAnimes to fetch.
     */
    orderBy?: RelatedAnimeOrderByWithRelationInput | RelatedAnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatedAnimes.
     */
    cursor?: RelatedAnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedAnimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedAnimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatedAnimes.
     */
    distinct?: RelatedAnimeScalarFieldEnum | RelatedAnimeScalarFieldEnum[]
  }

  /**
   * RelatedAnime findFirstOrThrow
   */
  export type RelatedAnimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * Filter, which RelatedAnime to fetch.
     */
    where?: RelatedAnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedAnimes to fetch.
     */
    orderBy?: RelatedAnimeOrderByWithRelationInput | RelatedAnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatedAnimes.
     */
    cursor?: RelatedAnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedAnimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedAnimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatedAnimes.
     */
    distinct?: RelatedAnimeScalarFieldEnum | RelatedAnimeScalarFieldEnum[]
  }

  /**
   * RelatedAnime findMany
   */
  export type RelatedAnimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * Filter, which RelatedAnimes to fetch.
     */
    where?: RelatedAnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedAnimes to fetch.
     */
    orderBy?: RelatedAnimeOrderByWithRelationInput | RelatedAnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RelatedAnimes.
     */
    cursor?: RelatedAnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedAnimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedAnimes.
     */
    skip?: number
    distinct?: RelatedAnimeScalarFieldEnum | RelatedAnimeScalarFieldEnum[]
  }

  /**
   * RelatedAnime create
   */
  export type RelatedAnimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * The data needed to create a RelatedAnime.
     */
    data: XOR<RelatedAnimeCreateInput, RelatedAnimeUncheckedCreateInput>
  }

  /**
   * RelatedAnime createMany
   */
  export type RelatedAnimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RelatedAnimes.
     */
    data: RelatedAnimeCreateManyInput | RelatedAnimeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RelatedAnime createManyAndReturn
   */
  export type RelatedAnimeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * The data used to create many RelatedAnimes.
     */
    data: RelatedAnimeCreateManyInput | RelatedAnimeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RelatedAnime update
   */
  export type RelatedAnimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * The data needed to update a RelatedAnime.
     */
    data: XOR<RelatedAnimeUpdateInput, RelatedAnimeUncheckedUpdateInput>
    /**
     * Choose, which RelatedAnime to update.
     */
    where: RelatedAnimeWhereUniqueInput
  }

  /**
   * RelatedAnime updateMany
   */
  export type RelatedAnimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RelatedAnimes.
     */
    data: XOR<RelatedAnimeUpdateManyMutationInput, RelatedAnimeUncheckedUpdateManyInput>
    /**
     * Filter which RelatedAnimes to update
     */
    where?: RelatedAnimeWhereInput
    /**
     * Limit how many RelatedAnimes to update.
     */
    limit?: number
  }

  /**
   * RelatedAnime updateManyAndReturn
   */
  export type RelatedAnimeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * The data used to update RelatedAnimes.
     */
    data: XOR<RelatedAnimeUpdateManyMutationInput, RelatedAnimeUncheckedUpdateManyInput>
    /**
     * Filter which RelatedAnimes to update
     */
    where?: RelatedAnimeWhereInput
    /**
     * Limit how many RelatedAnimes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RelatedAnime upsert
   */
  export type RelatedAnimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * The filter to search for the RelatedAnime to update in case it exists.
     */
    where: RelatedAnimeWhereUniqueInput
    /**
     * In case the RelatedAnime found by the `where` argument doesn't exist, create a new RelatedAnime with this data.
     */
    create: XOR<RelatedAnimeCreateInput, RelatedAnimeUncheckedCreateInput>
    /**
     * In case the RelatedAnime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelatedAnimeUpdateInput, RelatedAnimeUncheckedUpdateInput>
  }

  /**
   * RelatedAnime delete
   */
  export type RelatedAnimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    /**
     * Filter which RelatedAnime to delete.
     */
    where: RelatedAnimeWhereUniqueInput
  }

  /**
   * RelatedAnime deleteMany
   */
  export type RelatedAnimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatedAnimes to delete
     */
    where?: RelatedAnimeWhereInput
    /**
     * Limit how many RelatedAnimes to delete.
     */
    limit?: number
  }

  /**
   * RelatedAnime without action
   */
  export type RelatedAnimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
  }


  /**
   * Model Screenshots
   */

  export type AggregateScreenshots = {
    _count: ScreenshotsCountAggregateOutputType | null
    _min: ScreenshotsMinAggregateOutputType | null
    _max: ScreenshotsMaxAggregateOutputType | null
  }

  export type ScreenshotsMinAggregateOutputType = {
    id: string | null
    shikimoriId: string | null
    originalUrl: string | null
    x332Url: string | null
  }

  export type ScreenshotsMaxAggregateOutputType = {
    id: string | null
    shikimoriId: string | null
    originalUrl: string | null
    x332Url: string | null
  }

  export type ScreenshotsCountAggregateOutputType = {
    id: number
    shikimoriId: number
    originalUrl: number
    x332Url: number
    _all: number
  }


  export type ScreenshotsMinAggregateInputType = {
    id?: true
    shikimoriId?: true
    originalUrl?: true
    x332Url?: true
  }

  export type ScreenshotsMaxAggregateInputType = {
    id?: true
    shikimoriId?: true
    originalUrl?: true
    x332Url?: true
  }

  export type ScreenshotsCountAggregateInputType = {
    id?: true
    shikimoriId?: true
    originalUrl?: true
    x332Url?: true
    _all?: true
  }

  export type ScreenshotsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Screenshots to aggregate.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Screenshots
    **/
    _count?: true | ScreenshotsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScreenshotsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScreenshotsMaxAggregateInputType
  }

  export type GetScreenshotsAggregateType<T extends ScreenshotsAggregateArgs> = {
        [P in keyof T & keyof AggregateScreenshots]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScreenshots[P]>
      : GetScalarType<T[P], AggregateScreenshots[P]>
  }




  export type ScreenshotsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScreenshotsWhereInput
    orderBy?: ScreenshotsOrderByWithAggregationInput | ScreenshotsOrderByWithAggregationInput[]
    by: ScreenshotsScalarFieldEnum[] | ScreenshotsScalarFieldEnum
    having?: ScreenshotsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScreenshotsCountAggregateInputType | true
    _min?: ScreenshotsMinAggregateInputType
    _max?: ScreenshotsMaxAggregateInputType
  }

  export type ScreenshotsGroupByOutputType = {
    id: string
    shikimoriId: string
    originalUrl: string | null
    x332Url: string | null
    _count: ScreenshotsCountAggregateOutputType | null
    _min: ScreenshotsMinAggregateOutputType | null
    _max: ScreenshotsMaxAggregateOutputType | null
  }

  type GetScreenshotsGroupByPayload<T extends ScreenshotsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScreenshotsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScreenshotsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScreenshotsGroupByOutputType[P]>
            : GetScalarType<T[P], ScreenshotsGroupByOutputType[P]>
        }
      >
    >


  export type ScreenshotsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    originalUrl?: boolean
    x332Url?: boolean
    animeScreenshot?: boolean | Screenshots$animeScreenshotArgs<ExtArgs>
    _count?: boolean | ScreenshotsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["screenshots"]>

  export type ScreenshotsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    originalUrl?: boolean
    x332Url?: boolean
  }, ExtArgs["result"]["screenshots"]>

  export type ScreenshotsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    originalUrl?: boolean
    x332Url?: boolean
  }, ExtArgs["result"]["screenshots"]>

  export type ScreenshotsSelectScalar = {
    id?: boolean
    shikimoriId?: boolean
    originalUrl?: boolean
    x332Url?: boolean
  }

  export type ScreenshotsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shikimoriId" | "originalUrl" | "x332Url", ExtArgs["result"]["screenshots"]>
  export type ScreenshotsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animeScreenshot?: boolean | Screenshots$animeScreenshotArgs<ExtArgs>
    _count?: boolean | ScreenshotsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScreenshotsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ScreenshotsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ScreenshotsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Screenshots"
    objects: {
      animeScreenshot: Prisma.$AnimeScreenshotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shikimoriId: string
      originalUrl: string | null
      x332Url: string | null
    }, ExtArgs["result"]["screenshots"]>
    composites: {}
  }

  type ScreenshotsGetPayload<S extends boolean | null | undefined | ScreenshotsDefaultArgs> = $Result.GetResult<Prisma.$ScreenshotsPayload, S>

  type ScreenshotsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScreenshotsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScreenshotsCountAggregateInputType | true
    }

  export interface ScreenshotsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Screenshots'], meta: { name: 'Screenshots' } }
    /**
     * Find zero or one Screenshots that matches the filter.
     * @param {ScreenshotsFindUniqueArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScreenshotsFindUniqueArgs>(args: SelectSubset<T, ScreenshotsFindUniqueArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Screenshots that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScreenshotsFindUniqueOrThrowArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScreenshotsFindUniqueOrThrowArgs>(args: SelectSubset<T, ScreenshotsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Screenshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsFindFirstArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScreenshotsFindFirstArgs>(args?: SelectSubset<T, ScreenshotsFindFirstArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Screenshots that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsFindFirstOrThrowArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScreenshotsFindFirstOrThrowArgs>(args?: SelectSubset<T, ScreenshotsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Screenshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Screenshots
     * const screenshots = await prisma.screenshots.findMany()
     * 
     * // Get first 10 Screenshots
     * const screenshots = await prisma.screenshots.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const screenshotsWithIdOnly = await prisma.screenshots.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScreenshotsFindManyArgs>(args?: SelectSubset<T, ScreenshotsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Screenshots.
     * @param {ScreenshotsCreateArgs} args - Arguments to create a Screenshots.
     * @example
     * // Create one Screenshots
     * const Screenshots = await prisma.screenshots.create({
     *   data: {
     *     // ... data to create a Screenshots
     *   }
     * })
     * 
     */
    create<T extends ScreenshotsCreateArgs>(args: SelectSubset<T, ScreenshotsCreateArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Screenshots.
     * @param {ScreenshotsCreateManyArgs} args - Arguments to create many Screenshots.
     * @example
     * // Create many Screenshots
     * const screenshots = await prisma.screenshots.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScreenshotsCreateManyArgs>(args?: SelectSubset<T, ScreenshotsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Screenshots and returns the data saved in the database.
     * @param {ScreenshotsCreateManyAndReturnArgs} args - Arguments to create many Screenshots.
     * @example
     * // Create many Screenshots
     * const screenshots = await prisma.screenshots.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Screenshots and only return the `id`
     * const screenshotsWithIdOnly = await prisma.screenshots.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScreenshotsCreateManyAndReturnArgs>(args?: SelectSubset<T, ScreenshotsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Screenshots.
     * @param {ScreenshotsDeleteArgs} args - Arguments to delete one Screenshots.
     * @example
     * // Delete one Screenshots
     * const Screenshots = await prisma.screenshots.delete({
     *   where: {
     *     // ... filter to delete one Screenshots
     *   }
     * })
     * 
     */
    delete<T extends ScreenshotsDeleteArgs>(args: SelectSubset<T, ScreenshotsDeleteArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Screenshots.
     * @param {ScreenshotsUpdateArgs} args - Arguments to update one Screenshots.
     * @example
     * // Update one Screenshots
     * const screenshots = await prisma.screenshots.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScreenshotsUpdateArgs>(args: SelectSubset<T, ScreenshotsUpdateArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Screenshots.
     * @param {ScreenshotsDeleteManyArgs} args - Arguments to filter Screenshots to delete.
     * @example
     * // Delete a few Screenshots
     * const { count } = await prisma.screenshots.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScreenshotsDeleteManyArgs>(args?: SelectSubset<T, ScreenshotsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Screenshots
     * const screenshots = await prisma.screenshots.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScreenshotsUpdateManyArgs>(args: SelectSubset<T, ScreenshotsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Screenshots and returns the data updated in the database.
     * @param {ScreenshotsUpdateManyAndReturnArgs} args - Arguments to update many Screenshots.
     * @example
     * // Update many Screenshots
     * const screenshots = await prisma.screenshots.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Screenshots and only return the `id`
     * const screenshotsWithIdOnly = await prisma.screenshots.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScreenshotsUpdateManyAndReturnArgs>(args: SelectSubset<T, ScreenshotsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Screenshots.
     * @param {ScreenshotsUpsertArgs} args - Arguments to update or create a Screenshots.
     * @example
     * // Update or create a Screenshots
     * const screenshots = await prisma.screenshots.upsert({
     *   create: {
     *     // ... data to create a Screenshots
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Screenshots we want to update
     *   }
     * })
     */
    upsert<T extends ScreenshotsUpsertArgs>(args: SelectSubset<T, ScreenshotsUpsertArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsCountArgs} args - Arguments to filter Screenshots to count.
     * @example
     * // Count the number of Screenshots
     * const count = await prisma.screenshots.count({
     *   where: {
     *     // ... the filter for the Screenshots we want to count
     *   }
     * })
    **/
    count<T extends ScreenshotsCountArgs>(
      args?: Subset<T, ScreenshotsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScreenshotsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScreenshotsAggregateArgs>(args: Subset<T, ScreenshotsAggregateArgs>): Prisma.PrismaPromise<GetScreenshotsAggregateType<T>>

    /**
     * Group by Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScreenshotsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScreenshotsGroupByArgs['orderBy'] }
        : { orderBy?: ScreenshotsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScreenshotsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScreenshotsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Screenshots model
   */
  readonly fields: ScreenshotsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Screenshots.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScreenshotsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    animeScreenshot<T extends Screenshots$animeScreenshotArgs<ExtArgs> = {}>(args?: Subset<T, Screenshots$animeScreenshotArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Screenshots model
   */
  interface ScreenshotsFieldRefs {
    readonly id: FieldRef<"Screenshots", 'String'>
    readonly shikimoriId: FieldRef<"Screenshots", 'String'>
    readonly originalUrl: FieldRef<"Screenshots", 'String'>
    readonly x332Url: FieldRef<"Screenshots", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Screenshots findUnique
   */
  export type ScreenshotsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots findUniqueOrThrow
   */
  export type ScreenshotsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots findFirst
   */
  export type ScreenshotsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Screenshots.
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Screenshots.
     */
    distinct?: ScreenshotsScalarFieldEnum | ScreenshotsScalarFieldEnum[]
  }

  /**
   * Screenshots findFirstOrThrow
   */
  export type ScreenshotsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Screenshots.
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Screenshots.
     */
    distinct?: ScreenshotsScalarFieldEnum | ScreenshotsScalarFieldEnum[]
  }

  /**
   * Screenshots findMany
   */
  export type ScreenshotsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Screenshots.
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    distinct?: ScreenshotsScalarFieldEnum | ScreenshotsScalarFieldEnum[]
  }

  /**
   * Screenshots create
   */
  export type ScreenshotsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * The data needed to create a Screenshots.
     */
    data: XOR<ScreenshotsCreateInput, ScreenshotsUncheckedCreateInput>
  }

  /**
   * Screenshots createMany
   */
  export type ScreenshotsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Screenshots.
     */
    data: ScreenshotsCreateManyInput | ScreenshotsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Screenshots createManyAndReturn
   */
  export type ScreenshotsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * The data used to create many Screenshots.
     */
    data: ScreenshotsCreateManyInput | ScreenshotsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Screenshots update
   */
  export type ScreenshotsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * The data needed to update a Screenshots.
     */
    data: XOR<ScreenshotsUpdateInput, ScreenshotsUncheckedUpdateInput>
    /**
     * Choose, which Screenshots to update.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots updateMany
   */
  export type ScreenshotsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Screenshots.
     */
    data: XOR<ScreenshotsUpdateManyMutationInput, ScreenshotsUncheckedUpdateManyInput>
    /**
     * Filter which Screenshots to update
     */
    where?: ScreenshotsWhereInput
    /**
     * Limit how many Screenshots to update.
     */
    limit?: number
  }

  /**
   * Screenshots updateManyAndReturn
   */
  export type ScreenshotsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * The data used to update Screenshots.
     */
    data: XOR<ScreenshotsUpdateManyMutationInput, ScreenshotsUncheckedUpdateManyInput>
    /**
     * Filter which Screenshots to update
     */
    where?: ScreenshotsWhereInput
    /**
     * Limit how many Screenshots to update.
     */
    limit?: number
  }

  /**
   * Screenshots upsert
   */
  export type ScreenshotsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * The filter to search for the Screenshots to update in case it exists.
     */
    where: ScreenshotsWhereUniqueInput
    /**
     * In case the Screenshots found by the `where` argument doesn't exist, create a new Screenshots with this data.
     */
    create: XOR<ScreenshotsCreateInput, ScreenshotsUncheckedCreateInput>
    /**
     * In case the Screenshots was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScreenshotsUpdateInput, ScreenshotsUncheckedUpdateInput>
  }

  /**
   * Screenshots delete
   */
  export type ScreenshotsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter which Screenshots to delete.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots deleteMany
   */
  export type ScreenshotsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Screenshots to delete
     */
    where?: ScreenshotsWhereInput
    /**
     * Limit how many Screenshots to delete.
     */
    limit?: number
  }

  /**
   * Screenshots.animeScreenshot
   */
  export type Screenshots$animeScreenshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    where?: AnimeScreenshotWhereInput
    orderBy?: AnimeScreenshotOrderByWithRelationInput | AnimeScreenshotOrderByWithRelationInput[]
    cursor?: AnimeScreenshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeScreenshotScalarFieldEnum | AnimeScreenshotScalarFieldEnum[]
  }

  /**
   * Screenshots without action
   */
  export type ScreenshotsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
  }


  /**
   * Model AnimeScreenshot
   */

  export type AggregateAnimeScreenshot = {
    _count: AnimeScreenshotCountAggregateOutputType | null
    _min: AnimeScreenshotMinAggregateOutputType | null
    _max: AnimeScreenshotMaxAggregateOutputType | null
  }

  export type AnimeScreenshotMinAggregateOutputType = {
    animeId: string | null
    screenshotId: string | null
  }

  export type AnimeScreenshotMaxAggregateOutputType = {
    animeId: string | null
    screenshotId: string | null
  }

  export type AnimeScreenshotCountAggregateOutputType = {
    animeId: number
    screenshotId: number
    _all: number
  }


  export type AnimeScreenshotMinAggregateInputType = {
    animeId?: true
    screenshotId?: true
  }

  export type AnimeScreenshotMaxAggregateInputType = {
    animeId?: true
    screenshotId?: true
  }

  export type AnimeScreenshotCountAggregateInputType = {
    animeId?: true
    screenshotId?: true
    _all?: true
  }

  export type AnimeScreenshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeScreenshot to aggregate.
     */
    where?: AnimeScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeScreenshots to fetch.
     */
    orderBy?: AnimeScreenshotOrderByWithRelationInput | AnimeScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeScreenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeScreenshots
    **/
    _count?: true | AnimeScreenshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeScreenshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeScreenshotMaxAggregateInputType
  }

  export type GetAnimeScreenshotAggregateType<T extends AnimeScreenshotAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeScreenshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeScreenshot[P]>
      : GetScalarType<T[P], AggregateAnimeScreenshot[P]>
  }




  export type AnimeScreenshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeScreenshotWhereInput
    orderBy?: AnimeScreenshotOrderByWithAggregationInput | AnimeScreenshotOrderByWithAggregationInput[]
    by: AnimeScreenshotScalarFieldEnum[] | AnimeScreenshotScalarFieldEnum
    having?: AnimeScreenshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeScreenshotCountAggregateInputType | true
    _min?: AnimeScreenshotMinAggregateInputType
    _max?: AnimeScreenshotMaxAggregateInputType
  }

  export type AnimeScreenshotGroupByOutputType = {
    animeId: string
    screenshotId: string
    _count: AnimeScreenshotCountAggregateOutputType | null
    _min: AnimeScreenshotMinAggregateOutputType | null
    _max: AnimeScreenshotMaxAggregateOutputType | null
  }

  type GetAnimeScreenshotGroupByPayload<T extends AnimeScreenshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeScreenshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeScreenshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeScreenshotGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeScreenshotGroupByOutputType[P]>
        }
      >
    >


  export type AnimeScreenshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    screenshotId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    screenshot?: boolean | ScreenshotsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeScreenshot"]>

  export type AnimeScreenshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    screenshotId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    screenshot?: boolean | ScreenshotsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeScreenshot"]>

  export type AnimeScreenshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    screenshotId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    screenshot?: boolean | ScreenshotsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeScreenshot"]>

  export type AnimeScreenshotSelectScalar = {
    animeId?: boolean
    screenshotId?: boolean
  }

  export type AnimeScreenshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"animeId" | "screenshotId", ExtArgs["result"]["animeScreenshot"]>
  export type AnimeScreenshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    screenshot?: boolean | ScreenshotsDefaultArgs<ExtArgs>
  }
  export type AnimeScreenshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    screenshot?: boolean | ScreenshotsDefaultArgs<ExtArgs>
  }
  export type AnimeScreenshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    screenshot?: boolean | ScreenshotsDefaultArgs<ExtArgs>
  }

  export type $AnimeScreenshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeScreenshot"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      screenshot: Prisma.$ScreenshotsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      animeId: string
      screenshotId: string
    }, ExtArgs["result"]["animeScreenshot"]>
    composites: {}
  }

  type AnimeScreenshotGetPayload<S extends boolean | null | undefined | AnimeScreenshotDefaultArgs> = $Result.GetResult<Prisma.$AnimeScreenshotPayload, S>

  type AnimeScreenshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeScreenshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeScreenshotCountAggregateInputType | true
    }

  export interface AnimeScreenshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeScreenshot'], meta: { name: 'AnimeScreenshot' } }
    /**
     * Find zero or one AnimeScreenshot that matches the filter.
     * @param {AnimeScreenshotFindUniqueArgs} args - Arguments to find a AnimeScreenshot
     * @example
     * // Get one AnimeScreenshot
     * const animeScreenshot = await prisma.animeScreenshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeScreenshotFindUniqueArgs>(args: SelectSubset<T, AnimeScreenshotFindUniqueArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeScreenshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeScreenshotFindUniqueOrThrowArgs} args - Arguments to find a AnimeScreenshot
     * @example
     * // Get one AnimeScreenshot
     * const animeScreenshot = await prisma.animeScreenshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeScreenshotFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeScreenshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeScreenshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeScreenshotFindFirstArgs} args - Arguments to find a AnimeScreenshot
     * @example
     * // Get one AnimeScreenshot
     * const animeScreenshot = await prisma.animeScreenshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeScreenshotFindFirstArgs>(args?: SelectSubset<T, AnimeScreenshotFindFirstArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeScreenshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeScreenshotFindFirstOrThrowArgs} args - Arguments to find a AnimeScreenshot
     * @example
     * // Get one AnimeScreenshot
     * const animeScreenshot = await prisma.animeScreenshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeScreenshotFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeScreenshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeScreenshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeScreenshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeScreenshots
     * const animeScreenshots = await prisma.animeScreenshot.findMany()
     * 
     * // Get first 10 AnimeScreenshots
     * const animeScreenshots = await prisma.animeScreenshot.findMany({ take: 10 })
     * 
     * // Only select the `animeId`
     * const animeScreenshotWithAnimeIdOnly = await prisma.animeScreenshot.findMany({ select: { animeId: true } })
     * 
     */
    findMany<T extends AnimeScreenshotFindManyArgs>(args?: SelectSubset<T, AnimeScreenshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeScreenshot.
     * @param {AnimeScreenshotCreateArgs} args - Arguments to create a AnimeScreenshot.
     * @example
     * // Create one AnimeScreenshot
     * const AnimeScreenshot = await prisma.animeScreenshot.create({
     *   data: {
     *     // ... data to create a AnimeScreenshot
     *   }
     * })
     * 
     */
    create<T extends AnimeScreenshotCreateArgs>(args: SelectSubset<T, AnimeScreenshotCreateArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeScreenshots.
     * @param {AnimeScreenshotCreateManyArgs} args - Arguments to create many AnimeScreenshots.
     * @example
     * // Create many AnimeScreenshots
     * const animeScreenshot = await prisma.animeScreenshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeScreenshotCreateManyArgs>(args?: SelectSubset<T, AnimeScreenshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeScreenshots and returns the data saved in the database.
     * @param {AnimeScreenshotCreateManyAndReturnArgs} args - Arguments to create many AnimeScreenshots.
     * @example
     * // Create many AnimeScreenshots
     * const animeScreenshot = await prisma.animeScreenshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeScreenshots and only return the `animeId`
     * const animeScreenshotWithAnimeIdOnly = await prisma.animeScreenshot.createManyAndReturn({
     *   select: { animeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeScreenshotCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeScreenshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeScreenshot.
     * @param {AnimeScreenshotDeleteArgs} args - Arguments to delete one AnimeScreenshot.
     * @example
     * // Delete one AnimeScreenshot
     * const AnimeScreenshot = await prisma.animeScreenshot.delete({
     *   where: {
     *     // ... filter to delete one AnimeScreenshot
     *   }
     * })
     * 
     */
    delete<T extends AnimeScreenshotDeleteArgs>(args: SelectSubset<T, AnimeScreenshotDeleteArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeScreenshot.
     * @param {AnimeScreenshotUpdateArgs} args - Arguments to update one AnimeScreenshot.
     * @example
     * // Update one AnimeScreenshot
     * const animeScreenshot = await prisma.animeScreenshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeScreenshotUpdateArgs>(args: SelectSubset<T, AnimeScreenshotUpdateArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeScreenshots.
     * @param {AnimeScreenshotDeleteManyArgs} args - Arguments to filter AnimeScreenshots to delete.
     * @example
     * // Delete a few AnimeScreenshots
     * const { count } = await prisma.animeScreenshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeScreenshotDeleteManyArgs>(args?: SelectSubset<T, AnimeScreenshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeScreenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeScreenshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeScreenshots
     * const animeScreenshot = await prisma.animeScreenshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeScreenshotUpdateManyArgs>(args: SelectSubset<T, AnimeScreenshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeScreenshots and returns the data updated in the database.
     * @param {AnimeScreenshotUpdateManyAndReturnArgs} args - Arguments to update many AnimeScreenshots.
     * @example
     * // Update many AnimeScreenshots
     * const animeScreenshot = await prisma.animeScreenshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeScreenshots and only return the `animeId`
     * const animeScreenshotWithAnimeIdOnly = await prisma.animeScreenshot.updateManyAndReturn({
     *   select: { animeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeScreenshotUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeScreenshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeScreenshot.
     * @param {AnimeScreenshotUpsertArgs} args - Arguments to update or create a AnimeScreenshot.
     * @example
     * // Update or create a AnimeScreenshot
     * const animeScreenshot = await prisma.animeScreenshot.upsert({
     *   create: {
     *     // ... data to create a AnimeScreenshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeScreenshot we want to update
     *   }
     * })
     */
    upsert<T extends AnimeScreenshotUpsertArgs>(args: SelectSubset<T, AnimeScreenshotUpsertArgs<ExtArgs>>): Prisma__AnimeScreenshotClient<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeScreenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeScreenshotCountArgs} args - Arguments to filter AnimeScreenshots to count.
     * @example
     * // Count the number of AnimeScreenshots
     * const count = await prisma.animeScreenshot.count({
     *   where: {
     *     // ... the filter for the AnimeScreenshots we want to count
     *   }
     * })
    **/
    count<T extends AnimeScreenshotCountArgs>(
      args?: Subset<T, AnimeScreenshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeScreenshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeScreenshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeScreenshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeScreenshotAggregateArgs>(args: Subset<T, AnimeScreenshotAggregateArgs>): Prisma.PrismaPromise<GetAnimeScreenshotAggregateType<T>>

    /**
     * Group by AnimeScreenshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeScreenshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeScreenshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeScreenshotGroupByArgs['orderBy'] }
        : { orderBy?: AnimeScreenshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeScreenshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeScreenshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeScreenshot model
   */
  readonly fields: AnimeScreenshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeScreenshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeScreenshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    screenshot<T extends ScreenshotsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScreenshotsDefaultArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeScreenshot model
   */
  interface AnimeScreenshotFieldRefs {
    readonly animeId: FieldRef<"AnimeScreenshot", 'String'>
    readonly screenshotId: FieldRef<"AnimeScreenshot", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AnimeScreenshot findUnique
   */
  export type AnimeScreenshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which AnimeScreenshot to fetch.
     */
    where: AnimeScreenshotWhereUniqueInput
  }

  /**
   * AnimeScreenshot findUniqueOrThrow
   */
  export type AnimeScreenshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which AnimeScreenshot to fetch.
     */
    where: AnimeScreenshotWhereUniqueInput
  }

  /**
   * AnimeScreenshot findFirst
   */
  export type AnimeScreenshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which AnimeScreenshot to fetch.
     */
    where?: AnimeScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeScreenshots to fetch.
     */
    orderBy?: AnimeScreenshotOrderByWithRelationInput | AnimeScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeScreenshots.
     */
    cursor?: AnimeScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeScreenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeScreenshots.
     */
    distinct?: AnimeScreenshotScalarFieldEnum | AnimeScreenshotScalarFieldEnum[]
  }

  /**
   * AnimeScreenshot findFirstOrThrow
   */
  export type AnimeScreenshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which AnimeScreenshot to fetch.
     */
    where?: AnimeScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeScreenshots to fetch.
     */
    orderBy?: AnimeScreenshotOrderByWithRelationInput | AnimeScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeScreenshots.
     */
    cursor?: AnimeScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeScreenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeScreenshots.
     */
    distinct?: AnimeScreenshotScalarFieldEnum | AnimeScreenshotScalarFieldEnum[]
  }

  /**
   * AnimeScreenshot findMany
   */
  export type AnimeScreenshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which AnimeScreenshots to fetch.
     */
    where?: AnimeScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeScreenshots to fetch.
     */
    orderBy?: AnimeScreenshotOrderByWithRelationInput | AnimeScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeScreenshots.
     */
    cursor?: AnimeScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeScreenshots.
     */
    skip?: number
    distinct?: AnimeScreenshotScalarFieldEnum | AnimeScreenshotScalarFieldEnum[]
  }

  /**
   * AnimeScreenshot create
   */
  export type AnimeScreenshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeScreenshot.
     */
    data: XOR<AnimeScreenshotCreateInput, AnimeScreenshotUncheckedCreateInput>
  }

  /**
   * AnimeScreenshot createMany
   */
  export type AnimeScreenshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeScreenshots.
     */
    data: AnimeScreenshotCreateManyInput | AnimeScreenshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeScreenshot createManyAndReturn
   */
  export type AnimeScreenshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeScreenshots.
     */
    data: AnimeScreenshotCreateManyInput | AnimeScreenshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeScreenshot update
   */
  export type AnimeScreenshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeScreenshot.
     */
    data: XOR<AnimeScreenshotUpdateInput, AnimeScreenshotUncheckedUpdateInput>
    /**
     * Choose, which AnimeScreenshot to update.
     */
    where: AnimeScreenshotWhereUniqueInput
  }

  /**
   * AnimeScreenshot updateMany
   */
  export type AnimeScreenshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeScreenshots.
     */
    data: XOR<AnimeScreenshotUpdateManyMutationInput, AnimeScreenshotUncheckedUpdateManyInput>
    /**
     * Filter which AnimeScreenshots to update
     */
    where?: AnimeScreenshotWhereInput
    /**
     * Limit how many AnimeScreenshots to update.
     */
    limit?: number
  }

  /**
   * AnimeScreenshot updateManyAndReturn
   */
  export type AnimeScreenshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * The data used to update AnimeScreenshots.
     */
    data: XOR<AnimeScreenshotUpdateManyMutationInput, AnimeScreenshotUncheckedUpdateManyInput>
    /**
     * Filter which AnimeScreenshots to update
     */
    where?: AnimeScreenshotWhereInput
    /**
     * Limit how many AnimeScreenshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeScreenshot upsert
   */
  export type AnimeScreenshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeScreenshot to update in case it exists.
     */
    where: AnimeScreenshotWhereUniqueInput
    /**
     * In case the AnimeScreenshot found by the `where` argument doesn't exist, create a new AnimeScreenshot with this data.
     */
    create: XOR<AnimeScreenshotCreateInput, AnimeScreenshotUncheckedCreateInput>
    /**
     * In case the AnimeScreenshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeScreenshotUpdateInput, AnimeScreenshotUncheckedUpdateInput>
  }

  /**
   * AnimeScreenshot delete
   */
  export type AnimeScreenshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    /**
     * Filter which AnimeScreenshot to delete.
     */
    where: AnimeScreenshotWhereUniqueInput
  }

  /**
   * AnimeScreenshot deleteMany
   */
  export type AnimeScreenshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeScreenshots to delete
     */
    where?: AnimeScreenshotWhereInput
    /**
     * Limit how many AnimeScreenshots to delete.
     */
    limit?: number
  }

  /**
   * AnimeScreenshot without action
   */
  export type AnimeScreenshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
  }


  /**
   * Model Studio
   */

  export type AggregateStudio = {
    _count: StudioCountAggregateOutputType | null
    _min: StudioMinAggregateOutputType | null
    _max: StudioMaxAggregateOutputType | null
  }

  export type StudioMinAggregateOutputType = {
    id: string | null
    name: string | null
    imageUrl: string | null
  }

  export type StudioMaxAggregateOutputType = {
    id: string | null
    name: string | null
    imageUrl: string | null
  }

  export type StudioCountAggregateOutputType = {
    id: number
    name: number
    imageUrl: number
    _all: number
  }


  export type StudioMinAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
  }

  export type StudioMaxAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
  }

  export type StudioCountAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    _all?: true
  }

  export type StudioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Studio to aggregate.
     */
    where?: StudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studios to fetch.
     */
    orderBy?: StudioOrderByWithRelationInput | StudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Studios
    **/
    _count?: true | StudioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudioMaxAggregateInputType
  }

  export type GetStudioAggregateType<T extends StudioAggregateArgs> = {
        [P in keyof T & keyof AggregateStudio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudio[P]>
      : GetScalarType<T[P], AggregateStudio[P]>
  }




  export type StudioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudioWhereInput
    orderBy?: StudioOrderByWithAggregationInput | StudioOrderByWithAggregationInput[]
    by: StudioScalarFieldEnum[] | StudioScalarFieldEnum
    having?: StudioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudioCountAggregateInputType | true
    _min?: StudioMinAggregateInputType
    _max?: StudioMaxAggregateInputType
  }

  export type StudioGroupByOutputType = {
    id: string
    name: string
    imageUrl: string | null
    _count: StudioCountAggregateOutputType | null
    _min: StudioMinAggregateOutputType | null
    _max: StudioMaxAggregateOutputType | null
  }

  type GetStudioGroupByPayload<T extends StudioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudioGroupByOutputType[P]>
            : GetScalarType<T[P], StudioGroupByOutputType[P]>
        }
      >
    >


  export type StudioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    AnimeStudio?: boolean | Studio$AnimeStudioArgs<ExtArgs>
    _count?: boolean | StudioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studio"]>

  export type StudioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["studio"]>

  export type StudioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["studio"]>

  export type StudioSelectScalar = {
    id?: boolean
    name?: boolean
    imageUrl?: boolean
  }

  export type StudioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "imageUrl", ExtArgs["result"]["studio"]>
  export type StudioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AnimeStudio?: boolean | Studio$AnimeStudioArgs<ExtArgs>
    _count?: boolean | StudioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StudioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Studio"
    objects: {
      AnimeStudio: Prisma.$AnimeStudioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      imageUrl: string | null
    }, ExtArgs["result"]["studio"]>
    composites: {}
  }

  type StudioGetPayload<S extends boolean | null | undefined | StudioDefaultArgs> = $Result.GetResult<Prisma.$StudioPayload, S>

  type StudioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudioCountAggregateInputType | true
    }

  export interface StudioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Studio'], meta: { name: 'Studio' } }
    /**
     * Find zero or one Studio that matches the filter.
     * @param {StudioFindUniqueArgs} args - Arguments to find a Studio
     * @example
     * // Get one Studio
     * const studio = await prisma.studio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudioFindUniqueArgs>(args: SelectSubset<T, StudioFindUniqueArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Studio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudioFindUniqueOrThrowArgs} args - Arguments to find a Studio
     * @example
     * // Get one Studio
     * const studio = await prisma.studio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudioFindUniqueOrThrowArgs>(args: SelectSubset<T, StudioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioFindFirstArgs} args - Arguments to find a Studio
     * @example
     * // Get one Studio
     * const studio = await prisma.studio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudioFindFirstArgs>(args?: SelectSubset<T, StudioFindFirstArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Studio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioFindFirstOrThrowArgs} args - Arguments to find a Studio
     * @example
     * // Get one Studio
     * const studio = await prisma.studio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudioFindFirstOrThrowArgs>(args?: SelectSubset<T, StudioFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Studios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Studios
     * const studios = await prisma.studio.findMany()
     * 
     * // Get first 10 Studios
     * const studios = await prisma.studio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studioWithIdOnly = await prisma.studio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudioFindManyArgs>(args?: SelectSubset<T, StudioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Studio.
     * @param {StudioCreateArgs} args - Arguments to create a Studio.
     * @example
     * // Create one Studio
     * const Studio = await prisma.studio.create({
     *   data: {
     *     // ... data to create a Studio
     *   }
     * })
     * 
     */
    create<T extends StudioCreateArgs>(args: SelectSubset<T, StudioCreateArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Studios.
     * @param {StudioCreateManyArgs} args - Arguments to create many Studios.
     * @example
     * // Create many Studios
     * const studio = await prisma.studio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudioCreateManyArgs>(args?: SelectSubset<T, StudioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Studios and returns the data saved in the database.
     * @param {StudioCreateManyAndReturnArgs} args - Arguments to create many Studios.
     * @example
     * // Create many Studios
     * const studio = await prisma.studio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Studios and only return the `id`
     * const studioWithIdOnly = await prisma.studio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudioCreateManyAndReturnArgs>(args?: SelectSubset<T, StudioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Studio.
     * @param {StudioDeleteArgs} args - Arguments to delete one Studio.
     * @example
     * // Delete one Studio
     * const Studio = await prisma.studio.delete({
     *   where: {
     *     // ... filter to delete one Studio
     *   }
     * })
     * 
     */
    delete<T extends StudioDeleteArgs>(args: SelectSubset<T, StudioDeleteArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Studio.
     * @param {StudioUpdateArgs} args - Arguments to update one Studio.
     * @example
     * // Update one Studio
     * const studio = await prisma.studio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudioUpdateArgs>(args: SelectSubset<T, StudioUpdateArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Studios.
     * @param {StudioDeleteManyArgs} args - Arguments to filter Studios to delete.
     * @example
     * // Delete a few Studios
     * const { count } = await prisma.studio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudioDeleteManyArgs>(args?: SelectSubset<T, StudioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Studios
     * const studio = await prisma.studio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudioUpdateManyArgs>(args: SelectSubset<T, StudioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studios and returns the data updated in the database.
     * @param {StudioUpdateManyAndReturnArgs} args - Arguments to update many Studios.
     * @example
     * // Update many Studios
     * const studio = await prisma.studio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Studios and only return the `id`
     * const studioWithIdOnly = await prisma.studio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudioUpdateManyAndReturnArgs>(args: SelectSubset<T, StudioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Studio.
     * @param {StudioUpsertArgs} args - Arguments to update or create a Studio.
     * @example
     * // Update or create a Studio
     * const studio = await prisma.studio.upsert({
     *   create: {
     *     // ... data to create a Studio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Studio we want to update
     *   }
     * })
     */
    upsert<T extends StudioUpsertArgs>(args: SelectSubset<T, StudioUpsertArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Studios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioCountArgs} args - Arguments to filter Studios to count.
     * @example
     * // Count the number of Studios
     * const count = await prisma.studio.count({
     *   where: {
     *     // ... the filter for the Studios we want to count
     *   }
     * })
    **/
    count<T extends StudioCountArgs>(
      args?: Subset<T, StudioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Studio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudioAggregateArgs>(args: Subset<T, StudioAggregateArgs>): Prisma.PrismaPromise<GetStudioAggregateType<T>>

    /**
     * Group by Studio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudioGroupByArgs['orderBy'] }
        : { orderBy?: StudioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Studio model
   */
  readonly fields: StudioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Studio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    AnimeStudio<T extends Studio$AnimeStudioArgs<ExtArgs> = {}>(args?: Subset<T, Studio$AnimeStudioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Studio model
   */
  interface StudioFieldRefs {
    readonly id: FieldRef<"Studio", 'String'>
    readonly name: FieldRef<"Studio", 'String'>
    readonly imageUrl: FieldRef<"Studio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Studio findUnique
   */
  export type StudioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * Filter, which Studio to fetch.
     */
    where: StudioWhereUniqueInput
  }

  /**
   * Studio findUniqueOrThrow
   */
  export type StudioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * Filter, which Studio to fetch.
     */
    where: StudioWhereUniqueInput
  }

  /**
   * Studio findFirst
   */
  export type StudioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * Filter, which Studio to fetch.
     */
    where?: StudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studios to fetch.
     */
    orderBy?: StudioOrderByWithRelationInput | StudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studios.
     */
    cursor?: StudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studios.
     */
    distinct?: StudioScalarFieldEnum | StudioScalarFieldEnum[]
  }

  /**
   * Studio findFirstOrThrow
   */
  export type StudioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * Filter, which Studio to fetch.
     */
    where?: StudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studios to fetch.
     */
    orderBy?: StudioOrderByWithRelationInput | StudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studios.
     */
    cursor?: StudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studios.
     */
    distinct?: StudioScalarFieldEnum | StudioScalarFieldEnum[]
  }

  /**
   * Studio findMany
   */
  export type StudioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * Filter, which Studios to fetch.
     */
    where?: StudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studios to fetch.
     */
    orderBy?: StudioOrderByWithRelationInput | StudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Studios.
     */
    cursor?: StudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studios.
     */
    skip?: number
    distinct?: StudioScalarFieldEnum | StudioScalarFieldEnum[]
  }

  /**
   * Studio create
   */
  export type StudioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * The data needed to create a Studio.
     */
    data: XOR<StudioCreateInput, StudioUncheckedCreateInput>
  }

  /**
   * Studio createMany
   */
  export type StudioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Studios.
     */
    data: StudioCreateManyInput | StudioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Studio createManyAndReturn
   */
  export type StudioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * The data used to create many Studios.
     */
    data: StudioCreateManyInput | StudioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Studio update
   */
  export type StudioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * The data needed to update a Studio.
     */
    data: XOR<StudioUpdateInput, StudioUncheckedUpdateInput>
    /**
     * Choose, which Studio to update.
     */
    where: StudioWhereUniqueInput
  }

  /**
   * Studio updateMany
   */
  export type StudioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Studios.
     */
    data: XOR<StudioUpdateManyMutationInput, StudioUncheckedUpdateManyInput>
    /**
     * Filter which Studios to update
     */
    where?: StudioWhereInput
    /**
     * Limit how many Studios to update.
     */
    limit?: number
  }

  /**
   * Studio updateManyAndReturn
   */
  export type StudioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * The data used to update Studios.
     */
    data: XOR<StudioUpdateManyMutationInput, StudioUncheckedUpdateManyInput>
    /**
     * Filter which Studios to update
     */
    where?: StudioWhereInput
    /**
     * Limit how many Studios to update.
     */
    limit?: number
  }

  /**
   * Studio upsert
   */
  export type StudioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * The filter to search for the Studio to update in case it exists.
     */
    where: StudioWhereUniqueInput
    /**
     * In case the Studio found by the `where` argument doesn't exist, create a new Studio with this data.
     */
    create: XOR<StudioCreateInput, StudioUncheckedCreateInput>
    /**
     * In case the Studio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudioUpdateInput, StudioUncheckedUpdateInput>
  }

  /**
   * Studio delete
   */
  export type StudioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
    /**
     * Filter which Studio to delete.
     */
    where: StudioWhereUniqueInput
  }

  /**
   * Studio deleteMany
   */
  export type StudioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Studios to delete
     */
    where?: StudioWhereInput
    /**
     * Limit how many Studios to delete.
     */
    limit?: number
  }

  /**
   * Studio.AnimeStudio
   */
  export type Studio$AnimeStudioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    where?: AnimeStudioWhereInput
    orderBy?: AnimeStudioOrderByWithRelationInput | AnimeStudioOrderByWithRelationInput[]
    cursor?: AnimeStudioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeStudioScalarFieldEnum | AnimeStudioScalarFieldEnum[]
  }

  /**
   * Studio without action
   */
  export type StudioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Studio
     */
    select?: StudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Studio
     */
    omit?: StudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudioInclude<ExtArgs> | null
  }


  /**
   * Model AnimeStudio
   */

  export type AggregateAnimeStudio = {
    _count: AnimeStudioCountAggregateOutputType | null
    _min: AnimeStudioMinAggregateOutputType | null
    _max: AnimeStudioMaxAggregateOutputType | null
  }

  export type AnimeStudioMinAggregateOutputType = {
    animeId: string | null
    studioId: string | null
  }

  export type AnimeStudioMaxAggregateOutputType = {
    animeId: string | null
    studioId: string | null
  }

  export type AnimeStudioCountAggregateOutputType = {
    animeId: number
    studioId: number
    _all: number
  }


  export type AnimeStudioMinAggregateInputType = {
    animeId?: true
    studioId?: true
  }

  export type AnimeStudioMaxAggregateInputType = {
    animeId?: true
    studioId?: true
  }

  export type AnimeStudioCountAggregateInputType = {
    animeId?: true
    studioId?: true
    _all?: true
  }

  export type AnimeStudioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeStudio to aggregate.
     */
    where?: AnimeStudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeStudios to fetch.
     */
    orderBy?: AnimeStudioOrderByWithRelationInput | AnimeStudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeStudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeStudios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeStudios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeStudios
    **/
    _count?: true | AnimeStudioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeStudioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeStudioMaxAggregateInputType
  }

  export type GetAnimeStudioAggregateType<T extends AnimeStudioAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeStudio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeStudio[P]>
      : GetScalarType<T[P], AggregateAnimeStudio[P]>
  }




  export type AnimeStudioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeStudioWhereInput
    orderBy?: AnimeStudioOrderByWithAggregationInput | AnimeStudioOrderByWithAggregationInput[]
    by: AnimeStudioScalarFieldEnum[] | AnimeStudioScalarFieldEnum
    having?: AnimeStudioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeStudioCountAggregateInputType | true
    _min?: AnimeStudioMinAggregateInputType
    _max?: AnimeStudioMaxAggregateInputType
  }

  export type AnimeStudioGroupByOutputType = {
    animeId: string
    studioId: string
    _count: AnimeStudioCountAggregateOutputType | null
    _min: AnimeStudioMinAggregateOutputType | null
    _max: AnimeStudioMaxAggregateOutputType | null
  }

  type GetAnimeStudioGroupByPayload<T extends AnimeStudioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeStudioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeStudioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeStudioGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeStudioGroupByOutputType[P]>
        }
      >
    >


  export type AnimeStudioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    studioId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    studio?: boolean | StudioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeStudio"]>

  export type AnimeStudioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    studioId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    studio?: boolean | StudioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeStudio"]>

  export type AnimeStudioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    studioId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    studio?: boolean | StudioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeStudio"]>

  export type AnimeStudioSelectScalar = {
    animeId?: boolean
    studioId?: boolean
  }

  export type AnimeStudioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"animeId" | "studioId", ExtArgs["result"]["animeStudio"]>
  export type AnimeStudioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    studio?: boolean | StudioDefaultArgs<ExtArgs>
  }
  export type AnimeStudioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    studio?: boolean | StudioDefaultArgs<ExtArgs>
  }
  export type AnimeStudioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    studio?: boolean | StudioDefaultArgs<ExtArgs>
  }

  export type $AnimeStudioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeStudio"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      studio: Prisma.$StudioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      animeId: string
      studioId: string
    }, ExtArgs["result"]["animeStudio"]>
    composites: {}
  }

  type AnimeStudioGetPayload<S extends boolean | null | undefined | AnimeStudioDefaultArgs> = $Result.GetResult<Prisma.$AnimeStudioPayload, S>

  type AnimeStudioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeStudioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeStudioCountAggregateInputType | true
    }

  export interface AnimeStudioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeStudio'], meta: { name: 'AnimeStudio' } }
    /**
     * Find zero or one AnimeStudio that matches the filter.
     * @param {AnimeStudioFindUniqueArgs} args - Arguments to find a AnimeStudio
     * @example
     * // Get one AnimeStudio
     * const animeStudio = await prisma.animeStudio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeStudioFindUniqueArgs>(args: SelectSubset<T, AnimeStudioFindUniqueArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeStudio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeStudioFindUniqueOrThrowArgs} args - Arguments to find a AnimeStudio
     * @example
     * // Get one AnimeStudio
     * const animeStudio = await prisma.animeStudio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeStudioFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeStudioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeStudio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeStudioFindFirstArgs} args - Arguments to find a AnimeStudio
     * @example
     * // Get one AnimeStudio
     * const animeStudio = await prisma.animeStudio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeStudioFindFirstArgs>(args?: SelectSubset<T, AnimeStudioFindFirstArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeStudio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeStudioFindFirstOrThrowArgs} args - Arguments to find a AnimeStudio
     * @example
     * // Get one AnimeStudio
     * const animeStudio = await prisma.animeStudio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeStudioFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeStudioFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeStudios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeStudioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeStudios
     * const animeStudios = await prisma.animeStudio.findMany()
     * 
     * // Get first 10 AnimeStudios
     * const animeStudios = await prisma.animeStudio.findMany({ take: 10 })
     * 
     * // Only select the `animeId`
     * const animeStudioWithAnimeIdOnly = await prisma.animeStudio.findMany({ select: { animeId: true } })
     * 
     */
    findMany<T extends AnimeStudioFindManyArgs>(args?: SelectSubset<T, AnimeStudioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeStudio.
     * @param {AnimeStudioCreateArgs} args - Arguments to create a AnimeStudio.
     * @example
     * // Create one AnimeStudio
     * const AnimeStudio = await prisma.animeStudio.create({
     *   data: {
     *     // ... data to create a AnimeStudio
     *   }
     * })
     * 
     */
    create<T extends AnimeStudioCreateArgs>(args: SelectSubset<T, AnimeStudioCreateArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeStudios.
     * @param {AnimeStudioCreateManyArgs} args - Arguments to create many AnimeStudios.
     * @example
     * // Create many AnimeStudios
     * const animeStudio = await prisma.animeStudio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeStudioCreateManyArgs>(args?: SelectSubset<T, AnimeStudioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeStudios and returns the data saved in the database.
     * @param {AnimeStudioCreateManyAndReturnArgs} args - Arguments to create many AnimeStudios.
     * @example
     * // Create many AnimeStudios
     * const animeStudio = await prisma.animeStudio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeStudios and only return the `animeId`
     * const animeStudioWithAnimeIdOnly = await prisma.animeStudio.createManyAndReturn({
     *   select: { animeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeStudioCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeStudioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeStudio.
     * @param {AnimeStudioDeleteArgs} args - Arguments to delete one AnimeStudio.
     * @example
     * // Delete one AnimeStudio
     * const AnimeStudio = await prisma.animeStudio.delete({
     *   where: {
     *     // ... filter to delete one AnimeStudio
     *   }
     * })
     * 
     */
    delete<T extends AnimeStudioDeleteArgs>(args: SelectSubset<T, AnimeStudioDeleteArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeStudio.
     * @param {AnimeStudioUpdateArgs} args - Arguments to update one AnimeStudio.
     * @example
     * // Update one AnimeStudio
     * const animeStudio = await prisma.animeStudio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeStudioUpdateArgs>(args: SelectSubset<T, AnimeStudioUpdateArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeStudios.
     * @param {AnimeStudioDeleteManyArgs} args - Arguments to filter AnimeStudios to delete.
     * @example
     * // Delete a few AnimeStudios
     * const { count } = await prisma.animeStudio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeStudioDeleteManyArgs>(args?: SelectSubset<T, AnimeStudioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeStudios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeStudioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeStudios
     * const animeStudio = await prisma.animeStudio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeStudioUpdateManyArgs>(args: SelectSubset<T, AnimeStudioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeStudios and returns the data updated in the database.
     * @param {AnimeStudioUpdateManyAndReturnArgs} args - Arguments to update many AnimeStudios.
     * @example
     * // Update many AnimeStudios
     * const animeStudio = await prisma.animeStudio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeStudios and only return the `animeId`
     * const animeStudioWithAnimeIdOnly = await prisma.animeStudio.updateManyAndReturn({
     *   select: { animeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeStudioUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeStudioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeStudio.
     * @param {AnimeStudioUpsertArgs} args - Arguments to update or create a AnimeStudio.
     * @example
     * // Update or create a AnimeStudio
     * const animeStudio = await prisma.animeStudio.upsert({
     *   create: {
     *     // ... data to create a AnimeStudio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeStudio we want to update
     *   }
     * })
     */
    upsert<T extends AnimeStudioUpsertArgs>(args: SelectSubset<T, AnimeStudioUpsertArgs<ExtArgs>>): Prisma__AnimeStudioClient<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeStudios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeStudioCountArgs} args - Arguments to filter AnimeStudios to count.
     * @example
     * // Count the number of AnimeStudios
     * const count = await prisma.animeStudio.count({
     *   where: {
     *     // ... the filter for the AnimeStudios we want to count
     *   }
     * })
    **/
    count<T extends AnimeStudioCountArgs>(
      args?: Subset<T, AnimeStudioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeStudioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeStudio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeStudioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeStudioAggregateArgs>(args: Subset<T, AnimeStudioAggregateArgs>): Prisma.PrismaPromise<GetAnimeStudioAggregateType<T>>

    /**
     * Group by AnimeStudio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeStudioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeStudioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeStudioGroupByArgs['orderBy'] }
        : { orderBy?: AnimeStudioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeStudioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeStudioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeStudio model
   */
  readonly fields: AnimeStudioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeStudio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeStudioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studio<T extends StudioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudioDefaultArgs<ExtArgs>>): Prisma__StudioClient<$Result.GetResult<Prisma.$StudioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeStudio model
   */
  interface AnimeStudioFieldRefs {
    readonly animeId: FieldRef<"AnimeStudio", 'String'>
    readonly studioId: FieldRef<"AnimeStudio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AnimeStudio findUnique
   */
  export type AnimeStudioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * Filter, which AnimeStudio to fetch.
     */
    where: AnimeStudioWhereUniqueInput
  }

  /**
   * AnimeStudio findUniqueOrThrow
   */
  export type AnimeStudioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * Filter, which AnimeStudio to fetch.
     */
    where: AnimeStudioWhereUniqueInput
  }

  /**
   * AnimeStudio findFirst
   */
  export type AnimeStudioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * Filter, which AnimeStudio to fetch.
     */
    where?: AnimeStudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeStudios to fetch.
     */
    orderBy?: AnimeStudioOrderByWithRelationInput | AnimeStudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeStudios.
     */
    cursor?: AnimeStudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeStudios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeStudios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeStudios.
     */
    distinct?: AnimeStudioScalarFieldEnum | AnimeStudioScalarFieldEnum[]
  }

  /**
   * AnimeStudio findFirstOrThrow
   */
  export type AnimeStudioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * Filter, which AnimeStudio to fetch.
     */
    where?: AnimeStudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeStudios to fetch.
     */
    orderBy?: AnimeStudioOrderByWithRelationInput | AnimeStudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeStudios.
     */
    cursor?: AnimeStudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeStudios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeStudios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeStudios.
     */
    distinct?: AnimeStudioScalarFieldEnum | AnimeStudioScalarFieldEnum[]
  }

  /**
   * AnimeStudio findMany
   */
  export type AnimeStudioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * Filter, which AnimeStudios to fetch.
     */
    where?: AnimeStudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeStudios to fetch.
     */
    orderBy?: AnimeStudioOrderByWithRelationInput | AnimeStudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeStudios.
     */
    cursor?: AnimeStudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeStudios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeStudios.
     */
    skip?: number
    distinct?: AnimeStudioScalarFieldEnum | AnimeStudioScalarFieldEnum[]
  }

  /**
   * AnimeStudio create
   */
  export type AnimeStudioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeStudio.
     */
    data: XOR<AnimeStudioCreateInput, AnimeStudioUncheckedCreateInput>
  }

  /**
   * AnimeStudio createMany
   */
  export type AnimeStudioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeStudios.
     */
    data: AnimeStudioCreateManyInput | AnimeStudioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeStudio createManyAndReturn
   */
  export type AnimeStudioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeStudios.
     */
    data: AnimeStudioCreateManyInput | AnimeStudioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeStudio update
   */
  export type AnimeStudioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeStudio.
     */
    data: XOR<AnimeStudioUpdateInput, AnimeStudioUncheckedUpdateInput>
    /**
     * Choose, which AnimeStudio to update.
     */
    where: AnimeStudioWhereUniqueInput
  }

  /**
   * AnimeStudio updateMany
   */
  export type AnimeStudioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeStudios.
     */
    data: XOR<AnimeStudioUpdateManyMutationInput, AnimeStudioUncheckedUpdateManyInput>
    /**
     * Filter which AnimeStudios to update
     */
    where?: AnimeStudioWhereInput
    /**
     * Limit how many AnimeStudios to update.
     */
    limit?: number
  }

  /**
   * AnimeStudio updateManyAndReturn
   */
  export type AnimeStudioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * The data used to update AnimeStudios.
     */
    data: XOR<AnimeStudioUpdateManyMutationInput, AnimeStudioUncheckedUpdateManyInput>
    /**
     * Filter which AnimeStudios to update
     */
    where?: AnimeStudioWhereInput
    /**
     * Limit how many AnimeStudios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeStudio upsert
   */
  export type AnimeStudioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeStudio to update in case it exists.
     */
    where: AnimeStudioWhereUniqueInput
    /**
     * In case the AnimeStudio found by the `where` argument doesn't exist, create a new AnimeStudio with this data.
     */
    create: XOR<AnimeStudioCreateInput, AnimeStudioUncheckedCreateInput>
    /**
     * In case the AnimeStudio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeStudioUpdateInput, AnimeStudioUncheckedUpdateInput>
  }

  /**
   * AnimeStudio delete
   */
  export type AnimeStudioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    /**
     * Filter which AnimeStudio to delete.
     */
    where: AnimeStudioWhereUniqueInput
  }

  /**
   * AnimeStudio deleteMany
   */
  export type AnimeStudioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeStudios to delete
     */
    where?: AnimeStudioWhereInput
    /**
     * Limit how many AnimeStudios to delete.
     */
    limit?: number
  }

  /**
   * AnimeStudio without action
   */
  export type AnimeStudioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
  }


  /**
   * Model Theme
   */

  export type AggregateTheme = {
    _count: ThemeCountAggregateOutputType | null
    _avg: ThemeAvgAggregateOutputType | null
    _sum: ThemeSumAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  export type ThemeAvgAggregateOutputType = {
    requestId: number | null
  }

  export type ThemeSumAggregateOutputType = {
    requestId: number | null
  }

  export type ThemeMinAggregateOutputType = {
    id: string | null
    requestId: number | null
    name: string | null
    russian: string | null
  }

  export type ThemeMaxAggregateOutputType = {
    id: string | null
    requestId: number | null
    name: string | null
    russian: string | null
  }

  export type ThemeCountAggregateOutputType = {
    id: number
    requestId: number
    name: number
    russian: number
    _all: number
  }


  export type ThemeAvgAggregateInputType = {
    requestId?: true
  }

  export type ThemeSumAggregateInputType = {
    requestId?: true
  }

  export type ThemeMinAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
  }

  export type ThemeMaxAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
  }

  export type ThemeCountAggregateInputType = {
    id?: true
    requestId?: true
    name?: true
    russian?: true
    _all?: true
  }

  export type ThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Theme to aggregate.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Themes
    **/
    _count?: true | ThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeMaxAggregateInputType
  }

  export type GetThemeAggregateType<T extends ThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheme[P]>
      : GetScalarType<T[P], AggregateTheme[P]>
  }




  export type ThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeWhereInput
    orderBy?: ThemeOrderByWithAggregationInput | ThemeOrderByWithAggregationInput[]
    by: ThemeScalarFieldEnum[] | ThemeScalarFieldEnum
    having?: ThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeCountAggregateInputType | true
    _avg?: ThemeAvgAggregateInputType
    _sum?: ThemeSumAggregateInputType
    _min?: ThemeMinAggregateInputType
    _max?: ThemeMaxAggregateInputType
  }

  export type ThemeGroupByOutputType = {
    id: string
    requestId: number
    name: string
    russian: string
    _count: ThemeCountAggregateOutputType | null
    _avg: ThemeAvgAggregateOutputType | null
    _sum: ThemeSumAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  type GetThemeGroupByPayload<T extends ThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeGroupByOutputType[P]>
        }
      >
    >


  export type ThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
    animes?: boolean | Theme$animesArgs<ExtArgs>
    _count?: boolean | ThemeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectScalar = {
    id?: boolean
    requestId?: boolean
    name?: boolean
    russian?: boolean
  }

  export type ThemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "name" | "russian", ExtArgs["result"]["theme"]>
  export type ThemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animes?: boolean | Theme$animesArgs<ExtArgs>
    _count?: boolean | ThemeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ThemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ThemeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Theme"
    objects: {
      animes: Prisma.$AnimeThemePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: number
      name: string
      russian: string
    }, ExtArgs["result"]["theme"]>
    composites: {}
  }

  type ThemeGetPayload<S extends boolean | null | undefined | ThemeDefaultArgs> = $Result.GetResult<Prisma.$ThemePayload, S>

  type ThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThemeCountAggregateInputType | true
    }

  export interface ThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Theme'], meta: { name: 'Theme' } }
    /**
     * Find zero or one Theme that matches the filter.
     * @param {ThemeFindUniqueArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeFindUniqueArgs>(args: SelectSubset<T, ThemeFindUniqueArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Theme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThemeFindUniqueOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeFindFirstArgs>(args?: SelectSubset<T, ThemeFindFirstArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Themes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Themes
     * const themes = await prisma.theme.findMany()
     * 
     * // Get first 10 Themes
     * const themes = await prisma.theme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeWithIdOnly = await prisma.theme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemeFindManyArgs>(args?: SelectSubset<T, ThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Theme.
     * @param {ThemeCreateArgs} args - Arguments to create a Theme.
     * @example
     * // Create one Theme
     * const Theme = await prisma.theme.create({
     *   data: {
     *     // ... data to create a Theme
     *   }
     * })
     * 
     */
    create<T extends ThemeCreateArgs>(args: SelectSubset<T, ThemeCreateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Themes.
     * @param {ThemeCreateManyArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeCreateManyArgs>(args?: SelectSubset<T, ThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Themes and returns the data saved in the database.
     * @param {ThemeCreateManyAndReturnArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Themes and only return the `id`
     * const themeWithIdOnly = await prisma.theme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Theme.
     * @param {ThemeDeleteArgs} args - Arguments to delete one Theme.
     * @example
     * // Delete one Theme
     * const Theme = await prisma.theme.delete({
     *   where: {
     *     // ... filter to delete one Theme
     *   }
     * })
     * 
     */
    delete<T extends ThemeDeleteArgs>(args: SelectSubset<T, ThemeDeleteArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Theme.
     * @param {ThemeUpdateArgs} args - Arguments to update one Theme.
     * @example
     * // Update one Theme
     * const theme = await prisma.theme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeUpdateArgs>(args: SelectSubset<T, ThemeUpdateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Themes.
     * @param {ThemeDeleteManyArgs} args - Arguments to filter Themes to delete.
     * @example
     * // Delete a few Themes
     * const { count } = await prisma.theme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeDeleteManyArgs>(args?: SelectSubset<T, ThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeUpdateManyArgs>(args: SelectSubset<T, ThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes and returns the data updated in the database.
     * @param {ThemeUpdateManyAndReturnArgs} args - Arguments to update many Themes.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Themes and only return the `id`
     * const themeWithIdOnly = await prisma.theme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThemeUpdateManyAndReturnArgs>(args: SelectSubset<T, ThemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Theme.
     * @param {ThemeUpsertArgs} args - Arguments to update or create a Theme.
     * @example
     * // Update or create a Theme
     * const theme = await prisma.theme.upsert({
     *   create: {
     *     // ... data to create a Theme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theme we want to update
     *   }
     * })
     */
    upsert<T extends ThemeUpsertArgs>(args: SelectSubset<T, ThemeUpsertArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeCountArgs} args - Arguments to filter Themes to count.
     * @example
     * // Count the number of Themes
     * const count = await prisma.theme.count({
     *   where: {
     *     // ... the filter for the Themes we want to count
     *   }
     * })
    **/
    count<T extends ThemeCountArgs>(
      args?: Subset<T, ThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeAggregateArgs>(args: Subset<T, ThemeAggregateArgs>): Prisma.PrismaPromise<GetThemeAggregateType<T>>

    /**
     * Group by Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeGroupByArgs['orderBy'] }
        : { orderBy?: ThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Theme model
   */
  readonly fields: ThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Theme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    animes<T extends Theme$animesArgs<ExtArgs> = {}>(args?: Subset<T, Theme$animesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Theme model
   */
  interface ThemeFieldRefs {
    readonly id: FieldRef<"Theme", 'String'>
    readonly requestId: FieldRef<"Theme", 'Int'>
    readonly name: FieldRef<"Theme", 'String'>
    readonly russian: FieldRef<"Theme", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Theme findUnique
   */
  export type ThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findUniqueOrThrow
   */
  export type ThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findFirst
   */
  export type ThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findFirstOrThrow
   */
  export type ThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findMany
   */
  export type ThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Themes to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme create
   */
  export type ThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to create a Theme.
     */
    data: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
  }

  /**
   * Theme createMany
   */
  export type ThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme createManyAndReturn
   */
  export type ThemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme update
   */
  export type ThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to update a Theme.
     */
    data: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
    /**
     * Choose, which Theme to update.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme updateMany
   */
  export type ThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to update.
     */
    limit?: number
  }

  /**
   * Theme updateManyAndReturn
   */
  export type ThemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to update.
     */
    limit?: number
  }

  /**
   * Theme upsert
   */
  export type ThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The filter to search for the Theme to update in case it exists.
     */
    where: ThemeWhereUniqueInput
    /**
     * In case the Theme found by the `where` argument doesn't exist, create a new Theme with this data.
     */
    create: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
    /**
     * In case the Theme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
  }

  /**
   * Theme delete
   */
  export type ThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter which Theme to delete.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme deleteMany
   */
  export type ThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Themes to delete
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to delete.
     */
    limit?: number
  }

  /**
   * Theme.animes
   */
  export type Theme$animesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    where?: AnimeThemeWhereInput
    orderBy?: AnimeThemeOrderByWithRelationInput | AnimeThemeOrderByWithRelationInput[]
    cursor?: AnimeThemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeThemeScalarFieldEnum | AnimeThemeScalarFieldEnum[]
  }

  /**
   * Theme without action
   */
  export type ThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
  }


  /**
   * Model AnimeTheme
   */

  export type AggregateAnimeTheme = {
    _count: AnimeThemeCountAggregateOutputType | null
    _min: AnimeThemeMinAggregateOutputType | null
    _max: AnimeThemeMaxAggregateOutputType | null
  }

  export type AnimeThemeMinAggregateOutputType = {
    animeId: string | null
    themeId: string | null
  }

  export type AnimeThemeMaxAggregateOutputType = {
    animeId: string | null
    themeId: string | null
  }

  export type AnimeThemeCountAggregateOutputType = {
    animeId: number
    themeId: number
    _all: number
  }


  export type AnimeThemeMinAggregateInputType = {
    animeId?: true
    themeId?: true
  }

  export type AnimeThemeMaxAggregateInputType = {
    animeId?: true
    themeId?: true
  }

  export type AnimeThemeCountAggregateInputType = {
    animeId?: true
    themeId?: true
    _all?: true
  }

  export type AnimeThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeTheme to aggregate.
     */
    where?: AnimeThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeThemes to fetch.
     */
    orderBy?: AnimeThemeOrderByWithRelationInput | AnimeThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeThemes
    **/
    _count?: true | AnimeThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeThemeMaxAggregateInputType
  }

  export type GetAnimeThemeAggregateType<T extends AnimeThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeTheme[P]>
      : GetScalarType<T[P], AggregateAnimeTheme[P]>
  }




  export type AnimeThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeThemeWhereInput
    orderBy?: AnimeThemeOrderByWithAggregationInput | AnimeThemeOrderByWithAggregationInput[]
    by: AnimeThemeScalarFieldEnum[] | AnimeThemeScalarFieldEnum
    having?: AnimeThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeThemeCountAggregateInputType | true
    _min?: AnimeThemeMinAggregateInputType
    _max?: AnimeThemeMaxAggregateInputType
  }

  export type AnimeThemeGroupByOutputType = {
    animeId: string
    themeId: string
    _count: AnimeThemeCountAggregateOutputType | null
    _min: AnimeThemeMinAggregateOutputType | null
    _max: AnimeThemeMaxAggregateOutputType | null
  }

  type GetAnimeThemeGroupByPayload<T extends AnimeThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeThemeGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeThemeGroupByOutputType[P]>
        }
      >
    >


  export type AnimeThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    themeId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeTheme"]>

  export type AnimeThemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    themeId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeTheme"]>

  export type AnimeThemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    themeId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeTheme"]>

  export type AnimeThemeSelectScalar = {
    animeId?: boolean
    themeId?: boolean
  }

  export type AnimeThemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"animeId" | "themeId", ExtArgs["result"]["animeTheme"]>
  export type AnimeThemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }
  export type AnimeThemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }
  export type AnimeThemeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }

  export type $AnimeThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeTheme"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      theme: Prisma.$ThemePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      animeId: string
      themeId: string
    }, ExtArgs["result"]["animeTheme"]>
    composites: {}
  }

  type AnimeThemeGetPayload<S extends boolean | null | undefined | AnimeThemeDefaultArgs> = $Result.GetResult<Prisma.$AnimeThemePayload, S>

  type AnimeThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeThemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeThemeCountAggregateInputType | true
    }

  export interface AnimeThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeTheme'], meta: { name: 'AnimeTheme' } }
    /**
     * Find zero or one AnimeTheme that matches the filter.
     * @param {AnimeThemeFindUniqueArgs} args - Arguments to find a AnimeTheme
     * @example
     * // Get one AnimeTheme
     * const animeTheme = await prisma.animeTheme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeThemeFindUniqueArgs>(args: SelectSubset<T, AnimeThemeFindUniqueArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeTheme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeThemeFindUniqueOrThrowArgs} args - Arguments to find a AnimeTheme
     * @example
     * // Get one AnimeTheme
     * const animeTheme = await prisma.animeTheme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeTheme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeThemeFindFirstArgs} args - Arguments to find a AnimeTheme
     * @example
     * // Get one AnimeTheme
     * const animeTheme = await prisma.animeTheme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeThemeFindFirstArgs>(args?: SelectSubset<T, AnimeThemeFindFirstArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeTheme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeThemeFindFirstOrThrowArgs} args - Arguments to find a AnimeTheme
     * @example
     * // Get one AnimeTheme
     * const animeTheme = await prisma.animeTheme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeThemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeThemes
     * const animeThemes = await prisma.animeTheme.findMany()
     * 
     * // Get first 10 AnimeThemes
     * const animeThemes = await prisma.animeTheme.findMany({ take: 10 })
     * 
     * // Only select the `animeId`
     * const animeThemeWithAnimeIdOnly = await prisma.animeTheme.findMany({ select: { animeId: true } })
     * 
     */
    findMany<T extends AnimeThemeFindManyArgs>(args?: SelectSubset<T, AnimeThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeTheme.
     * @param {AnimeThemeCreateArgs} args - Arguments to create a AnimeTheme.
     * @example
     * // Create one AnimeTheme
     * const AnimeTheme = await prisma.animeTheme.create({
     *   data: {
     *     // ... data to create a AnimeTheme
     *   }
     * })
     * 
     */
    create<T extends AnimeThemeCreateArgs>(args: SelectSubset<T, AnimeThemeCreateArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeThemes.
     * @param {AnimeThemeCreateManyArgs} args - Arguments to create many AnimeThemes.
     * @example
     * // Create many AnimeThemes
     * const animeTheme = await prisma.animeTheme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeThemeCreateManyArgs>(args?: SelectSubset<T, AnimeThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeThemes and returns the data saved in the database.
     * @param {AnimeThemeCreateManyAndReturnArgs} args - Arguments to create many AnimeThemes.
     * @example
     * // Create many AnimeThemes
     * const animeTheme = await prisma.animeTheme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeThemes and only return the `animeId`
     * const animeThemeWithAnimeIdOnly = await prisma.animeTheme.createManyAndReturn({
     *   select: { animeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeThemeCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeThemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeTheme.
     * @param {AnimeThemeDeleteArgs} args - Arguments to delete one AnimeTheme.
     * @example
     * // Delete one AnimeTheme
     * const AnimeTheme = await prisma.animeTheme.delete({
     *   where: {
     *     // ... filter to delete one AnimeTheme
     *   }
     * })
     * 
     */
    delete<T extends AnimeThemeDeleteArgs>(args: SelectSubset<T, AnimeThemeDeleteArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeTheme.
     * @param {AnimeThemeUpdateArgs} args - Arguments to update one AnimeTheme.
     * @example
     * // Update one AnimeTheme
     * const animeTheme = await prisma.animeTheme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeThemeUpdateArgs>(args: SelectSubset<T, AnimeThemeUpdateArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeThemes.
     * @param {AnimeThemeDeleteManyArgs} args - Arguments to filter AnimeThemes to delete.
     * @example
     * // Delete a few AnimeThemes
     * const { count } = await prisma.animeTheme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeThemeDeleteManyArgs>(args?: SelectSubset<T, AnimeThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeThemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeThemes
     * const animeTheme = await prisma.animeTheme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeThemeUpdateManyArgs>(args: SelectSubset<T, AnimeThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeThemes and returns the data updated in the database.
     * @param {AnimeThemeUpdateManyAndReturnArgs} args - Arguments to update many AnimeThemes.
     * @example
     * // Update many AnimeThemes
     * const animeTheme = await prisma.animeTheme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeThemes and only return the `animeId`
     * const animeThemeWithAnimeIdOnly = await prisma.animeTheme.updateManyAndReturn({
     *   select: { animeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeThemeUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeThemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeTheme.
     * @param {AnimeThemeUpsertArgs} args - Arguments to update or create a AnimeTheme.
     * @example
     * // Update or create a AnimeTheme
     * const animeTheme = await prisma.animeTheme.upsert({
     *   create: {
     *     // ... data to create a AnimeTheme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeTheme we want to update
     *   }
     * })
     */
    upsert<T extends AnimeThemeUpsertArgs>(args: SelectSubset<T, AnimeThemeUpsertArgs<ExtArgs>>): Prisma__AnimeThemeClient<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeThemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeThemeCountArgs} args - Arguments to filter AnimeThemes to count.
     * @example
     * // Count the number of AnimeThemes
     * const count = await prisma.animeTheme.count({
     *   where: {
     *     // ... the filter for the AnimeThemes we want to count
     *   }
     * })
    **/
    count<T extends AnimeThemeCountArgs>(
      args?: Subset<T, AnimeThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeTheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeThemeAggregateArgs>(args: Subset<T, AnimeThemeAggregateArgs>): Prisma.PrismaPromise<GetAnimeThemeAggregateType<T>>

    /**
     * Group by AnimeTheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeThemeGroupByArgs['orderBy'] }
        : { orderBy?: AnimeThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeTheme model
   */
  readonly fields: AnimeThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeTheme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    theme<T extends ThemeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThemeDefaultArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeTheme model
   */
  interface AnimeThemeFieldRefs {
    readonly animeId: FieldRef<"AnimeTheme", 'String'>
    readonly themeId: FieldRef<"AnimeTheme", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AnimeTheme findUnique
   */
  export type AnimeThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeTheme to fetch.
     */
    where: AnimeThemeWhereUniqueInput
  }

  /**
   * AnimeTheme findUniqueOrThrow
   */
  export type AnimeThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeTheme to fetch.
     */
    where: AnimeThemeWhereUniqueInput
  }

  /**
   * AnimeTheme findFirst
   */
  export type AnimeThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeTheme to fetch.
     */
    where?: AnimeThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeThemes to fetch.
     */
    orderBy?: AnimeThemeOrderByWithRelationInput | AnimeThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeThemes.
     */
    cursor?: AnimeThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeThemes.
     */
    distinct?: AnimeThemeScalarFieldEnum | AnimeThemeScalarFieldEnum[]
  }

  /**
   * AnimeTheme findFirstOrThrow
   */
  export type AnimeThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeTheme to fetch.
     */
    where?: AnimeThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeThemes to fetch.
     */
    orderBy?: AnimeThemeOrderByWithRelationInput | AnimeThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeThemes.
     */
    cursor?: AnimeThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeThemes.
     */
    distinct?: AnimeThemeScalarFieldEnum | AnimeThemeScalarFieldEnum[]
  }

  /**
   * AnimeTheme findMany
   */
  export type AnimeThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeThemes to fetch.
     */
    where?: AnimeThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeThemes to fetch.
     */
    orderBy?: AnimeThemeOrderByWithRelationInput | AnimeThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeThemes.
     */
    cursor?: AnimeThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeThemes.
     */
    skip?: number
    distinct?: AnimeThemeScalarFieldEnum | AnimeThemeScalarFieldEnum[]
  }

  /**
   * AnimeTheme create
   */
  export type AnimeThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeTheme.
     */
    data: XOR<AnimeThemeCreateInput, AnimeThemeUncheckedCreateInput>
  }

  /**
   * AnimeTheme createMany
   */
  export type AnimeThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeThemes.
     */
    data: AnimeThemeCreateManyInput | AnimeThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeTheme createManyAndReturn
   */
  export type AnimeThemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeThemes.
     */
    data: AnimeThemeCreateManyInput | AnimeThemeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeTheme update
   */
  export type AnimeThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeTheme.
     */
    data: XOR<AnimeThemeUpdateInput, AnimeThemeUncheckedUpdateInput>
    /**
     * Choose, which AnimeTheme to update.
     */
    where: AnimeThemeWhereUniqueInput
  }

  /**
   * AnimeTheme updateMany
   */
  export type AnimeThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeThemes.
     */
    data: XOR<AnimeThemeUpdateManyMutationInput, AnimeThemeUncheckedUpdateManyInput>
    /**
     * Filter which AnimeThemes to update
     */
    where?: AnimeThemeWhereInput
    /**
     * Limit how many AnimeThemes to update.
     */
    limit?: number
  }

  /**
   * AnimeTheme updateManyAndReturn
   */
  export type AnimeThemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * The data used to update AnimeThemes.
     */
    data: XOR<AnimeThemeUpdateManyMutationInput, AnimeThemeUncheckedUpdateManyInput>
    /**
     * Filter which AnimeThemes to update
     */
    where?: AnimeThemeWhereInput
    /**
     * Limit how many AnimeThemes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeTheme upsert
   */
  export type AnimeThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeTheme to update in case it exists.
     */
    where: AnimeThemeWhereUniqueInput
    /**
     * In case the AnimeTheme found by the `where` argument doesn't exist, create a new AnimeTheme with this data.
     */
    create: XOR<AnimeThemeCreateInput, AnimeThemeUncheckedCreateInput>
    /**
     * In case the AnimeTheme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeThemeUpdateInput, AnimeThemeUncheckedUpdateInput>
  }

  /**
   * AnimeTheme delete
   */
  export type AnimeThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    /**
     * Filter which AnimeTheme to delete.
     */
    where: AnimeThemeWhereUniqueInput
  }

  /**
   * AnimeTheme deleteMany
   */
  export type AnimeThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeThemes to delete
     */
    where?: AnimeThemeWhereInput
    /**
     * Limit how many AnimeThemes to delete.
     */
    limit?: number
  }

  /**
   * AnimeTheme without action
   */
  export type AnimeThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
  }


  /**
   * Model AnimeVideo
   */

  export type AggregateAnimeVideo = {
    _count: AnimeVideoCountAggregateOutputType | null
    _min: AnimeVideoMinAggregateOutputType | null
    _max: AnimeVideoMaxAggregateOutputType | null
  }

  export type AnimeVideoMinAggregateOutputType = {
    animeId: string | null
    videoId: string | null
  }

  export type AnimeVideoMaxAggregateOutputType = {
    animeId: string | null
    videoId: string | null
  }

  export type AnimeVideoCountAggregateOutputType = {
    animeId: number
    videoId: number
    _all: number
  }


  export type AnimeVideoMinAggregateInputType = {
    animeId?: true
    videoId?: true
  }

  export type AnimeVideoMaxAggregateInputType = {
    animeId?: true
    videoId?: true
  }

  export type AnimeVideoCountAggregateInputType = {
    animeId?: true
    videoId?: true
    _all?: true
  }

  export type AnimeVideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeVideo to aggregate.
     */
    where?: AnimeVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeVideos to fetch.
     */
    orderBy?: AnimeVideoOrderByWithRelationInput | AnimeVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeVideos
    **/
    _count?: true | AnimeVideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeVideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeVideoMaxAggregateInputType
  }

  export type GetAnimeVideoAggregateType<T extends AnimeVideoAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeVideo[P]>
      : GetScalarType<T[P], AggregateAnimeVideo[P]>
  }




  export type AnimeVideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeVideoWhereInput
    orderBy?: AnimeVideoOrderByWithAggregationInput | AnimeVideoOrderByWithAggregationInput[]
    by: AnimeVideoScalarFieldEnum[] | AnimeVideoScalarFieldEnum
    having?: AnimeVideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeVideoCountAggregateInputType | true
    _min?: AnimeVideoMinAggregateInputType
    _max?: AnimeVideoMaxAggregateInputType
  }

  export type AnimeVideoGroupByOutputType = {
    animeId: string
    videoId: string
    _count: AnimeVideoCountAggregateOutputType | null
    _min: AnimeVideoMinAggregateOutputType | null
    _max: AnimeVideoMaxAggregateOutputType | null
  }

  type GetAnimeVideoGroupByPayload<T extends AnimeVideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeVideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeVideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeVideoGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeVideoGroupByOutputType[P]>
        }
      >
    >


  export type AnimeVideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    videoId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeVideo"]>

  export type AnimeVideoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    videoId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeVideo"]>

  export type AnimeVideoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    animeId?: boolean
    videoId?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeVideo"]>

  export type AnimeVideoSelectScalar = {
    animeId?: boolean
    videoId?: boolean
  }

  export type AnimeVideoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"animeId" | "videoId", ExtArgs["result"]["animeVideo"]>
  export type AnimeVideoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type AnimeVideoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type AnimeVideoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }

  export type $AnimeVideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeVideo"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      video: Prisma.$VideoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      animeId: string
      videoId: string
    }, ExtArgs["result"]["animeVideo"]>
    composites: {}
  }

  type AnimeVideoGetPayload<S extends boolean | null | undefined | AnimeVideoDefaultArgs> = $Result.GetResult<Prisma.$AnimeVideoPayload, S>

  type AnimeVideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeVideoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeVideoCountAggregateInputType | true
    }

  export interface AnimeVideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeVideo'], meta: { name: 'AnimeVideo' } }
    /**
     * Find zero or one AnimeVideo that matches the filter.
     * @param {AnimeVideoFindUniqueArgs} args - Arguments to find a AnimeVideo
     * @example
     * // Get one AnimeVideo
     * const animeVideo = await prisma.animeVideo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeVideoFindUniqueArgs>(args: SelectSubset<T, AnimeVideoFindUniqueArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeVideo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeVideoFindUniqueOrThrowArgs} args - Arguments to find a AnimeVideo
     * @example
     * // Get one AnimeVideo
     * const animeVideo = await prisma.animeVideo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeVideoFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeVideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeVideo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeVideoFindFirstArgs} args - Arguments to find a AnimeVideo
     * @example
     * // Get one AnimeVideo
     * const animeVideo = await prisma.animeVideo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeVideoFindFirstArgs>(args?: SelectSubset<T, AnimeVideoFindFirstArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeVideo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeVideoFindFirstOrThrowArgs} args - Arguments to find a AnimeVideo
     * @example
     * // Get one AnimeVideo
     * const animeVideo = await prisma.animeVideo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeVideoFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeVideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeVideos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeVideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeVideos
     * const animeVideos = await prisma.animeVideo.findMany()
     * 
     * // Get first 10 AnimeVideos
     * const animeVideos = await prisma.animeVideo.findMany({ take: 10 })
     * 
     * // Only select the `animeId`
     * const animeVideoWithAnimeIdOnly = await prisma.animeVideo.findMany({ select: { animeId: true } })
     * 
     */
    findMany<T extends AnimeVideoFindManyArgs>(args?: SelectSubset<T, AnimeVideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeVideo.
     * @param {AnimeVideoCreateArgs} args - Arguments to create a AnimeVideo.
     * @example
     * // Create one AnimeVideo
     * const AnimeVideo = await prisma.animeVideo.create({
     *   data: {
     *     // ... data to create a AnimeVideo
     *   }
     * })
     * 
     */
    create<T extends AnimeVideoCreateArgs>(args: SelectSubset<T, AnimeVideoCreateArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeVideos.
     * @param {AnimeVideoCreateManyArgs} args - Arguments to create many AnimeVideos.
     * @example
     * // Create many AnimeVideos
     * const animeVideo = await prisma.animeVideo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeVideoCreateManyArgs>(args?: SelectSubset<T, AnimeVideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeVideos and returns the data saved in the database.
     * @param {AnimeVideoCreateManyAndReturnArgs} args - Arguments to create many AnimeVideos.
     * @example
     * // Create many AnimeVideos
     * const animeVideo = await prisma.animeVideo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeVideos and only return the `animeId`
     * const animeVideoWithAnimeIdOnly = await prisma.animeVideo.createManyAndReturn({
     *   select: { animeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeVideoCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeVideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeVideo.
     * @param {AnimeVideoDeleteArgs} args - Arguments to delete one AnimeVideo.
     * @example
     * // Delete one AnimeVideo
     * const AnimeVideo = await prisma.animeVideo.delete({
     *   where: {
     *     // ... filter to delete one AnimeVideo
     *   }
     * })
     * 
     */
    delete<T extends AnimeVideoDeleteArgs>(args: SelectSubset<T, AnimeVideoDeleteArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeVideo.
     * @param {AnimeVideoUpdateArgs} args - Arguments to update one AnimeVideo.
     * @example
     * // Update one AnimeVideo
     * const animeVideo = await prisma.animeVideo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeVideoUpdateArgs>(args: SelectSubset<T, AnimeVideoUpdateArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeVideos.
     * @param {AnimeVideoDeleteManyArgs} args - Arguments to filter AnimeVideos to delete.
     * @example
     * // Delete a few AnimeVideos
     * const { count } = await prisma.animeVideo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeVideoDeleteManyArgs>(args?: SelectSubset<T, AnimeVideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeVideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeVideos
     * const animeVideo = await prisma.animeVideo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeVideoUpdateManyArgs>(args: SelectSubset<T, AnimeVideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeVideos and returns the data updated in the database.
     * @param {AnimeVideoUpdateManyAndReturnArgs} args - Arguments to update many AnimeVideos.
     * @example
     * // Update many AnimeVideos
     * const animeVideo = await prisma.animeVideo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeVideos and only return the `animeId`
     * const animeVideoWithAnimeIdOnly = await prisma.animeVideo.updateManyAndReturn({
     *   select: { animeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeVideoUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeVideoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeVideo.
     * @param {AnimeVideoUpsertArgs} args - Arguments to update or create a AnimeVideo.
     * @example
     * // Update or create a AnimeVideo
     * const animeVideo = await prisma.animeVideo.upsert({
     *   create: {
     *     // ... data to create a AnimeVideo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeVideo we want to update
     *   }
     * })
     */
    upsert<T extends AnimeVideoUpsertArgs>(args: SelectSubset<T, AnimeVideoUpsertArgs<ExtArgs>>): Prisma__AnimeVideoClient<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeVideoCountArgs} args - Arguments to filter AnimeVideos to count.
     * @example
     * // Count the number of AnimeVideos
     * const count = await prisma.animeVideo.count({
     *   where: {
     *     // ... the filter for the AnimeVideos we want to count
     *   }
     * })
    **/
    count<T extends AnimeVideoCountArgs>(
      args?: Subset<T, AnimeVideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeVideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeVideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeVideoAggregateArgs>(args: Subset<T, AnimeVideoAggregateArgs>): Prisma.PrismaPromise<GetAnimeVideoAggregateType<T>>

    /**
     * Group by AnimeVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeVideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeVideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeVideoGroupByArgs['orderBy'] }
        : { orderBy?: AnimeVideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeVideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeVideo model
   */
  readonly fields: AnimeVideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeVideo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeVideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeVideo model
   */
  interface AnimeVideoFieldRefs {
    readonly animeId: FieldRef<"AnimeVideo", 'String'>
    readonly videoId: FieldRef<"AnimeVideo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AnimeVideo findUnique
   */
  export type AnimeVideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * Filter, which AnimeVideo to fetch.
     */
    where: AnimeVideoWhereUniqueInput
  }

  /**
   * AnimeVideo findUniqueOrThrow
   */
  export type AnimeVideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * Filter, which AnimeVideo to fetch.
     */
    where: AnimeVideoWhereUniqueInput
  }

  /**
   * AnimeVideo findFirst
   */
  export type AnimeVideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * Filter, which AnimeVideo to fetch.
     */
    where?: AnimeVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeVideos to fetch.
     */
    orderBy?: AnimeVideoOrderByWithRelationInput | AnimeVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeVideos.
     */
    cursor?: AnimeVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeVideos.
     */
    distinct?: AnimeVideoScalarFieldEnum | AnimeVideoScalarFieldEnum[]
  }

  /**
   * AnimeVideo findFirstOrThrow
   */
  export type AnimeVideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * Filter, which AnimeVideo to fetch.
     */
    where?: AnimeVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeVideos to fetch.
     */
    orderBy?: AnimeVideoOrderByWithRelationInput | AnimeVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeVideos.
     */
    cursor?: AnimeVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeVideos.
     */
    distinct?: AnimeVideoScalarFieldEnum | AnimeVideoScalarFieldEnum[]
  }

  /**
   * AnimeVideo findMany
   */
  export type AnimeVideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * Filter, which AnimeVideos to fetch.
     */
    where?: AnimeVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeVideos to fetch.
     */
    orderBy?: AnimeVideoOrderByWithRelationInput | AnimeVideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeVideos.
     */
    cursor?: AnimeVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeVideos.
     */
    skip?: number
    distinct?: AnimeVideoScalarFieldEnum | AnimeVideoScalarFieldEnum[]
  }

  /**
   * AnimeVideo create
   */
  export type AnimeVideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeVideo.
     */
    data: XOR<AnimeVideoCreateInput, AnimeVideoUncheckedCreateInput>
  }

  /**
   * AnimeVideo createMany
   */
  export type AnimeVideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeVideos.
     */
    data: AnimeVideoCreateManyInput | AnimeVideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeVideo createManyAndReturn
   */
  export type AnimeVideoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeVideos.
     */
    data: AnimeVideoCreateManyInput | AnimeVideoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeVideo update
   */
  export type AnimeVideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeVideo.
     */
    data: XOR<AnimeVideoUpdateInput, AnimeVideoUncheckedUpdateInput>
    /**
     * Choose, which AnimeVideo to update.
     */
    where: AnimeVideoWhereUniqueInput
  }

  /**
   * AnimeVideo updateMany
   */
  export type AnimeVideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeVideos.
     */
    data: XOR<AnimeVideoUpdateManyMutationInput, AnimeVideoUncheckedUpdateManyInput>
    /**
     * Filter which AnimeVideos to update
     */
    where?: AnimeVideoWhereInput
    /**
     * Limit how many AnimeVideos to update.
     */
    limit?: number
  }

  /**
   * AnimeVideo updateManyAndReturn
   */
  export type AnimeVideoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * The data used to update AnimeVideos.
     */
    data: XOR<AnimeVideoUpdateManyMutationInput, AnimeVideoUncheckedUpdateManyInput>
    /**
     * Filter which AnimeVideos to update
     */
    where?: AnimeVideoWhereInput
    /**
     * Limit how many AnimeVideos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeVideo upsert
   */
  export type AnimeVideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeVideo to update in case it exists.
     */
    where: AnimeVideoWhereUniqueInput
    /**
     * In case the AnimeVideo found by the `where` argument doesn't exist, create a new AnimeVideo with this data.
     */
    create: XOR<AnimeVideoCreateInput, AnimeVideoUncheckedCreateInput>
    /**
     * In case the AnimeVideo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeVideoUpdateInput, AnimeVideoUncheckedUpdateInput>
  }

  /**
   * AnimeVideo delete
   */
  export type AnimeVideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    /**
     * Filter which AnimeVideo to delete.
     */
    where: AnimeVideoWhereUniqueInput
  }

  /**
   * AnimeVideo deleteMany
   */
  export type AnimeVideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeVideos to delete
     */
    where?: AnimeVideoWhereInput
    /**
     * Limit how many AnimeVideos to delete.
     */
    limit?: number
  }

  /**
   * AnimeVideo without action
   */
  export type AnimeVideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
  }


  /**
   * Model Video
   */

  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoMinAggregateOutputType = {
    id: string | null
    shikimoriId: string | null
    url: string | null
    name: string | null
    kind: $Enums.VideoKindEnum | null
    playerUrl: string | null
    imageUrl: string | null
  }

  export type VideoMaxAggregateOutputType = {
    id: string | null
    shikimoriId: string | null
    url: string | null
    name: string | null
    kind: $Enums.VideoKindEnum | null
    playerUrl: string | null
    imageUrl: string | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    shikimoriId: number
    url: number
    name: number
    kind: number
    playerUrl: number
    imageUrl: number
    _all: number
  }


  export type VideoMinAggregateInputType = {
    id?: true
    shikimoriId?: true
    url?: true
    name?: true
    kind?: true
    playerUrl?: true
    imageUrl?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    shikimoriId?: true
    url?: true
    name?: true
    kind?: true
    playerUrl?: true
    imageUrl?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    shikimoriId?: true
    url?: true
    name?: true
    kind?: true
    playerUrl?: true
    imageUrl?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithAggregationInput | VideoOrderByWithAggregationInput[]
    by: VideoScalarFieldEnum[] | VideoScalarFieldEnum
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }

  export type VideoGroupByOutputType = {
    id: string
    shikimoriId: string | null
    url: string | null
    name: string | null
    kind: $Enums.VideoKindEnum
    playerUrl: string | null
    imageUrl: string | null
    _count: VideoCountAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    url?: boolean
    name?: boolean
    kind?: boolean
    playerUrl?: boolean
    imageUrl?: boolean
    animeVideo?: boolean | Video$animeVideoArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    url?: boolean
    name?: boolean
    kind?: boolean
    playerUrl?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["video"]>

  export type VideoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shikimoriId?: boolean
    url?: boolean
    name?: boolean
    kind?: boolean
    playerUrl?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["video"]>

  export type VideoSelectScalar = {
    id?: boolean
    shikimoriId?: boolean
    url?: boolean
    name?: boolean
    kind?: boolean
    playerUrl?: boolean
    imageUrl?: boolean
  }

  export type VideoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shikimoriId" | "url" | "name" | "kind" | "playerUrl" | "imageUrl", ExtArgs["result"]["video"]>
  export type VideoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animeVideo?: boolean | Video$animeVideoArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VideoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VideoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Video"
    objects: {
      animeVideo: Prisma.$AnimeVideoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shikimoriId: string | null
      url: string | null
      name: string | null
      kind: $Enums.VideoKindEnum
      playerUrl: string | null
      imageUrl: string | null
    }, ExtArgs["result"]["video"]>
    composites: {}
  }

  type VideoGetPayload<S extends boolean | null | undefined | VideoDefaultArgs> = $Result.GetResult<Prisma.$VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VideoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VideoFindUniqueArgs>(args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Video that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs>(args: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VideoFindFirstArgs>(args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs>(args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VideoFindManyArgs>(args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
     */
    create<T extends VideoCreateArgs>(args: SelectSubset<T, VideoCreateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Videos.
     * @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VideoCreateManyArgs>(args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Videos and returns the data saved in the database.
     * @param {VideoCreateManyAndReturnArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VideoCreateManyAndReturnArgs>(args?: SelectSubset<T, VideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
     */
    delete<T extends VideoDeleteArgs>(args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VideoUpdateArgs>(args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VideoDeleteManyArgs>(args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VideoUpdateManyArgs>(args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos and returns the data updated in the database.
     * @param {VideoUpdateManyAndReturnArgs} args - Arguments to update many Videos.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VideoUpdateManyAndReturnArgs>(args: SelectSubset<T, VideoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
     */
    upsert<T extends VideoUpsertArgs>(args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Video model
   */
  readonly fields: VideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    animeVideo<T extends Video$animeVideoArgs<ExtArgs> = {}>(args?: Subset<T, Video$animeVideoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Video model
   */
  interface VideoFieldRefs {
    readonly id: FieldRef<"Video", 'String'>
    readonly shikimoriId: FieldRef<"Video", 'String'>
    readonly url: FieldRef<"Video", 'String'>
    readonly name: FieldRef<"Video", 'String'>
    readonly kind: FieldRef<"Video", 'VideoKindEnum'>
    readonly playerUrl: FieldRef<"Video", 'String'>
    readonly imageUrl: FieldRef<"Video", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Video findUnique
   */
  export type VideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findFirst
   */
  export type VideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }

  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video createManyAndReturn
   */
  export type VideoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to update.
     */
    limit?: number
  }

  /**
   * Video updateManyAndReturn
   */
  export type VideoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to update.
     */
    limit?: number
  }

  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }

  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to delete.
     */
    limit?: number
  }

  /**
   * Video.animeVideo
   */
  export type Video$animeVideoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    where?: AnimeVideoWhereInput
    orderBy?: AnimeVideoOrderByWithRelationInput | AnimeVideoOrderByWithRelationInput[]
    cursor?: AnimeVideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeVideoScalarFieldEnum | AnimeVideoScalarFieldEnum[]
  }

  /**
   * Video without action
   */
  export type VideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
  }


  /**
   * Model Anime
   */

  export type AggregateAnime = {
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  export type AnimeAvgAggregateOutputType = {
    episodes: number | null
    episodesAired: number | null
    duration: number | null
    score: number | null
    shikimoriScore: number | null
  }

  export type AnimeSumAggregateOutputType = {
    episodes: number | null
    episodesAired: number | null
    duration: number | null
    score: number | null
    shikimoriScore: number | null
  }

  export type AnimeMinAggregateOutputType = {
    id: string | null
    alias: string | null
    malId: string | null
    shikimoriId: string | null
    name: string | null
    description: string | null
    russian: string | null
    english: string | null
    japanese: string | null
    status: $Enums.AnimeStatus | null
    kind: $Enums.AnimeKind | null
    episodes: number | null
    episodesAired: number | null
    duration: number | null
    score: number | null
    shikimoriScore: number | null
    airedOn: string | null
    releasedOn: string | null
    shikimoriUrl: string | null
    season: string | null
    isCensored: boolean | null
    rating: $Enums.AnimeRating | null
    nextEpisodeAt: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnimeMaxAggregateOutputType = {
    id: string | null
    alias: string | null
    malId: string | null
    shikimoriId: string | null
    name: string | null
    description: string | null
    russian: string | null
    english: string | null
    japanese: string | null
    status: $Enums.AnimeStatus | null
    kind: $Enums.AnimeKind | null
    episodes: number | null
    episodesAired: number | null
    duration: number | null
    score: number | null
    shikimoriScore: number | null
    airedOn: string | null
    releasedOn: string | null
    shikimoriUrl: string | null
    season: string | null
    isCensored: boolean | null
    rating: $Enums.AnimeRating | null
    nextEpisodeAt: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnimeCountAggregateOutputType = {
    id: number
    alias: number
    malId: number
    shikimoriId: number
    name: number
    description: number
    russian: number
    english: number
    japanese: number
    synonyms: number
    status: number
    kind: number
    episodes: number
    episodesAired: number
    duration: number
    score: number
    shikimoriScore: number
    airedOn: number
    releasedOn: number
    shikimoriUrl: number
    season: number
    isCensored: number
    rating: number
    nextEpisodeAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AnimeAvgAggregateInputType = {
    episodes?: true
    episodesAired?: true
    duration?: true
    score?: true
    shikimoriScore?: true
  }

  export type AnimeSumAggregateInputType = {
    episodes?: true
    episodesAired?: true
    duration?: true
    score?: true
    shikimoriScore?: true
  }

  export type AnimeMinAggregateInputType = {
    id?: true
    alias?: true
    malId?: true
    shikimoriId?: true
    name?: true
    description?: true
    russian?: true
    english?: true
    japanese?: true
    status?: true
    kind?: true
    episodes?: true
    episodesAired?: true
    duration?: true
    score?: true
    shikimoriScore?: true
    airedOn?: true
    releasedOn?: true
    shikimoriUrl?: true
    season?: true
    isCensored?: true
    rating?: true
    nextEpisodeAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnimeMaxAggregateInputType = {
    id?: true
    alias?: true
    malId?: true
    shikimoriId?: true
    name?: true
    description?: true
    russian?: true
    english?: true
    japanese?: true
    status?: true
    kind?: true
    episodes?: true
    episodesAired?: true
    duration?: true
    score?: true
    shikimoriScore?: true
    airedOn?: true
    releasedOn?: true
    shikimoriUrl?: true
    season?: true
    isCensored?: true
    rating?: true
    nextEpisodeAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnimeCountAggregateInputType = {
    id?: true
    alias?: true
    malId?: true
    shikimoriId?: true
    name?: true
    description?: true
    russian?: true
    english?: true
    japanese?: true
    synonyms?: true
    status?: true
    kind?: true
    episodes?: true
    episodesAired?: true
    duration?: true
    score?: true
    shikimoriScore?: true
    airedOn?: true
    releasedOn?: true
    shikimoriUrl?: true
    season?: true
    isCensored?: true
    rating?: true
    nextEpisodeAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AnimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anime to aggregate.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anime
    **/
    _count?: true | AnimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeMaxAggregateInputType
  }

  export type GetAnimeAggregateType<T extends AnimeAggregateArgs> = {
        [P in keyof T & keyof AggregateAnime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnime[P]>
      : GetScalarType<T[P], AggregateAnime[P]>
  }




  export type AnimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeWhereInput
    orderBy?: AnimeOrderByWithAggregationInput | AnimeOrderByWithAggregationInput[]
    by: AnimeScalarFieldEnum[] | AnimeScalarFieldEnum
    having?: AnimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeCountAggregateInputType | true
    _avg?: AnimeAvgAggregateInputType
    _sum?: AnimeSumAggregateInputType
    _min?: AnimeMinAggregateInputType
    _max?: AnimeMaxAggregateInputType
  }

  export type AnimeGroupByOutputType = {
    id: string
    alias: string | null
    malId: string | null
    shikimoriId: string | null
    name: string
    description: string | null
    russian: string | null
    english: string | null
    japanese: string | null
    synonyms: string[]
    status: $Enums.AnimeStatus
    kind: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration: number | null
    score: number | null
    shikimoriScore: number | null
    airedOn: string | null
    releasedOn: string | null
    shikimoriUrl: string | null
    season: string | null
    isCensored: boolean | null
    rating: $Enums.AnimeRating | null
    nextEpisodeAt: string | null
    createdAt: Date
    updatedAt: Date
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  type GetAnimeGroupByPayload<T extends AnimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeGroupByOutputType[P]>
        }
      >
    >


  export type AnimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    malId?: boolean
    shikimoriId?: boolean
    name?: boolean
    description?: boolean
    russian?: boolean
    english?: boolean
    japanese?: boolean
    synonyms?: boolean
    status?: boolean
    kind?: boolean
    episodes?: boolean
    episodesAired?: boolean
    duration?: boolean
    score?: boolean
    shikimoriScore?: boolean
    airedOn?: boolean
    releasedOn?: boolean
    shikimoriUrl?: boolean
    season?: boolean
    isCensored?: boolean
    rating?: boolean
    nextEpisodeAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    poster?: boolean | Anime$posterArgs<ExtArgs>
    studios?: boolean | Anime$studiosArgs<ExtArgs>
    related?: boolean | Anime$relatedArgs<ExtArgs>
    videos?: boolean | Anime$videosArgs<ExtArgs>
    screenshots?: boolean | Anime$screenshotsArgs<ExtArgs>
    genres?: boolean | Anime$genresArgs<ExtArgs>
    theme?: boolean | Anime$themeArgs<ExtArgs>
    demographic?: boolean | Anime$demographicArgs<ExtArgs>
    relatedAnime?: boolean | Anime$relatedAnimeArgs<ExtArgs>
    userProgress?: boolean | Anime$userProgressArgs<ExtArgs>
    animeInCollection?: boolean | Anime$animeInCollectionArgs<ExtArgs>
    comments?: boolean | Anime$commentsArgs<ExtArgs>
    reviews?: boolean | Anime$reviewsArgs<ExtArgs>
    _count?: boolean | AnimeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anime"]>

  export type AnimeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    malId?: boolean
    shikimoriId?: boolean
    name?: boolean
    description?: boolean
    russian?: boolean
    english?: boolean
    japanese?: boolean
    synonyms?: boolean
    status?: boolean
    kind?: boolean
    episodes?: boolean
    episodesAired?: boolean
    duration?: boolean
    score?: boolean
    shikimoriScore?: boolean
    airedOn?: boolean
    releasedOn?: boolean
    shikimoriUrl?: boolean
    season?: boolean
    isCensored?: boolean
    rating?: boolean
    nextEpisodeAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["anime"]>

  export type AnimeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alias?: boolean
    malId?: boolean
    shikimoriId?: boolean
    name?: boolean
    description?: boolean
    russian?: boolean
    english?: boolean
    japanese?: boolean
    synonyms?: boolean
    status?: boolean
    kind?: boolean
    episodes?: boolean
    episodesAired?: boolean
    duration?: boolean
    score?: boolean
    shikimoriScore?: boolean
    airedOn?: boolean
    releasedOn?: boolean
    shikimoriUrl?: boolean
    season?: boolean
    isCensored?: boolean
    rating?: boolean
    nextEpisodeAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["anime"]>

  export type AnimeSelectScalar = {
    id?: boolean
    alias?: boolean
    malId?: boolean
    shikimoriId?: boolean
    name?: boolean
    description?: boolean
    russian?: boolean
    english?: boolean
    japanese?: boolean
    synonyms?: boolean
    status?: boolean
    kind?: boolean
    episodes?: boolean
    episodesAired?: boolean
    duration?: boolean
    score?: boolean
    shikimoriScore?: boolean
    airedOn?: boolean
    releasedOn?: boolean
    shikimoriUrl?: boolean
    season?: boolean
    isCensored?: boolean
    rating?: boolean
    nextEpisodeAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AnimeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "alias" | "malId" | "shikimoriId" | "name" | "description" | "russian" | "english" | "japanese" | "synonyms" | "status" | "kind" | "episodes" | "episodesAired" | "duration" | "score" | "shikimoriScore" | "airedOn" | "releasedOn" | "shikimoriUrl" | "season" | "isCensored" | "rating" | "nextEpisodeAt" | "createdAt" | "updatedAt", ExtArgs["result"]["anime"]>
  export type AnimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    poster?: boolean | Anime$posterArgs<ExtArgs>
    studios?: boolean | Anime$studiosArgs<ExtArgs>
    related?: boolean | Anime$relatedArgs<ExtArgs>
    videos?: boolean | Anime$videosArgs<ExtArgs>
    screenshots?: boolean | Anime$screenshotsArgs<ExtArgs>
    genres?: boolean | Anime$genresArgs<ExtArgs>
    theme?: boolean | Anime$themeArgs<ExtArgs>
    demographic?: boolean | Anime$demographicArgs<ExtArgs>
    relatedAnime?: boolean | Anime$relatedAnimeArgs<ExtArgs>
    userProgress?: boolean | Anime$userProgressArgs<ExtArgs>
    animeInCollection?: boolean | Anime$animeInCollectionArgs<ExtArgs>
    comments?: boolean | Anime$commentsArgs<ExtArgs>
    reviews?: boolean | Anime$reviewsArgs<ExtArgs>
    _count?: boolean | AnimeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AnimeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AnimeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AnimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Anime"
    objects: {
      poster: Prisma.$AnimePosterPayload<ExtArgs>[]
      studios: Prisma.$AnimeStudioPayload<ExtArgs>[]
      related: Prisma.$RelatedAnimePayload<ExtArgs>[]
      videos: Prisma.$AnimeVideoPayload<ExtArgs>[]
      screenshots: Prisma.$AnimeScreenshotPayload<ExtArgs>[]
      genres: Prisma.$AnimeGenrePayload<ExtArgs>[]
      theme: Prisma.$AnimeThemePayload<ExtArgs>[]
      demographic: Prisma.$AnimeDemographicPayload<ExtArgs>[]
      relatedAnime: Prisma.$RelatedAnimePayload<ExtArgs>[]
      userProgress: Prisma.$AnimeEpisodeProgressPayload<ExtArgs>[]
      animeInCollection: Prisma.$AnimeInCollectionPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      alias: string | null
      malId: string | null
      shikimoriId: string | null
      name: string
      description: string | null
      russian: string | null
      english: string | null
      japanese: string | null
      synonyms: string[]
      status: $Enums.AnimeStatus
      kind: $Enums.AnimeKind | null
      episodes: number
      episodesAired: number
      duration: number | null
      score: number | null
      shikimoriScore: number | null
      airedOn: string | null
      releasedOn: string | null
      shikimoriUrl: string | null
      season: string | null
      isCensored: boolean | null
      rating: $Enums.AnimeRating | null
      nextEpisodeAt: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["anime"]>
    composites: {}
  }

  type AnimeGetPayload<S extends boolean | null | undefined | AnimeDefaultArgs> = $Result.GetResult<Prisma.$AnimePayload, S>

  type AnimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeCountAggregateInputType | true
    }

  export interface AnimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Anime'], meta: { name: 'Anime' } }
    /**
     * Find zero or one Anime that matches the filter.
     * @param {AnimeFindUniqueArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeFindUniqueArgs>(args: SelectSubset<T, AnimeFindUniqueArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Anime that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeFindUniqueOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeFindFirstArgs>(args?: SelectSubset<T, AnimeFindFirstArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Anime that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anime
     * const anime = await prisma.anime.findMany()
     * 
     * // Get first 10 Anime
     * const anime = await prisma.anime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animeWithIdOnly = await prisma.anime.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnimeFindManyArgs>(args?: SelectSubset<T, AnimeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Anime.
     * @param {AnimeCreateArgs} args - Arguments to create a Anime.
     * @example
     * // Create one Anime
     * const Anime = await prisma.anime.create({
     *   data: {
     *     // ... data to create a Anime
     *   }
     * })
     * 
     */
    create<T extends AnimeCreateArgs>(args: SelectSubset<T, AnimeCreateArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Anime.
     * @param {AnimeCreateManyArgs} args - Arguments to create many Anime.
     * @example
     * // Create many Anime
     * const anime = await prisma.anime.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeCreateManyArgs>(args?: SelectSubset<T, AnimeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Anime and returns the data saved in the database.
     * @param {AnimeCreateManyAndReturnArgs} args - Arguments to create many Anime.
     * @example
     * // Create many Anime
     * const anime = await prisma.anime.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Anime and only return the `id`
     * const animeWithIdOnly = await prisma.anime.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Anime.
     * @param {AnimeDeleteArgs} args - Arguments to delete one Anime.
     * @example
     * // Delete one Anime
     * const Anime = await prisma.anime.delete({
     *   where: {
     *     // ... filter to delete one Anime
     *   }
     * })
     * 
     */
    delete<T extends AnimeDeleteArgs>(args: SelectSubset<T, AnimeDeleteArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Anime.
     * @param {AnimeUpdateArgs} args - Arguments to update one Anime.
     * @example
     * // Update one Anime
     * const anime = await prisma.anime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeUpdateArgs>(args: SelectSubset<T, AnimeUpdateArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Anime.
     * @param {AnimeDeleteManyArgs} args - Arguments to filter Anime to delete.
     * @example
     * // Delete a few Anime
     * const { count } = await prisma.anime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeDeleteManyArgs>(args?: SelectSubset<T, AnimeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anime
     * const anime = await prisma.anime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeUpdateManyArgs>(args: SelectSubset<T, AnimeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime and returns the data updated in the database.
     * @param {AnimeUpdateManyAndReturnArgs} args - Arguments to update many Anime.
     * @example
     * // Update many Anime
     * const anime = await prisma.anime.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Anime and only return the `id`
     * const animeWithIdOnly = await prisma.anime.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Anime.
     * @param {AnimeUpsertArgs} args - Arguments to update or create a Anime.
     * @example
     * // Update or create a Anime
     * const anime = await prisma.anime.upsert({
     *   create: {
     *     // ... data to create a Anime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anime we want to update
     *   }
     * })
     */
    upsert<T extends AnimeUpsertArgs>(args: SelectSubset<T, AnimeUpsertArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCountArgs} args - Arguments to filter Anime to count.
     * @example
     * // Count the number of Anime
     * const count = await prisma.anime.count({
     *   where: {
     *     // ... the filter for the Anime we want to count
     *   }
     * })
    **/
    count<T extends AnimeCountArgs>(
      args?: Subset<T, AnimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeAggregateArgs>(args: Subset<T, AnimeAggregateArgs>): Prisma.PrismaPromise<GetAnimeAggregateType<T>>

    /**
     * Group by Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeGroupByArgs['orderBy'] }
        : { orderBy?: AnimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Anime model
   */
  readonly fields: AnimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Anime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    poster<T extends Anime$posterArgs<ExtArgs> = {}>(args?: Subset<T, Anime$posterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimePosterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studios<T extends Anime$studiosArgs<ExtArgs> = {}>(args?: Subset<T, Anime$studiosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeStudioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    related<T extends Anime$relatedArgs<ExtArgs> = {}>(args?: Subset<T, Anime$relatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videos<T extends Anime$videosArgs<ExtArgs> = {}>(args?: Subset<T, Anime$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeVideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    screenshots<T extends Anime$screenshotsArgs<ExtArgs> = {}>(args?: Subset<T, Anime$screenshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeScreenshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    genres<T extends Anime$genresArgs<ExtArgs> = {}>(args?: Subset<T, Anime$genresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    theme<T extends Anime$themeArgs<ExtArgs> = {}>(args?: Subset<T, Anime$themeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    demographic<T extends Anime$demographicArgs<ExtArgs> = {}>(args?: Subset<T, Anime$demographicArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeDemographicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedAnime<T extends Anime$relatedAnimeArgs<ExtArgs> = {}>(args?: Subset<T, Anime$relatedAnimeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedAnimePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userProgress<T extends Anime$userProgressArgs<ExtArgs> = {}>(args?: Subset<T, Anime$userProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    animeInCollection<T extends Anime$animeInCollectionArgs<ExtArgs> = {}>(args?: Subset<T, Anime$animeInCollectionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Anime$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Anime$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Anime$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Anime$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Anime model
   */
  interface AnimeFieldRefs {
    readonly id: FieldRef<"Anime", 'String'>
    readonly alias: FieldRef<"Anime", 'String'>
    readonly malId: FieldRef<"Anime", 'String'>
    readonly shikimoriId: FieldRef<"Anime", 'String'>
    readonly name: FieldRef<"Anime", 'String'>
    readonly description: FieldRef<"Anime", 'String'>
    readonly russian: FieldRef<"Anime", 'String'>
    readonly english: FieldRef<"Anime", 'String'>
    readonly japanese: FieldRef<"Anime", 'String'>
    readonly synonyms: FieldRef<"Anime", 'String[]'>
    readonly status: FieldRef<"Anime", 'AnimeStatus'>
    readonly kind: FieldRef<"Anime", 'AnimeKind'>
    readonly episodes: FieldRef<"Anime", 'Int'>
    readonly episodesAired: FieldRef<"Anime", 'Int'>
    readonly duration: FieldRef<"Anime", 'Int'>
    readonly score: FieldRef<"Anime", 'Float'>
    readonly shikimoriScore: FieldRef<"Anime", 'Float'>
    readonly airedOn: FieldRef<"Anime", 'String'>
    readonly releasedOn: FieldRef<"Anime", 'String'>
    readonly shikimoriUrl: FieldRef<"Anime", 'String'>
    readonly season: FieldRef<"Anime", 'String'>
    readonly isCensored: FieldRef<"Anime", 'Boolean'>
    readonly rating: FieldRef<"Anime", 'AnimeRating'>
    readonly nextEpisodeAt: FieldRef<"Anime", 'String'>
    readonly createdAt: FieldRef<"Anime", 'DateTime'>
    readonly updatedAt: FieldRef<"Anime", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Anime findUnique
   */
  export type AnimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime findUniqueOrThrow
   */
  export type AnimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime findFirst
   */
  export type AnimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     */
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Anime findFirstOrThrow
   */
  export type AnimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     */
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Anime findMany
   */
  export type AnimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: AnimeOrderByWithRelationInput | AnimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    distinct?: AnimeScalarFieldEnum | AnimeScalarFieldEnum[]
  }

  /**
   * Anime create
   */
  export type AnimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * The data needed to create a Anime.
     */
    data: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
  }

  /**
   * Anime createMany
   */
  export type AnimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Anime.
     */
    data: AnimeCreateManyInput | AnimeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Anime createManyAndReturn
   */
  export type AnimeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * The data used to create many Anime.
     */
    data: AnimeCreateManyInput | AnimeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Anime update
   */
  export type AnimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * The data needed to update a Anime.
     */
    data: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
    /**
     * Choose, which Anime to update.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime updateMany
   */
  export type AnimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Anime.
     */
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyInput>
    /**
     * Filter which Anime to update
     */
    where?: AnimeWhereInput
    /**
     * Limit how many Anime to update.
     */
    limit?: number
  }

  /**
   * Anime updateManyAndReturn
   */
  export type AnimeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * The data used to update Anime.
     */
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyInput>
    /**
     * Filter which Anime to update
     */
    where?: AnimeWhereInput
    /**
     * Limit how many Anime to update.
     */
    limit?: number
  }

  /**
   * Anime upsert
   */
  export type AnimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * The filter to search for the Anime to update in case it exists.
     */
    where: AnimeWhereUniqueInput
    /**
     * In case the Anime found by the `where` argument doesn't exist, create a new Anime with this data.
     */
    create: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
    /**
     * In case the Anime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
  }

  /**
   * Anime delete
   */
  export type AnimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    /**
     * Filter which Anime to delete.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime deleteMany
   */
  export type AnimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anime to delete
     */
    where?: AnimeWhereInput
    /**
     * Limit how many Anime to delete.
     */
    limit?: number
  }

  /**
   * Anime.poster
   */
  export type Anime$posterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimePoster
     */
    select?: AnimePosterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimePoster
     */
    omit?: AnimePosterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimePosterInclude<ExtArgs> | null
    where?: AnimePosterWhereInput
    orderBy?: AnimePosterOrderByWithRelationInput | AnimePosterOrderByWithRelationInput[]
    cursor?: AnimePosterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimePosterScalarFieldEnum | AnimePosterScalarFieldEnum[]
  }

  /**
   * Anime.studios
   */
  export type Anime$studiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeStudio
     */
    select?: AnimeStudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeStudio
     */
    omit?: AnimeStudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeStudioInclude<ExtArgs> | null
    where?: AnimeStudioWhereInput
    orderBy?: AnimeStudioOrderByWithRelationInput | AnimeStudioOrderByWithRelationInput[]
    cursor?: AnimeStudioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeStudioScalarFieldEnum | AnimeStudioScalarFieldEnum[]
  }

  /**
   * Anime.related
   */
  export type Anime$relatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    where?: RelatedAnimeWhereInput
    orderBy?: RelatedAnimeOrderByWithRelationInput | RelatedAnimeOrderByWithRelationInput[]
    cursor?: RelatedAnimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedAnimeScalarFieldEnum | RelatedAnimeScalarFieldEnum[]
  }

  /**
   * Anime.videos
   */
  export type Anime$videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeVideo
     */
    select?: AnimeVideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeVideo
     */
    omit?: AnimeVideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeVideoInclude<ExtArgs> | null
    where?: AnimeVideoWhereInput
    orderBy?: AnimeVideoOrderByWithRelationInput | AnimeVideoOrderByWithRelationInput[]
    cursor?: AnimeVideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeVideoScalarFieldEnum | AnimeVideoScalarFieldEnum[]
  }

  /**
   * Anime.screenshots
   */
  export type Anime$screenshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeScreenshot
     */
    select?: AnimeScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeScreenshot
     */
    omit?: AnimeScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeScreenshotInclude<ExtArgs> | null
    where?: AnimeScreenshotWhereInput
    orderBy?: AnimeScreenshotOrderByWithRelationInput | AnimeScreenshotOrderByWithRelationInput[]
    cursor?: AnimeScreenshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeScreenshotScalarFieldEnum | AnimeScreenshotScalarFieldEnum[]
  }

  /**
   * Anime.genres
   */
  export type Anime$genresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeGenre
     */
    select?: AnimeGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeGenre
     */
    omit?: AnimeGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeGenreInclude<ExtArgs> | null
    where?: AnimeGenreWhereInput
    orderBy?: AnimeGenreOrderByWithRelationInput | AnimeGenreOrderByWithRelationInput[]
    cursor?: AnimeGenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeGenreScalarFieldEnum | AnimeGenreScalarFieldEnum[]
  }

  /**
   * Anime.theme
   */
  export type Anime$themeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeTheme
     */
    select?: AnimeThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeTheme
     */
    omit?: AnimeThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeThemeInclude<ExtArgs> | null
    where?: AnimeThemeWhereInput
    orderBy?: AnimeThemeOrderByWithRelationInput | AnimeThemeOrderByWithRelationInput[]
    cursor?: AnimeThemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeThemeScalarFieldEnum | AnimeThemeScalarFieldEnum[]
  }

  /**
   * Anime.demographic
   */
  export type Anime$demographicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeDemographic
     */
    select?: AnimeDemographicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeDemographic
     */
    omit?: AnimeDemographicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeDemographicInclude<ExtArgs> | null
    where?: AnimeDemographicWhereInput
    orderBy?: AnimeDemographicOrderByWithRelationInput | AnimeDemographicOrderByWithRelationInput[]
    cursor?: AnimeDemographicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeDemographicScalarFieldEnum | AnimeDemographicScalarFieldEnum[]
  }

  /**
   * Anime.relatedAnime
   */
  export type Anime$relatedAnimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedAnime
     */
    select?: RelatedAnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedAnime
     */
    omit?: RelatedAnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedAnimeInclude<ExtArgs> | null
    where?: RelatedAnimeWhereInput
    orderBy?: RelatedAnimeOrderByWithRelationInput | RelatedAnimeOrderByWithRelationInput[]
    cursor?: RelatedAnimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedAnimeScalarFieldEnum | RelatedAnimeScalarFieldEnum[]
  }

  /**
   * Anime.userProgress
   */
  export type Anime$userProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    where?: AnimeEpisodeProgressWhereInput
    orderBy?: AnimeEpisodeProgressOrderByWithRelationInput | AnimeEpisodeProgressOrderByWithRelationInput[]
    cursor?: AnimeEpisodeProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeEpisodeProgressScalarFieldEnum | AnimeEpisodeProgressScalarFieldEnum[]
  }

  /**
   * Anime.animeInCollection
   */
  export type Anime$animeInCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    where?: AnimeInCollectionWhereInput
    orderBy?: AnimeInCollectionOrderByWithRelationInput | AnimeInCollectionOrderByWithRelationInput[]
    cursor?: AnimeInCollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeInCollectionScalarFieldEnum | AnimeInCollectionScalarFieldEnum[]
  }

  /**
   * Anime.comments
   */
  export type Anime$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Anime.reviews
   */
  export type Anime$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Anime without action
   */
  export type AnimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expiresAt: number | null
  }

  export type AccountSumAggregateOutputType = {
    expiresAt: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    type: number
    provider: number
    refreshToken: number
    accessToken: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expiresAt?: true
  }

  export type AccountSumAggregateInputType = {
    expiresAt?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    type: string
    provider: string
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date
    updatedAt: Date
    userId: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "provider" | "refreshToken" | "accessToken" | "expiresAt" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Account$userArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Account$userArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Account$userArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      provider: string
      refreshToken: string | null
      accessToken: string | null
      expiresAt: number | null
      createdAt: Date
      updatedAt: Date
      userId: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Account$userArgs<ExtArgs> = {}>(args?: Subset<T, Account$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly expiresAt: FieldRef<"Account", 'Int'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
    readonly userId: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.user
   */
  export type Account$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    type: number
    expiresIn: number
    createdAt: number
    _all: number
  }


  export type TokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date
    createdAt: Date
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }

  export type TokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "type" | "expiresIn" | "createdAt", ExtArgs["result"]["token"]>

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      type: $Enums.TokenType
      expiresIn: Date
      createdAt: Date
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokenCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens and returns the data updated in the database.
     * @param {TokenUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TokenUpdateManyAndReturnArgs>(args: SelectSubset<T, TokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'String'>
    readonly email: FieldRef<"Token", 'String'>
    readonly token: FieldRef<"Token", 'String'>
    readonly type: FieldRef<"Token", 'TokenType'>
    readonly expiresIn: FieldRef<"Token", 'DateTime'>
    readonly createdAt: FieldRef<"Token", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token createManyAndReturn
   */
  export type TokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token updateManyAndReturn
   */
  export type TokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to delete.
     */
    limit?: number
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
  }


  /**
   * Model ParsingSession
   */

  export type AggregateParsingSession = {
    _count: ParsingSessionCountAggregateOutputType | null
    _avg: ParsingSessionAvgAggregateOutputType | null
    _sum: ParsingSessionSumAggregateOutputType | null
    _min: ParsingSessionMinAggregateOutputType | null
    _max: ParsingSessionMaxAggregateOutputType | null
  }

  export type ParsingSessionAvgAggregateOutputType = {
    id: number | null
    lastProcessedPage: number | null
    processedPages: number | null
    processedItems: number | null
  }

  export type ParsingSessionSumAggregateOutputType = {
    id: number | null
    lastProcessedPage: number | null
    processedPages: number | null
    processedItems: number | null
  }

  export type ParsingSessionMinAggregateOutputType = {
    id: number | null
    name: string | null
    status: string | null
    type: $Enums.ParsingSessionType | null
    lastProcessedPage: number | null
    processedPages: number | null
    processedItems: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParsingSessionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    status: string | null
    type: $Enums.ParsingSessionType | null
    lastProcessedPage: number | null
    processedPages: number | null
    processedItems: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParsingSessionCountAggregateOutputType = {
    id: number
    name: number
    status: number
    type: number
    lastProcessedPage: number
    processedPages: number
    processedItems: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParsingSessionAvgAggregateInputType = {
    id?: true
    lastProcessedPage?: true
    processedPages?: true
    processedItems?: true
  }

  export type ParsingSessionSumAggregateInputType = {
    id?: true
    lastProcessedPage?: true
    processedPages?: true
    processedItems?: true
  }

  export type ParsingSessionMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    lastProcessedPage?: true
    processedPages?: true
    processedItems?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParsingSessionMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    lastProcessedPage?: true
    processedPages?: true
    processedItems?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParsingSessionCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    lastProcessedPage?: true
    processedPages?: true
    processedItems?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParsingSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParsingSession to aggregate.
     */
    where?: ParsingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParsingSessions to fetch.
     */
    orderBy?: ParsingSessionOrderByWithRelationInput | ParsingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParsingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParsingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParsingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParsingSessions
    **/
    _count?: true | ParsingSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParsingSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParsingSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParsingSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParsingSessionMaxAggregateInputType
  }

  export type GetParsingSessionAggregateType<T extends ParsingSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateParsingSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParsingSession[P]>
      : GetScalarType<T[P], AggregateParsingSession[P]>
  }




  export type ParsingSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParsingSessionWhereInput
    orderBy?: ParsingSessionOrderByWithAggregationInput | ParsingSessionOrderByWithAggregationInput[]
    by: ParsingSessionScalarFieldEnum[] | ParsingSessionScalarFieldEnum
    having?: ParsingSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParsingSessionCountAggregateInputType | true
    _avg?: ParsingSessionAvgAggregateInputType
    _sum?: ParsingSessionSumAggregateInputType
    _min?: ParsingSessionMinAggregateInputType
    _max?: ParsingSessionMaxAggregateInputType
  }

  export type ParsingSessionGroupByOutputType = {
    id: number
    name: string
    status: string
    type: $Enums.ParsingSessionType
    lastProcessedPage: number
    processedPages: number
    processedItems: number
    createdAt: Date
    updatedAt: Date
    _count: ParsingSessionCountAggregateOutputType | null
    _avg: ParsingSessionAvgAggregateOutputType | null
    _sum: ParsingSessionSumAggregateOutputType | null
    _min: ParsingSessionMinAggregateOutputType | null
    _max: ParsingSessionMaxAggregateOutputType | null
  }

  type GetParsingSessionGroupByPayload<T extends ParsingSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParsingSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParsingSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParsingSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ParsingSessionGroupByOutputType[P]>
        }
      >
    >


  export type ParsingSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    lastProcessedPage?: boolean
    processedPages?: boolean
    processedItems?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["parsingSession"]>

  export type ParsingSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    lastProcessedPage?: boolean
    processedPages?: boolean
    processedItems?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["parsingSession"]>

  export type ParsingSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    lastProcessedPage?: boolean
    processedPages?: boolean
    processedItems?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["parsingSession"]>

  export type ParsingSessionSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    lastProcessedPage?: boolean
    processedPages?: boolean
    processedItems?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParsingSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "status" | "type" | "lastProcessedPage" | "processedPages" | "processedItems" | "createdAt" | "updatedAt", ExtArgs["result"]["parsingSession"]>

  export type $ParsingSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParsingSession"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      status: string
      type: $Enums.ParsingSessionType
      lastProcessedPage: number
      processedPages: number
      processedItems: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["parsingSession"]>
    composites: {}
  }

  type ParsingSessionGetPayload<S extends boolean | null | undefined | ParsingSessionDefaultArgs> = $Result.GetResult<Prisma.$ParsingSessionPayload, S>

  type ParsingSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParsingSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParsingSessionCountAggregateInputType | true
    }

  export interface ParsingSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParsingSession'], meta: { name: 'ParsingSession' } }
    /**
     * Find zero or one ParsingSession that matches the filter.
     * @param {ParsingSessionFindUniqueArgs} args - Arguments to find a ParsingSession
     * @example
     * // Get one ParsingSession
     * const parsingSession = await prisma.parsingSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParsingSessionFindUniqueArgs>(args: SelectSubset<T, ParsingSessionFindUniqueArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParsingSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParsingSessionFindUniqueOrThrowArgs} args - Arguments to find a ParsingSession
     * @example
     * // Get one ParsingSession
     * const parsingSession = await prisma.parsingSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParsingSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ParsingSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParsingSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParsingSessionFindFirstArgs} args - Arguments to find a ParsingSession
     * @example
     * // Get one ParsingSession
     * const parsingSession = await prisma.parsingSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParsingSessionFindFirstArgs>(args?: SelectSubset<T, ParsingSessionFindFirstArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParsingSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParsingSessionFindFirstOrThrowArgs} args - Arguments to find a ParsingSession
     * @example
     * // Get one ParsingSession
     * const parsingSession = await prisma.parsingSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParsingSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ParsingSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParsingSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParsingSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParsingSessions
     * const parsingSessions = await prisma.parsingSession.findMany()
     * 
     * // Get first 10 ParsingSessions
     * const parsingSessions = await prisma.parsingSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parsingSessionWithIdOnly = await prisma.parsingSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParsingSessionFindManyArgs>(args?: SelectSubset<T, ParsingSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParsingSession.
     * @param {ParsingSessionCreateArgs} args - Arguments to create a ParsingSession.
     * @example
     * // Create one ParsingSession
     * const ParsingSession = await prisma.parsingSession.create({
     *   data: {
     *     // ... data to create a ParsingSession
     *   }
     * })
     * 
     */
    create<T extends ParsingSessionCreateArgs>(args: SelectSubset<T, ParsingSessionCreateArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParsingSessions.
     * @param {ParsingSessionCreateManyArgs} args - Arguments to create many ParsingSessions.
     * @example
     * // Create many ParsingSessions
     * const parsingSession = await prisma.parsingSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParsingSessionCreateManyArgs>(args?: SelectSubset<T, ParsingSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParsingSessions and returns the data saved in the database.
     * @param {ParsingSessionCreateManyAndReturnArgs} args - Arguments to create many ParsingSessions.
     * @example
     * // Create many ParsingSessions
     * const parsingSession = await prisma.parsingSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParsingSessions and only return the `id`
     * const parsingSessionWithIdOnly = await prisma.parsingSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParsingSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ParsingSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ParsingSession.
     * @param {ParsingSessionDeleteArgs} args - Arguments to delete one ParsingSession.
     * @example
     * // Delete one ParsingSession
     * const ParsingSession = await prisma.parsingSession.delete({
     *   where: {
     *     // ... filter to delete one ParsingSession
     *   }
     * })
     * 
     */
    delete<T extends ParsingSessionDeleteArgs>(args: SelectSubset<T, ParsingSessionDeleteArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParsingSession.
     * @param {ParsingSessionUpdateArgs} args - Arguments to update one ParsingSession.
     * @example
     * // Update one ParsingSession
     * const parsingSession = await prisma.parsingSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParsingSessionUpdateArgs>(args: SelectSubset<T, ParsingSessionUpdateArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParsingSessions.
     * @param {ParsingSessionDeleteManyArgs} args - Arguments to filter ParsingSessions to delete.
     * @example
     * // Delete a few ParsingSessions
     * const { count } = await prisma.parsingSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParsingSessionDeleteManyArgs>(args?: SelectSubset<T, ParsingSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParsingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParsingSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParsingSessions
     * const parsingSession = await prisma.parsingSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParsingSessionUpdateManyArgs>(args: SelectSubset<T, ParsingSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParsingSessions and returns the data updated in the database.
     * @param {ParsingSessionUpdateManyAndReturnArgs} args - Arguments to update many ParsingSessions.
     * @example
     * // Update many ParsingSessions
     * const parsingSession = await prisma.parsingSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ParsingSessions and only return the `id`
     * const parsingSessionWithIdOnly = await prisma.parsingSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParsingSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ParsingSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ParsingSession.
     * @param {ParsingSessionUpsertArgs} args - Arguments to update or create a ParsingSession.
     * @example
     * // Update or create a ParsingSession
     * const parsingSession = await prisma.parsingSession.upsert({
     *   create: {
     *     // ... data to create a ParsingSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParsingSession we want to update
     *   }
     * })
     */
    upsert<T extends ParsingSessionUpsertArgs>(args: SelectSubset<T, ParsingSessionUpsertArgs<ExtArgs>>): Prisma__ParsingSessionClient<$Result.GetResult<Prisma.$ParsingSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParsingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParsingSessionCountArgs} args - Arguments to filter ParsingSessions to count.
     * @example
     * // Count the number of ParsingSessions
     * const count = await prisma.parsingSession.count({
     *   where: {
     *     // ... the filter for the ParsingSessions we want to count
     *   }
     * })
    **/
    count<T extends ParsingSessionCountArgs>(
      args?: Subset<T, ParsingSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParsingSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParsingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParsingSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParsingSessionAggregateArgs>(args: Subset<T, ParsingSessionAggregateArgs>): Prisma.PrismaPromise<GetParsingSessionAggregateType<T>>

    /**
     * Group by ParsingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParsingSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParsingSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParsingSessionGroupByArgs['orderBy'] }
        : { orderBy?: ParsingSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParsingSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParsingSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParsingSession model
   */
  readonly fields: ParsingSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParsingSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParsingSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParsingSession model
   */
  interface ParsingSessionFieldRefs {
    readonly id: FieldRef<"ParsingSession", 'Int'>
    readonly name: FieldRef<"ParsingSession", 'String'>
    readonly status: FieldRef<"ParsingSession", 'String'>
    readonly type: FieldRef<"ParsingSession", 'ParsingSessionType'>
    readonly lastProcessedPage: FieldRef<"ParsingSession", 'Int'>
    readonly processedPages: FieldRef<"ParsingSession", 'Int'>
    readonly processedItems: FieldRef<"ParsingSession", 'Int'>
    readonly createdAt: FieldRef<"ParsingSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ParsingSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ParsingSession findUnique
   */
  export type ParsingSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * Filter, which ParsingSession to fetch.
     */
    where: ParsingSessionWhereUniqueInput
  }

  /**
   * ParsingSession findUniqueOrThrow
   */
  export type ParsingSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * Filter, which ParsingSession to fetch.
     */
    where: ParsingSessionWhereUniqueInput
  }

  /**
   * ParsingSession findFirst
   */
  export type ParsingSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * Filter, which ParsingSession to fetch.
     */
    where?: ParsingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParsingSessions to fetch.
     */
    orderBy?: ParsingSessionOrderByWithRelationInput | ParsingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParsingSessions.
     */
    cursor?: ParsingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParsingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParsingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParsingSessions.
     */
    distinct?: ParsingSessionScalarFieldEnum | ParsingSessionScalarFieldEnum[]
  }

  /**
   * ParsingSession findFirstOrThrow
   */
  export type ParsingSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * Filter, which ParsingSession to fetch.
     */
    where?: ParsingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParsingSessions to fetch.
     */
    orderBy?: ParsingSessionOrderByWithRelationInput | ParsingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParsingSessions.
     */
    cursor?: ParsingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParsingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParsingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParsingSessions.
     */
    distinct?: ParsingSessionScalarFieldEnum | ParsingSessionScalarFieldEnum[]
  }

  /**
   * ParsingSession findMany
   */
  export type ParsingSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * Filter, which ParsingSessions to fetch.
     */
    where?: ParsingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParsingSessions to fetch.
     */
    orderBy?: ParsingSessionOrderByWithRelationInput | ParsingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParsingSessions.
     */
    cursor?: ParsingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParsingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParsingSessions.
     */
    skip?: number
    distinct?: ParsingSessionScalarFieldEnum | ParsingSessionScalarFieldEnum[]
  }

  /**
   * ParsingSession create
   */
  export type ParsingSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * The data needed to create a ParsingSession.
     */
    data: XOR<ParsingSessionCreateInput, ParsingSessionUncheckedCreateInput>
  }

  /**
   * ParsingSession createMany
   */
  export type ParsingSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParsingSessions.
     */
    data: ParsingSessionCreateManyInput | ParsingSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParsingSession createManyAndReturn
   */
  export type ParsingSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ParsingSessions.
     */
    data: ParsingSessionCreateManyInput | ParsingSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParsingSession update
   */
  export type ParsingSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * The data needed to update a ParsingSession.
     */
    data: XOR<ParsingSessionUpdateInput, ParsingSessionUncheckedUpdateInput>
    /**
     * Choose, which ParsingSession to update.
     */
    where: ParsingSessionWhereUniqueInput
  }

  /**
   * ParsingSession updateMany
   */
  export type ParsingSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParsingSessions.
     */
    data: XOR<ParsingSessionUpdateManyMutationInput, ParsingSessionUncheckedUpdateManyInput>
    /**
     * Filter which ParsingSessions to update
     */
    where?: ParsingSessionWhereInput
    /**
     * Limit how many ParsingSessions to update.
     */
    limit?: number
  }

  /**
   * ParsingSession updateManyAndReturn
   */
  export type ParsingSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * The data used to update ParsingSessions.
     */
    data: XOR<ParsingSessionUpdateManyMutationInput, ParsingSessionUncheckedUpdateManyInput>
    /**
     * Filter which ParsingSessions to update
     */
    where?: ParsingSessionWhereInput
    /**
     * Limit how many ParsingSessions to update.
     */
    limit?: number
  }

  /**
   * ParsingSession upsert
   */
  export type ParsingSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * The filter to search for the ParsingSession to update in case it exists.
     */
    where: ParsingSessionWhereUniqueInput
    /**
     * In case the ParsingSession found by the `where` argument doesn't exist, create a new ParsingSession with this data.
     */
    create: XOR<ParsingSessionCreateInput, ParsingSessionUncheckedCreateInput>
    /**
     * In case the ParsingSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParsingSessionUpdateInput, ParsingSessionUncheckedUpdateInput>
  }

  /**
   * ParsingSession delete
   */
  export type ParsingSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
    /**
     * Filter which ParsingSession to delete.
     */
    where: ParsingSessionWhereUniqueInput
  }

  /**
   * ParsingSession deleteMany
   */
  export type ParsingSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParsingSessions to delete
     */
    where?: ParsingSessionWhereInput
    /**
     * Limit how many ParsingSessions to delete.
     */
    limit?: number
  }

  /**
   * ParsingSession without action
   */
  export type ParsingSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParsingSession
     */
    select?: ParsingSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParsingSession
     */
    omit?: ParsingSessionOmit<ExtArgs> | null
  }


  /**
   * Model AnimeCollection
   */

  export type AggregateAnimeCollection = {
    _count: AnimeCollectionCountAggregateOutputType | null
    _min: AnimeCollectionMinAggregateOutputType | null
    _max: AnimeCollectionMaxAggregateOutputType | null
  }

  export type AnimeCollectionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    description: string | null
    isPublic: boolean | null
    type: $Enums.AnimeCollectionType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnimeCollectionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    description: string | null
    isPublic: boolean | null
    type: $Enums.AnimeCollectionType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnimeCollectionCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    description: number
    isPublic: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AnimeCollectionMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    isPublic?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnimeCollectionMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    isPublic?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnimeCollectionCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    isPublic?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AnimeCollectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeCollection to aggregate.
     */
    where?: AnimeCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollections to fetch.
     */
    orderBy?: AnimeCollectionOrderByWithRelationInput | AnimeCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeCollections
    **/
    _count?: true | AnimeCollectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeCollectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeCollectionMaxAggregateInputType
  }

  export type GetAnimeCollectionAggregateType<T extends AnimeCollectionAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeCollection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeCollection[P]>
      : GetScalarType<T[P], AggregateAnimeCollection[P]>
  }




  export type AnimeCollectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeCollectionWhereInput
    orderBy?: AnimeCollectionOrderByWithAggregationInput | AnimeCollectionOrderByWithAggregationInput[]
    by: AnimeCollectionScalarFieldEnum[] | AnimeCollectionScalarFieldEnum
    having?: AnimeCollectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeCollectionCountAggregateInputType | true
    _min?: AnimeCollectionMinAggregateInputType
    _max?: AnimeCollectionMaxAggregateInputType
  }

  export type AnimeCollectionGroupByOutputType = {
    id: string
    userId: string
    title: string
    description: string | null
    isPublic: boolean
    type: $Enums.AnimeCollectionType
    createdAt: Date
    updatedAt: Date
    _count: AnimeCollectionCountAggregateOutputType | null
    _min: AnimeCollectionMinAggregateOutputType | null
    _max: AnimeCollectionMaxAggregateOutputType | null
  }

  type GetAnimeCollectionGroupByPayload<T extends AnimeCollectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeCollectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeCollectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeCollectionGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeCollectionGroupByOutputType[P]>
        }
      >
    >


  export type AnimeCollectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    isPublic?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | AnimeCollection$itemsArgs<ExtArgs>
    likes?: boolean | AnimeCollection$likesArgs<ExtArgs>
    _count?: boolean | AnimeCollectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeCollection"]>

  export type AnimeCollectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    isPublic?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeCollection"]>

  export type AnimeCollectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    isPublic?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeCollection"]>

  export type AnimeCollectionSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    isPublic?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AnimeCollectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "description" | "isPublic" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["animeCollection"]>
  export type AnimeCollectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | AnimeCollection$itemsArgs<ExtArgs>
    likes?: boolean | AnimeCollection$likesArgs<ExtArgs>
    _count?: boolean | AnimeCollectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AnimeCollectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AnimeCollectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AnimeCollectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeCollection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$AnimeInCollectionPayload<ExtArgs>[]
      likes: Prisma.$AnimeCollectionLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      description: string | null
      isPublic: boolean
      type: $Enums.AnimeCollectionType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["animeCollection"]>
    composites: {}
  }

  type AnimeCollectionGetPayload<S extends boolean | null | undefined | AnimeCollectionDefaultArgs> = $Result.GetResult<Prisma.$AnimeCollectionPayload, S>

  type AnimeCollectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeCollectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeCollectionCountAggregateInputType | true
    }

  export interface AnimeCollectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeCollection'], meta: { name: 'AnimeCollection' } }
    /**
     * Find zero or one AnimeCollection that matches the filter.
     * @param {AnimeCollectionFindUniqueArgs} args - Arguments to find a AnimeCollection
     * @example
     * // Get one AnimeCollection
     * const animeCollection = await prisma.animeCollection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeCollectionFindUniqueArgs>(args: SelectSubset<T, AnimeCollectionFindUniqueArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeCollection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeCollectionFindUniqueOrThrowArgs} args - Arguments to find a AnimeCollection
     * @example
     * // Get one AnimeCollection
     * const animeCollection = await prisma.animeCollection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeCollectionFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeCollectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeCollection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionFindFirstArgs} args - Arguments to find a AnimeCollection
     * @example
     * // Get one AnimeCollection
     * const animeCollection = await prisma.animeCollection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeCollectionFindFirstArgs>(args?: SelectSubset<T, AnimeCollectionFindFirstArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeCollection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionFindFirstOrThrowArgs} args - Arguments to find a AnimeCollection
     * @example
     * // Get one AnimeCollection
     * const animeCollection = await prisma.animeCollection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeCollectionFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeCollectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeCollections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeCollections
     * const animeCollections = await prisma.animeCollection.findMany()
     * 
     * // Get first 10 AnimeCollections
     * const animeCollections = await prisma.animeCollection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animeCollectionWithIdOnly = await prisma.animeCollection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnimeCollectionFindManyArgs>(args?: SelectSubset<T, AnimeCollectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeCollection.
     * @param {AnimeCollectionCreateArgs} args - Arguments to create a AnimeCollection.
     * @example
     * // Create one AnimeCollection
     * const AnimeCollection = await prisma.animeCollection.create({
     *   data: {
     *     // ... data to create a AnimeCollection
     *   }
     * })
     * 
     */
    create<T extends AnimeCollectionCreateArgs>(args: SelectSubset<T, AnimeCollectionCreateArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeCollections.
     * @param {AnimeCollectionCreateManyArgs} args - Arguments to create many AnimeCollections.
     * @example
     * // Create many AnimeCollections
     * const animeCollection = await prisma.animeCollection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeCollectionCreateManyArgs>(args?: SelectSubset<T, AnimeCollectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeCollections and returns the data saved in the database.
     * @param {AnimeCollectionCreateManyAndReturnArgs} args - Arguments to create many AnimeCollections.
     * @example
     * // Create many AnimeCollections
     * const animeCollection = await prisma.animeCollection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeCollections and only return the `id`
     * const animeCollectionWithIdOnly = await prisma.animeCollection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeCollectionCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeCollectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeCollection.
     * @param {AnimeCollectionDeleteArgs} args - Arguments to delete one AnimeCollection.
     * @example
     * // Delete one AnimeCollection
     * const AnimeCollection = await prisma.animeCollection.delete({
     *   where: {
     *     // ... filter to delete one AnimeCollection
     *   }
     * })
     * 
     */
    delete<T extends AnimeCollectionDeleteArgs>(args: SelectSubset<T, AnimeCollectionDeleteArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeCollection.
     * @param {AnimeCollectionUpdateArgs} args - Arguments to update one AnimeCollection.
     * @example
     * // Update one AnimeCollection
     * const animeCollection = await prisma.animeCollection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeCollectionUpdateArgs>(args: SelectSubset<T, AnimeCollectionUpdateArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeCollections.
     * @param {AnimeCollectionDeleteManyArgs} args - Arguments to filter AnimeCollections to delete.
     * @example
     * // Delete a few AnimeCollections
     * const { count } = await prisma.animeCollection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeCollectionDeleteManyArgs>(args?: SelectSubset<T, AnimeCollectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeCollections
     * const animeCollection = await prisma.animeCollection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeCollectionUpdateManyArgs>(args: SelectSubset<T, AnimeCollectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeCollections and returns the data updated in the database.
     * @param {AnimeCollectionUpdateManyAndReturnArgs} args - Arguments to update many AnimeCollections.
     * @example
     * // Update many AnimeCollections
     * const animeCollection = await prisma.animeCollection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeCollections and only return the `id`
     * const animeCollectionWithIdOnly = await prisma.animeCollection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeCollectionUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeCollectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeCollection.
     * @param {AnimeCollectionUpsertArgs} args - Arguments to update or create a AnimeCollection.
     * @example
     * // Update or create a AnimeCollection
     * const animeCollection = await prisma.animeCollection.upsert({
     *   create: {
     *     // ... data to create a AnimeCollection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeCollection we want to update
     *   }
     * })
     */
    upsert<T extends AnimeCollectionUpsertArgs>(args: SelectSubset<T, AnimeCollectionUpsertArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionCountArgs} args - Arguments to filter AnimeCollections to count.
     * @example
     * // Count the number of AnimeCollections
     * const count = await prisma.animeCollection.count({
     *   where: {
     *     // ... the filter for the AnimeCollections we want to count
     *   }
     * })
    **/
    count<T extends AnimeCollectionCountArgs>(
      args?: Subset<T, AnimeCollectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeCollectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeCollection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeCollectionAggregateArgs>(args: Subset<T, AnimeCollectionAggregateArgs>): Prisma.PrismaPromise<GetAnimeCollectionAggregateType<T>>

    /**
     * Group by AnimeCollection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeCollectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeCollectionGroupByArgs['orderBy'] }
        : { orderBy?: AnimeCollectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeCollectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeCollectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeCollection model
   */
  readonly fields: AnimeCollectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeCollection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeCollectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends AnimeCollection$itemsArgs<ExtArgs> = {}>(args?: Subset<T, AnimeCollection$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends AnimeCollection$likesArgs<ExtArgs> = {}>(args?: Subset<T, AnimeCollection$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeCollection model
   */
  interface AnimeCollectionFieldRefs {
    readonly id: FieldRef<"AnimeCollection", 'String'>
    readonly userId: FieldRef<"AnimeCollection", 'String'>
    readonly title: FieldRef<"AnimeCollection", 'String'>
    readonly description: FieldRef<"AnimeCollection", 'String'>
    readonly isPublic: FieldRef<"AnimeCollection", 'Boolean'>
    readonly type: FieldRef<"AnimeCollection", 'AnimeCollectionType'>
    readonly createdAt: FieldRef<"AnimeCollection", 'DateTime'>
    readonly updatedAt: FieldRef<"AnimeCollection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnimeCollection findUnique
   */
  export type AnimeCollectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollection to fetch.
     */
    where: AnimeCollectionWhereUniqueInput
  }

  /**
   * AnimeCollection findUniqueOrThrow
   */
  export type AnimeCollectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollection to fetch.
     */
    where: AnimeCollectionWhereUniqueInput
  }

  /**
   * AnimeCollection findFirst
   */
  export type AnimeCollectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollection to fetch.
     */
    where?: AnimeCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollections to fetch.
     */
    orderBy?: AnimeCollectionOrderByWithRelationInput | AnimeCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeCollections.
     */
    cursor?: AnimeCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeCollections.
     */
    distinct?: AnimeCollectionScalarFieldEnum | AnimeCollectionScalarFieldEnum[]
  }

  /**
   * AnimeCollection findFirstOrThrow
   */
  export type AnimeCollectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollection to fetch.
     */
    where?: AnimeCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollections to fetch.
     */
    orderBy?: AnimeCollectionOrderByWithRelationInput | AnimeCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeCollections.
     */
    cursor?: AnimeCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeCollections.
     */
    distinct?: AnimeCollectionScalarFieldEnum | AnimeCollectionScalarFieldEnum[]
  }

  /**
   * AnimeCollection findMany
   */
  export type AnimeCollectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollections to fetch.
     */
    where?: AnimeCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollections to fetch.
     */
    orderBy?: AnimeCollectionOrderByWithRelationInput | AnimeCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeCollections.
     */
    cursor?: AnimeCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollections.
     */
    skip?: number
    distinct?: AnimeCollectionScalarFieldEnum | AnimeCollectionScalarFieldEnum[]
  }

  /**
   * AnimeCollection create
   */
  export type AnimeCollectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeCollection.
     */
    data: XOR<AnimeCollectionCreateInput, AnimeCollectionUncheckedCreateInput>
  }

  /**
   * AnimeCollection createMany
   */
  export type AnimeCollectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeCollections.
     */
    data: AnimeCollectionCreateManyInput | AnimeCollectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeCollection createManyAndReturn
   */
  export type AnimeCollectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeCollections.
     */
    data: AnimeCollectionCreateManyInput | AnimeCollectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeCollection update
   */
  export type AnimeCollectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeCollection.
     */
    data: XOR<AnimeCollectionUpdateInput, AnimeCollectionUncheckedUpdateInput>
    /**
     * Choose, which AnimeCollection to update.
     */
    where: AnimeCollectionWhereUniqueInput
  }

  /**
   * AnimeCollection updateMany
   */
  export type AnimeCollectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeCollections.
     */
    data: XOR<AnimeCollectionUpdateManyMutationInput, AnimeCollectionUncheckedUpdateManyInput>
    /**
     * Filter which AnimeCollections to update
     */
    where?: AnimeCollectionWhereInput
    /**
     * Limit how many AnimeCollections to update.
     */
    limit?: number
  }

  /**
   * AnimeCollection updateManyAndReturn
   */
  export type AnimeCollectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * The data used to update AnimeCollections.
     */
    data: XOR<AnimeCollectionUpdateManyMutationInput, AnimeCollectionUncheckedUpdateManyInput>
    /**
     * Filter which AnimeCollections to update
     */
    where?: AnimeCollectionWhereInput
    /**
     * Limit how many AnimeCollections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeCollection upsert
   */
  export type AnimeCollectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeCollection to update in case it exists.
     */
    where: AnimeCollectionWhereUniqueInput
    /**
     * In case the AnimeCollection found by the `where` argument doesn't exist, create a new AnimeCollection with this data.
     */
    create: XOR<AnimeCollectionCreateInput, AnimeCollectionUncheckedCreateInput>
    /**
     * In case the AnimeCollection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeCollectionUpdateInput, AnimeCollectionUncheckedUpdateInput>
  }

  /**
   * AnimeCollection delete
   */
  export type AnimeCollectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    /**
     * Filter which AnimeCollection to delete.
     */
    where: AnimeCollectionWhereUniqueInput
  }

  /**
   * AnimeCollection deleteMany
   */
  export type AnimeCollectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeCollections to delete
     */
    where?: AnimeCollectionWhereInput
    /**
     * Limit how many AnimeCollections to delete.
     */
    limit?: number
  }

  /**
   * AnimeCollection.items
   */
  export type AnimeCollection$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    where?: AnimeInCollectionWhereInput
    orderBy?: AnimeInCollectionOrderByWithRelationInput | AnimeInCollectionOrderByWithRelationInput[]
    cursor?: AnimeInCollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeInCollectionScalarFieldEnum | AnimeInCollectionScalarFieldEnum[]
  }

  /**
   * AnimeCollection.likes
   */
  export type AnimeCollection$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    where?: AnimeCollectionLikeWhereInput
    orderBy?: AnimeCollectionLikeOrderByWithRelationInput | AnimeCollectionLikeOrderByWithRelationInput[]
    cursor?: AnimeCollectionLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeCollectionLikeScalarFieldEnum | AnimeCollectionLikeScalarFieldEnum[]
  }

  /**
   * AnimeCollection without action
   */
  export type AnimeCollectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
  }


  /**
   * Model AnimeInCollection
   */

  export type AggregateAnimeInCollection = {
    _count: AnimeInCollectionCountAggregateOutputType | null
    _min: AnimeInCollectionMinAggregateOutputType | null
    _max: AnimeInCollectionMaxAggregateOutputType | null
  }

  export type AnimeInCollectionMinAggregateOutputType = {
    collectionId: string | null
    animeId: string | null
    note: string | null
    addedAt: Date | null
  }

  export type AnimeInCollectionMaxAggregateOutputType = {
    collectionId: string | null
    animeId: string | null
    note: string | null
    addedAt: Date | null
  }

  export type AnimeInCollectionCountAggregateOutputType = {
    collectionId: number
    animeId: number
    note: number
    addedAt: number
    _all: number
  }


  export type AnimeInCollectionMinAggregateInputType = {
    collectionId?: true
    animeId?: true
    note?: true
    addedAt?: true
  }

  export type AnimeInCollectionMaxAggregateInputType = {
    collectionId?: true
    animeId?: true
    note?: true
    addedAt?: true
  }

  export type AnimeInCollectionCountAggregateInputType = {
    collectionId?: true
    animeId?: true
    note?: true
    addedAt?: true
    _all?: true
  }

  export type AnimeInCollectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeInCollection to aggregate.
     */
    where?: AnimeInCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeInCollections to fetch.
     */
    orderBy?: AnimeInCollectionOrderByWithRelationInput | AnimeInCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeInCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeInCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeInCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeInCollections
    **/
    _count?: true | AnimeInCollectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeInCollectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeInCollectionMaxAggregateInputType
  }

  export type GetAnimeInCollectionAggregateType<T extends AnimeInCollectionAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeInCollection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeInCollection[P]>
      : GetScalarType<T[P], AggregateAnimeInCollection[P]>
  }




  export type AnimeInCollectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeInCollectionWhereInput
    orderBy?: AnimeInCollectionOrderByWithAggregationInput | AnimeInCollectionOrderByWithAggregationInput[]
    by: AnimeInCollectionScalarFieldEnum[] | AnimeInCollectionScalarFieldEnum
    having?: AnimeInCollectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeInCollectionCountAggregateInputType | true
    _min?: AnimeInCollectionMinAggregateInputType
    _max?: AnimeInCollectionMaxAggregateInputType
  }

  export type AnimeInCollectionGroupByOutputType = {
    collectionId: string
    animeId: string
    note: string | null
    addedAt: Date
    _count: AnimeInCollectionCountAggregateOutputType | null
    _min: AnimeInCollectionMinAggregateOutputType | null
    _max: AnimeInCollectionMaxAggregateOutputType | null
  }

  type GetAnimeInCollectionGroupByPayload<T extends AnimeInCollectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeInCollectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeInCollectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeInCollectionGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeInCollectionGroupByOutputType[P]>
        }
      >
    >


  export type AnimeInCollectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    collectionId?: boolean
    animeId?: boolean
    note?: boolean
    addedAt?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeInCollection"]>

  export type AnimeInCollectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    collectionId?: boolean
    animeId?: boolean
    note?: boolean
    addedAt?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeInCollection"]>

  export type AnimeInCollectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    collectionId?: boolean
    animeId?: boolean
    note?: boolean
    addedAt?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeInCollection"]>

  export type AnimeInCollectionSelectScalar = {
    collectionId?: boolean
    animeId?: boolean
    note?: boolean
    addedAt?: boolean
  }

  export type AnimeInCollectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"collectionId" | "animeId" | "note" | "addedAt", ExtArgs["result"]["animeInCollection"]>
  export type AnimeInCollectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }
  export type AnimeInCollectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }
  export type AnimeInCollectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }

  export type $AnimeInCollectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeInCollection"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      collection: Prisma.$AnimeCollectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      collectionId: string
      animeId: string
      note: string | null
      addedAt: Date
    }, ExtArgs["result"]["animeInCollection"]>
    composites: {}
  }

  type AnimeInCollectionGetPayload<S extends boolean | null | undefined | AnimeInCollectionDefaultArgs> = $Result.GetResult<Prisma.$AnimeInCollectionPayload, S>

  type AnimeInCollectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeInCollectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeInCollectionCountAggregateInputType | true
    }

  export interface AnimeInCollectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeInCollection'], meta: { name: 'AnimeInCollection' } }
    /**
     * Find zero or one AnimeInCollection that matches the filter.
     * @param {AnimeInCollectionFindUniqueArgs} args - Arguments to find a AnimeInCollection
     * @example
     * // Get one AnimeInCollection
     * const animeInCollection = await prisma.animeInCollection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeInCollectionFindUniqueArgs>(args: SelectSubset<T, AnimeInCollectionFindUniqueArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeInCollection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeInCollectionFindUniqueOrThrowArgs} args - Arguments to find a AnimeInCollection
     * @example
     * // Get one AnimeInCollection
     * const animeInCollection = await prisma.animeInCollection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeInCollectionFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeInCollectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeInCollection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeInCollectionFindFirstArgs} args - Arguments to find a AnimeInCollection
     * @example
     * // Get one AnimeInCollection
     * const animeInCollection = await prisma.animeInCollection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeInCollectionFindFirstArgs>(args?: SelectSubset<T, AnimeInCollectionFindFirstArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeInCollection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeInCollectionFindFirstOrThrowArgs} args - Arguments to find a AnimeInCollection
     * @example
     * // Get one AnimeInCollection
     * const animeInCollection = await prisma.animeInCollection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeInCollectionFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeInCollectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeInCollections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeInCollectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeInCollections
     * const animeInCollections = await prisma.animeInCollection.findMany()
     * 
     * // Get first 10 AnimeInCollections
     * const animeInCollections = await prisma.animeInCollection.findMany({ take: 10 })
     * 
     * // Only select the `collectionId`
     * const animeInCollectionWithCollectionIdOnly = await prisma.animeInCollection.findMany({ select: { collectionId: true } })
     * 
     */
    findMany<T extends AnimeInCollectionFindManyArgs>(args?: SelectSubset<T, AnimeInCollectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeInCollection.
     * @param {AnimeInCollectionCreateArgs} args - Arguments to create a AnimeInCollection.
     * @example
     * // Create one AnimeInCollection
     * const AnimeInCollection = await prisma.animeInCollection.create({
     *   data: {
     *     // ... data to create a AnimeInCollection
     *   }
     * })
     * 
     */
    create<T extends AnimeInCollectionCreateArgs>(args: SelectSubset<T, AnimeInCollectionCreateArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeInCollections.
     * @param {AnimeInCollectionCreateManyArgs} args - Arguments to create many AnimeInCollections.
     * @example
     * // Create many AnimeInCollections
     * const animeInCollection = await prisma.animeInCollection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeInCollectionCreateManyArgs>(args?: SelectSubset<T, AnimeInCollectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeInCollections and returns the data saved in the database.
     * @param {AnimeInCollectionCreateManyAndReturnArgs} args - Arguments to create many AnimeInCollections.
     * @example
     * // Create many AnimeInCollections
     * const animeInCollection = await prisma.animeInCollection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeInCollections and only return the `collectionId`
     * const animeInCollectionWithCollectionIdOnly = await prisma.animeInCollection.createManyAndReturn({
     *   select: { collectionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeInCollectionCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeInCollectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeInCollection.
     * @param {AnimeInCollectionDeleteArgs} args - Arguments to delete one AnimeInCollection.
     * @example
     * // Delete one AnimeInCollection
     * const AnimeInCollection = await prisma.animeInCollection.delete({
     *   where: {
     *     // ... filter to delete one AnimeInCollection
     *   }
     * })
     * 
     */
    delete<T extends AnimeInCollectionDeleteArgs>(args: SelectSubset<T, AnimeInCollectionDeleteArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeInCollection.
     * @param {AnimeInCollectionUpdateArgs} args - Arguments to update one AnimeInCollection.
     * @example
     * // Update one AnimeInCollection
     * const animeInCollection = await prisma.animeInCollection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeInCollectionUpdateArgs>(args: SelectSubset<T, AnimeInCollectionUpdateArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeInCollections.
     * @param {AnimeInCollectionDeleteManyArgs} args - Arguments to filter AnimeInCollections to delete.
     * @example
     * // Delete a few AnimeInCollections
     * const { count } = await prisma.animeInCollection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeInCollectionDeleteManyArgs>(args?: SelectSubset<T, AnimeInCollectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeInCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeInCollectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeInCollections
     * const animeInCollection = await prisma.animeInCollection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeInCollectionUpdateManyArgs>(args: SelectSubset<T, AnimeInCollectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeInCollections and returns the data updated in the database.
     * @param {AnimeInCollectionUpdateManyAndReturnArgs} args - Arguments to update many AnimeInCollections.
     * @example
     * // Update many AnimeInCollections
     * const animeInCollection = await prisma.animeInCollection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeInCollections and only return the `collectionId`
     * const animeInCollectionWithCollectionIdOnly = await prisma.animeInCollection.updateManyAndReturn({
     *   select: { collectionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeInCollectionUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeInCollectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeInCollection.
     * @param {AnimeInCollectionUpsertArgs} args - Arguments to update or create a AnimeInCollection.
     * @example
     * // Update or create a AnimeInCollection
     * const animeInCollection = await prisma.animeInCollection.upsert({
     *   create: {
     *     // ... data to create a AnimeInCollection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeInCollection we want to update
     *   }
     * })
     */
    upsert<T extends AnimeInCollectionUpsertArgs>(args: SelectSubset<T, AnimeInCollectionUpsertArgs<ExtArgs>>): Prisma__AnimeInCollectionClient<$Result.GetResult<Prisma.$AnimeInCollectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeInCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeInCollectionCountArgs} args - Arguments to filter AnimeInCollections to count.
     * @example
     * // Count the number of AnimeInCollections
     * const count = await prisma.animeInCollection.count({
     *   where: {
     *     // ... the filter for the AnimeInCollections we want to count
     *   }
     * })
    **/
    count<T extends AnimeInCollectionCountArgs>(
      args?: Subset<T, AnimeInCollectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeInCollectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeInCollection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeInCollectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeInCollectionAggregateArgs>(args: Subset<T, AnimeInCollectionAggregateArgs>): Prisma.PrismaPromise<GetAnimeInCollectionAggregateType<T>>

    /**
     * Group by AnimeInCollection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeInCollectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeInCollectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeInCollectionGroupByArgs['orderBy'] }
        : { orderBy?: AnimeInCollectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeInCollectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeInCollectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeInCollection model
   */
  readonly fields: AnimeInCollectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeInCollection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeInCollectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    collection<T extends AnimeCollectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeCollectionDefaultArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeInCollection model
   */
  interface AnimeInCollectionFieldRefs {
    readonly collectionId: FieldRef<"AnimeInCollection", 'String'>
    readonly animeId: FieldRef<"AnimeInCollection", 'String'>
    readonly note: FieldRef<"AnimeInCollection", 'String'>
    readonly addedAt: FieldRef<"AnimeInCollection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnimeInCollection findUnique
   */
  export type AnimeInCollectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeInCollection to fetch.
     */
    where: AnimeInCollectionWhereUniqueInput
  }

  /**
   * AnimeInCollection findUniqueOrThrow
   */
  export type AnimeInCollectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeInCollection to fetch.
     */
    where: AnimeInCollectionWhereUniqueInput
  }

  /**
   * AnimeInCollection findFirst
   */
  export type AnimeInCollectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeInCollection to fetch.
     */
    where?: AnimeInCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeInCollections to fetch.
     */
    orderBy?: AnimeInCollectionOrderByWithRelationInput | AnimeInCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeInCollections.
     */
    cursor?: AnimeInCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeInCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeInCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeInCollections.
     */
    distinct?: AnimeInCollectionScalarFieldEnum | AnimeInCollectionScalarFieldEnum[]
  }

  /**
   * AnimeInCollection findFirstOrThrow
   */
  export type AnimeInCollectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeInCollection to fetch.
     */
    where?: AnimeInCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeInCollections to fetch.
     */
    orderBy?: AnimeInCollectionOrderByWithRelationInput | AnimeInCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeInCollections.
     */
    cursor?: AnimeInCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeInCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeInCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeInCollections.
     */
    distinct?: AnimeInCollectionScalarFieldEnum | AnimeInCollectionScalarFieldEnum[]
  }

  /**
   * AnimeInCollection findMany
   */
  export type AnimeInCollectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * Filter, which AnimeInCollections to fetch.
     */
    where?: AnimeInCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeInCollections to fetch.
     */
    orderBy?: AnimeInCollectionOrderByWithRelationInput | AnimeInCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeInCollections.
     */
    cursor?: AnimeInCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeInCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeInCollections.
     */
    skip?: number
    distinct?: AnimeInCollectionScalarFieldEnum | AnimeInCollectionScalarFieldEnum[]
  }

  /**
   * AnimeInCollection create
   */
  export type AnimeInCollectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeInCollection.
     */
    data: XOR<AnimeInCollectionCreateInput, AnimeInCollectionUncheckedCreateInput>
  }

  /**
   * AnimeInCollection createMany
   */
  export type AnimeInCollectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeInCollections.
     */
    data: AnimeInCollectionCreateManyInput | AnimeInCollectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeInCollection createManyAndReturn
   */
  export type AnimeInCollectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeInCollections.
     */
    data: AnimeInCollectionCreateManyInput | AnimeInCollectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeInCollection update
   */
  export type AnimeInCollectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeInCollection.
     */
    data: XOR<AnimeInCollectionUpdateInput, AnimeInCollectionUncheckedUpdateInput>
    /**
     * Choose, which AnimeInCollection to update.
     */
    where: AnimeInCollectionWhereUniqueInput
  }

  /**
   * AnimeInCollection updateMany
   */
  export type AnimeInCollectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeInCollections.
     */
    data: XOR<AnimeInCollectionUpdateManyMutationInput, AnimeInCollectionUncheckedUpdateManyInput>
    /**
     * Filter which AnimeInCollections to update
     */
    where?: AnimeInCollectionWhereInput
    /**
     * Limit how many AnimeInCollections to update.
     */
    limit?: number
  }

  /**
   * AnimeInCollection updateManyAndReturn
   */
  export type AnimeInCollectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * The data used to update AnimeInCollections.
     */
    data: XOR<AnimeInCollectionUpdateManyMutationInput, AnimeInCollectionUncheckedUpdateManyInput>
    /**
     * Filter which AnimeInCollections to update
     */
    where?: AnimeInCollectionWhereInput
    /**
     * Limit how many AnimeInCollections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeInCollection upsert
   */
  export type AnimeInCollectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeInCollection to update in case it exists.
     */
    where: AnimeInCollectionWhereUniqueInput
    /**
     * In case the AnimeInCollection found by the `where` argument doesn't exist, create a new AnimeInCollection with this data.
     */
    create: XOR<AnimeInCollectionCreateInput, AnimeInCollectionUncheckedCreateInput>
    /**
     * In case the AnimeInCollection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeInCollectionUpdateInput, AnimeInCollectionUncheckedUpdateInput>
  }

  /**
   * AnimeInCollection delete
   */
  export type AnimeInCollectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
    /**
     * Filter which AnimeInCollection to delete.
     */
    where: AnimeInCollectionWhereUniqueInput
  }

  /**
   * AnimeInCollection deleteMany
   */
  export type AnimeInCollectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeInCollections to delete
     */
    where?: AnimeInCollectionWhereInput
    /**
     * Limit how many AnimeInCollections to delete.
     */
    limit?: number
  }

  /**
   * AnimeInCollection without action
   */
  export type AnimeInCollectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeInCollection
     */
    select?: AnimeInCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeInCollection
     */
    omit?: AnimeInCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInCollectionInclude<ExtArgs> | null
  }


  /**
   * Model AnimeCollectionLike
   */

  export type AggregateAnimeCollectionLike = {
    _count: AnimeCollectionLikeCountAggregateOutputType | null
    _min: AnimeCollectionLikeMinAggregateOutputType | null
    _max: AnimeCollectionLikeMaxAggregateOutputType | null
  }

  export type AnimeCollectionLikeMinAggregateOutputType = {
    userId: string | null
    collectionId: string | null
    likedAt: Date | null
  }

  export type AnimeCollectionLikeMaxAggregateOutputType = {
    userId: string | null
    collectionId: string | null
    likedAt: Date | null
  }

  export type AnimeCollectionLikeCountAggregateOutputType = {
    userId: number
    collectionId: number
    likedAt: number
    _all: number
  }


  export type AnimeCollectionLikeMinAggregateInputType = {
    userId?: true
    collectionId?: true
    likedAt?: true
  }

  export type AnimeCollectionLikeMaxAggregateInputType = {
    userId?: true
    collectionId?: true
    likedAt?: true
  }

  export type AnimeCollectionLikeCountAggregateInputType = {
    userId?: true
    collectionId?: true
    likedAt?: true
    _all?: true
  }

  export type AnimeCollectionLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeCollectionLike to aggregate.
     */
    where?: AnimeCollectionLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollectionLikes to fetch.
     */
    orderBy?: AnimeCollectionLikeOrderByWithRelationInput | AnimeCollectionLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeCollectionLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollectionLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollectionLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeCollectionLikes
    **/
    _count?: true | AnimeCollectionLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeCollectionLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeCollectionLikeMaxAggregateInputType
  }

  export type GetAnimeCollectionLikeAggregateType<T extends AnimeCollectionLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeCollectionLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeCollectionLike[P]>
      : GetScalarType<T[P], AggregateAnimeCollectionLike[P]>
  }




  export type AnimeCollectionLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeCollectionLikeWhereInput
    orderBy?: AnimeCollectionLikeOrderByWithAggregationInput | AnimeCollectionLikeOrderByWithAggregationInput[]
    by: AnimeCollectionLikeScalarFieldEnum[] | AnimeCollectionLikeScalarFieldEnum
    having?: AnimeCollectionLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeCollectionLikeCountAggregateInputType | true
    _min?: AnimeCollectionLikeMinAggregateInputType
    _max?: AnimeCollectionLikeMaxAggregateInputType
  }

  export type AnimeCollectionLikeGroupByOutputType = {
    userId: string
    collectionId: string
    likedAt: Date
    _count: AnimeCollectionLikeCountAggregateOutputType | null
    _min: AnimeCollectionLikeMinAggregateOutputType | null
    _max: AnimeCollectionLikeMaxAggregateOutputType | null
  }

  type GetAnimeCollectionLikeGroupByPayload<T extends AnimeCollectionLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeCollectionLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeCollectionLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeCollectionLikeGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeCollectionLikeGroupByOutputType[P]>
        }
      >
    >


  export type AnimeCollectionLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    collectionId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeCollectionLike"]>

  export type AnimeCollectionLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    collectionId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeCollectionLike"]>

  export type AnimeCollectionLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    collectionId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeCollectionLike"]>

  export type AnimeCollectionLikeSelectScalar = {
    userId?: boolean
    collectionId?: boolean
    likedAt?: boolean
  }

  export type AnimeCollectionLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "collectionId" | "likedAt", ExtArgs["result"]["animeCollectionLike"]>
  export type AnimeCollectionLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }
  export type AnimeCollectionLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }
  export type AnimeCollectionLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    collection?: boolean | AnimeCollectionDefaultArgs<ExtArgs>
  }

  export type $AnimeCollectionLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeCollectionLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      collection: Prisma.$AnimeCollectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      collectionId: string
      likedAt: Date
    }, ExtArgs["result"]["animeCollectionLike"]>
    composites: {}
  }

  type AnimeCollectionLikeGetPayload<S extends boolean | null | undefined | AnimeCollectionLikeDefaultArgs> = $Result.GetResult<Prisma.$AnimeCollectionLikePayload, S>

  type AnimeCollectionLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeCollectionLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeCollectionLikeCountAggregateInputType | true
    }

  export interface AnimeCollectionLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeCollectionLike'], meta: { name: 'AnimeCollectionLike' } }
    /**
     * Find zero or one AnimeCollectionLike that matches the filter.
     * @param {AnimeCollectionLikeFindUniqueArgs} args - Arguments to find a AnimeCollectionLike
     * @example
     * // Get one AnimeCollectionLike
     * const animeCollectionLike = await prisma.animeCollectionLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeCollectionLikeFindUniqueArgs>(args: SelectSubset<T, AnimeCollectionLikeFindUniqueArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeCollectionLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeCollectionLikeFindUniqueOrThrowArgs} args - Arguments to find a AnimeCollectionLike
     * @example
     * // Get one AnimeCollectionLike
     * const animeCollectionLike = await prisma.animeCollectionLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeCollectionLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeCollectionLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeCollectionLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionLikeFindFirstArgs} args - Arguments to find a AnimeCollectionLike
     * @example
     * // Get one AnimeCollectionLike
     * const animeCollectionLike = await prisma.animeCollectionLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeCollectionLikeFindFirstArgs>(args?: SelectSubset<T, AnimeCollectionLikeFindFirstArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeCollectionLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionLikeFindFirstOrThrowArgs} args - Arguments to find a AnimeCollectionLike
     * @example
     * // Get one AnimeCollectionLike
     * const animeCollectionLike = await prisma.animeCollectionLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeCollectionLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeCollectionLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeCollectionLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeCollectionLikes
     * const animeCollectionLikes = await prisma.animeCollectionLike.findMany()
     * 
     * // Get first 10 AnimeCollectionLikes
     * const animeCollectionLikes = await prisma.animeCollectionLike.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const animeCollectionLikeWithUserIdOnly = await prisma.animeCollectionLike.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends AnimeCollectionLikeFindManyArgs>(args?: SelectSubset<T, AnimeCollectionLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeCollectionLike.
     * @param {AnimeCollectionLikeCreateArgs} args - Arguments to create a AnimeCollectionLike.
     * @example
     * // Create one AnimeCollectionLike
     * const AnimeCollectionLike = await prisma.animeCollectionLike.create({
     *   data: {
     *     // ... data to create a AnimeCollectionLike
     *   }
     * })
     * 
     */
    create<T extends AnimeCollectionLikeCreateArgs>(args: SelectSubset<T, AnimeCollectionLikeCreateArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeCollectionLikes.
     * @param {AnimeCollectionLikeCreateManyArgs} args - Arguments to create many AnimeCollectionLikes.
     * @example
     * // Create many AnimeCollectionLikes
     * const animeCollectionLike = await prisma.animeCollectionLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeCollectionLikeCreateManyArgs>(args?: SelectSubset<T, AnimeCollectionLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeCollectionLikes and returns the data saved in the database.
     * @param {AnimeCollectionLikeCreateManyAndReturnArgs} args - Arguments to create many AnimeCollectionLikes.
     * @example
     * // Create many AnimeCollectionLikes
     * const animeCollectionLike = await prisma.animeCollectionLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeCollectionLikes and only return the `userId`
     * const animeCollectionLikeWithUserIdOnly = await prisma.animeCollectionLike.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeCollectionLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeCollectionLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeCollectionLike.
     * @param {AnimeCollectionLikeDeleteArgs} args - Arguments to delete one AnimeCollectionLike.
     * @example
     * // Delete one AnimeCollectionLike
     * const AnimeCollectionLike = await prisma.animeCollectionLike.delete({
     *   where: {
     *     // ... filter to delete one AnimeCollectionLike
     *   }
     * })
     * 
     */
    delete<T extends AnimeCollectionLikeDeleteArgs>(args: SelectSubset<T, AnimeCollectionLikeDeleteArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeCollectionLike.
     * @param {AnimeCollectionLikeUpdateArgs} args - Arguments to update one AnimeCollectionLike.
     * @example
     * // Update one AnimeCollectionLike
     * const animeCollectionLike = await prisma.animeCollectionLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeCollectionLikeUpdateArgs>(args: SelectSubset<T, AnimeCollectionLikeUpdateArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeCollectionLikes.
     * @param {AnimeCollectionLikeDeleteManyArgs} args - Arguments to filter AnimeCollectionLikes to delete.
     * @example
     * // Delete a few AnimeCollectionLikes
     * const { count } = await prisma.animeCollectionLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeCollectionLikeDeleteManyArgs>(args?: SelectSubset<T, AnimeCollectionLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeCollectionLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeCollectionLikes
     * const animeCollectionLike = await prisma.animeCollectionLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeCollectionLikeUpdateManyArgs>(args: SelectSubset<T, AnimeCollectionLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeCollectionLikes and returns the data updated in the database.
     * @param {AnimeCollectionLikeUpdateManyAndReturnArgs} args - Arguments to update many AnimeCollectionLikes.
     * @example
     * // Update many AnimeCollectionLikes
     * const animeCollectionLike = await prisma.animeCollectionLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeCollectionLikes and only return the `userId`
     * const animeCollectionLikeWithUserIdOnly = await prisma.animeCollectionLike.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeCollectionLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeCollectionLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeCollectionLike.
     * @param {AnimeCollectionLikeUpsertArgs} args - Arguments to update or create a AnimeCollectionLike.
     * @example
     * // Update or create a AnimeCollectionLike
     * const animeCollectionLike = await prisma.animeCollectionLike.upsert({
     *   create: {
     *     // ... data to create a AnimeCollectionLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeCollectionLike we want to update
     *   }
     * })
     */
    upsert<T extends AnimeCollectionLikeUpsertArgs>(args: SelectSubset<T, AnimeCollectionLikeUpsertArgs<ExtArgs>>): Prisma__AnimeCollectionLikeClient<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeCollectionLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionLikeCountArgs} args - Arguments to filter AnimeCollectionLikes to count.
     * @example
     * // Count the number of AnimeCollectionLikes
     * const count = await prisma.animeCollectionLike.count({
     *   where: {
     *     // ... the filter for the AnimeCollectionLikes we want to count
     *   }
     * })
    **/
    count<T extends AnimeCollectionLikeCountArgs>(
      args?: Subset<T, AnimeCollectionLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeCollectionLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeCollectionLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeCollectionLikeAggregateArgs>(args: Subset<T, AnimeCollectionLikeAggregateArgs>): Prisma.PrismaPromise<GetAnimeCollectionLikeAggregateType<T>>

    /**
     * Group by AnimeCollectionLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCollectionLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeCollectionLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeCollectionLikeGroupByArgs['orderBy'] }
        : { orderBy?: AnimeCollectionLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeCollectionLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeCollectionLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeCollectionLike model
   */
  readonly fields: AnimeCollectionLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeCollectionLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeCollectionLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    collection<T extends AnimeCollectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeCollectionDefaultArgs<ExtArgs>>): Prisma__AnimeCollectionClient<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeCollectionLike model
   */
  interface AnimeCollectionLikeFieldRefs {
    readonly userId: FieldRef<"AnimeCollectionLike", 'String'>
    readonly collectionId: FieldRef<"AnimeCollectionLike", 'String'>
    readonly likedAt: FieldRef<"AnimeCollectionLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnimeCollectionLike findUnique
   */
  export type AnimeCollectionLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollectionLike to fetch.
     */
    where: AnimeCollectionLikeWhereUniqueInput
  }

  /**
   * AnimeCollectionLike findUniqueOrThrow
   */
  export type AnimeCollectionLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollectionLike to fetch.
     */
    where: AnimeCollectionLikeWhereUniqueInput
  }

  /**
   * AnimeCollectionLike findFirst
   */
  export type AnimeCollectionLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollectionLike to fetch.
     */
    where?: AnimeCollectionLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollectionLikes to fetch.
     */
    orderBy?: AnimeCollectionLikeOrderByWithRelationInput | AnimeCollectionLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeCollectionLikes.
     */
    cursor?: AnimeCollectionLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollectionLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollectionLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeCollectionLikes.
     */
    distinct?: AnimeCollectionLikeScalarFieldEnum | AnimeCollectionLikeScalarFieldEnum[]
  }

  /**
   * AnimeCollectionLike findFirstOrThrow
   */
  export type AnimeCollectionLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollectionLike to fetch.
     */
    where?: AnimeCollectionLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollectionLikes to fetch.
     */
    orderBy?: AnimeCollectionLikeOrderByWithRelationInput | AnimeCollectionLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeCollectionLikes.
     */
    cursor?: AnimeCollectionLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollectionLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollectionLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeCollectionLikes.
     */
    distinct?: AnimeCollectionLikeScalarFieldEnum | AnimeCollectionLikeScalarFieldEnum[]
  }

  /**
   * AnimeCollectionLike findMany
   */
  export type AnimeCollectionLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * Filter, which AnimeCollectionLikes to fetch.
     */
    where?: AnimeCollectionLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeCollectionLikes to fetch.
     */
    orderBy?: AnimeCollectionLikeOrderByWithRelationInput | AnimeCollectionLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeCollectionLikes.
     */
    cursor?: AnimeCollectionLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeCollectionLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeCollectionLikes.
     */
    skip?: number
    distinct?: AnimeCollectionLikeScalarFieldEnum | AnimeCollectionLikeScalarFieldEnum[]
  }

  /**
   * AnimeCollectionLike create
   */
  export type AnimeCollectionLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeCollectionLike.
     */
    data: XOR<AnimeCollectionLikeCreateInput, AnimeCollectionLikeUncheckedCreateInput>
  }

  /**
   * AnimeCollectionLike createMany
   */
  export type AnimeCollectionLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeCollectionLikes.
     */
    data: AnimeCollectionLikeCreateManyInput | AnimeCollectionLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeCollectionLike createManyAndReturn
   */
  export type AnimeCollectionLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeCollectionLikes.
     */
    data: AnimeCollectionLikeCreateManyInput | AnimeCollectionLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeCollectionLike update
   */
  export type AnimeCollectionLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeCollectionLike.
     */
    data: XOR<AnimeCollectionLikeUpdateInput, AnimeCollectionLikeUncheckedUpdateInput>
    /**
     * Choose, which AnimeCollectionLike to update.
     */
    where: AnimeCollectionLikeWhereUniqueInput
  }

  /**
   * AnimeCollectionLike updateMany
   */
  export type AnimeCollectionLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeCollectionLikes.
     */
    data: XOR<AnimeCollectionLikeUpdateManyMutationInput, AnimeCollectionLikeUncheckedUpdateManyInput>
    /**
     * Filter which AnimeCollectionLikes to update
     */
    where?: AnimeCollectionLikeWhereInput
    /**
     * Limit how many AnimeCollectionLikes to update.
     */
    limit?: number
  }

  /**
   * AnimeCollectionLike updateManyAndReturn
   */
  export type AnimeCollectionLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * The data used to update AnimeCollectionLikes.
     */
    data: XOR<AnimeCollectionLikeUpdateManyMutationInput, AnimeCollectionLikeUncheckedUpdateManyInput>
    /**
     * Filter which AnimeCollectionLikes to update
     */
    where?: AnimeCollectionLikeWhereInput
    /**
     * Limit how many AnimeCollectionLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeCollectionLike upsert
   */
  export type AnimeCollectionLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeCollectionLike to update in case it exists.
     */
    where: AnimeCollectionLikeWhereUniqueInput
    /**
     * In case the AnimeCollectionLike found by the `where` argument doesn't exist, create a new AnimeCollectionLike with this data.
     */
    create: XOR<AnimeCollectionLikeCreateInput, AnimeCollectionLikeUncheckedCreateInput>
    /**
     * In case the AnimeCollectionLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeCollectionLikeUpdateInput, AnimeCollectionLikeUncheckedUpdateInput>
  }

  /**
   * AnimeCollectionLike delete
   */
  export type AnimeCollectionLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    /**
     * Filter which AnimeCollectionLike to delete.
     */
    where: AnimeCollectionLikeWhereUniqueInput
  }

  /**
   * AnimeCollectionLike deleteMany
   */
  export type AnimeCollectionLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeCollectionLikes to delete
     */
    where?: AnimeCollectionLikeWhereInput
    /**
     * Limit how many AnimeCollectionLikes to delete.
     */
    limit?: number
  }

  /**
   * AnimeCollectionLike without action
   */
  export type AnimeCollectionLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    likesCount: number | null
    episode: number | null
  }

  export type CommentSumAggregateOutputType = {
    likesCount: number | null
    episode: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    animeId: string | null
    likesCount: number | null
    episode: number | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    animeId: string | null
    likesCount: number | null
    episode: number | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    userId: number
    animeId: number
    likesCount: number
    episode: number
    parentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    likesCount?: true
    episode?: true
  }

  export type CommentSumAggregateInputType = {
    likesCount?: true
    episode?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    animeId?: true
    likesCount?: true
    episode?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    animeId?: true
    likesCount?: true
    episode?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    animeId?: true
    likesCount?: true
    episode?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    userId: string
    animeId: string | null
    likesCount: number
    episode: number | null
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    animeId?: boolean
    likesCount?: boolean
    episode?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | Comment$animeArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    CommentLike?: boolean | Comment$CommentLikeArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    animeId?: boolean
    likesCount?: boolean
    episode?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | Comment$animeArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    animeId?: boolean
    likesCount?: boolean
    episode?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | Comment$animeArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    userId?: boolean
    animeId?: boolean
    likesCount?: boolean
    episode?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "userId" | "animeId" | "likesCount" | "episode" | "parentId" | "createdAt" | "updatedAt", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | Comment$animeArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    CommentLike?: boolean | Comment$CommentLikeArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | Comment$animeArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | Comment$animeArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      anime: Prisma.$AnimePayload<ExtArgs> | null
      parent: Prisma.$CommentPayload<ExtArgs> | null
      replies: Prisma.$CommentPayload<ExtArgs>[]
      CommentLike: Prisma.$CommentLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      userId: string
      animeId: string | null
      likesCount: number
      episode: number | null
      parentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    anime<T extends Comment$animeArgs<ExtArgs> = {}>(args?: Subset<T, Comment$animeArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parent<T extends Comment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$parentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    replies<T extends Comment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CommentLike<T extends Comment$CommentLikeArgs<ExtArgs> = {}>(args?: Subset<T, Comment$CommentLikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly animeId: FieldRef<"Comment", 'String'>
    readonly likesCount: FieldRef<"Comment", 'Int'>
    readonly episode: FieldRef<"Comment", 'Int'>
    readonly parentId: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.anime
   */
  export type Comment$animeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anime
     */
    omit?: AnimeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeInclude<ExtArgs> | null
    where?: AnimeWhereInput
  }

  /**
   * Comment.parent
   */
  export type Comment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Comment.replies
   */
  export type Comment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment.CommentLike
   */
  export type Comment$CommentLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    cursor?: CommentLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model CommentLike
   */

  export type AggregateCommentLike = {
    _count: CommentLikeCountAggregateOutputType | null
    _min: CommentLikeMinAggregateOutputType | null
    _max: CommentLikeMaxAggregateOutputType | null
  }

  export type CommentLikeMinAggregateOutputType = {
    userId: string | null
    commentId: string | null
    likedAt: Date | null
  }

  export type CommentLikeMaxAggregateOutputType = {
    userId: string | null
    commentId: string | null
    likedAt: Date | null
  }

  export type CommentLikeCountAggregateOutputType = {
    userId: number
    commentId: number
    likedAt: number
    _all: number
  }


  export type CommentLikeMinAggregateInputType = {
    userId?: true
    commentId?: true
    likedAt?: true
  }

  export type CommentLikeMaxAggregateInputType = {
    userId?: true
    commentId?: true
    likedAt?: true
  }

  export type CommentLikeCountAggregateInputType = {
    userId?: true
    commentId?: true
    likedAt?: true
    _all?: true
  }

  export type CommentLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentLike to aggregate.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommentLikes
    **/
    _count?: true | CommentLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentLikeMaxAggregateInputType
  }

  export type GetCommentLikeAggregateType<T extends CommentLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentLike[P]>
      : GetScalarType<T[P], AggregateCommentLike[P]>
  }




  export type CommentLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithAggregationInput | CommentLikeOrderByWithAggregationInput[]
    by: CommentLikeScalarFieldEnum[] | CommentLikeScalarFieldEnum
    having?: CommentLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentLikeCountAggregateInputType | true
    _min?: CommentLikeMinAggregateInputType
    _max?: CommentLikeMaxAggregateInputType
  }

  export type CommentLikeGroupByOutputType = {
    userId: string
    commentId: string
    likedAt: Date
    _count: CommentLikeCountAggregateOutputType | null
    _min: CommentLikeMinAggregateOutputType | null
    _max: CommentLikeMaxAggregateOutputType | null
  }

  type GetCommentLikeGroupByPayload<T extends CommentLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
            : GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
        }
      >
    >


  export type CommentLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    commentId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentLike"]>

  export type CommentLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    commentId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentLike"]>

  export type CommentLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    commentId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentLike"]>

  export type CommentLikeSelectScalar = {
    userId?: boolean
    commentId?: boolean
    likedAt?: boolean
  }

  export type CommentLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "commentId" | "likedAt", ExtArgs["result"]["commentLike"]>
  export type CommentLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type CommentLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }
  export type CommentLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }

  export type $CommentLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommentLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      commentId: string
      likedAt: Date
    }, ExtArgs["result"]["commentLike"]>
    composites: {}
  }

  type CommentLikeGetPayload<S extends boolean | null | undefined | CommentLikeDefaultArgs> = $Result.GetResult<Prisma.$CommentLikePayload, S>

  type CommentLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentLikeCountAggregateInputType | true
    }

  export interface CommentLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommentLike'], meta: { name: 'CommentLike' } }
    /**
     * Find zero or one CommentLike that matches the filter.
     * @param {CommentLikeFindUniqueArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentLikeFindUniqueArgs>(args: SelectSubset<T, CommentLikeFindUniqueArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CommentLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentLikeFindUniqueOrThrowArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommentLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindFirstArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentLikeFindFirstArgs>(args?: SelectSubset<T, CommentLikeFindFirstArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommentLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindFirstOrThrowArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CommentLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommentLikes
     * const commentLikes = await prisma.commentLike.findMany()
     * 
     * // Get first 10 CommentLikes
     * const commentLikes = await prisma.commentLike.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const commentLikeWithUserIdOnly = await prisma.commentLike.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends CommentLikeFindManyArgs>(args?: SelectSubset<T, CommentLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CommentLike.
     * @param {CommentLikeCreateArgs} args - Arguments to create a CommentLike.
     * @example
     * // Create one CommentLike
     * const CommentLike = await prisma.commentLike.create({
     *   data: {
     *     // ... data to create a CommentLike
     *   }
     * })
     * 
     */
    create<T extends CommentLikeCreateArgs>(args: SelectSubset<T, CommentLikeCreateArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CommentLikes.
     * @param {CommentLikeCreateManyArgs} args - Arguments to create many CommentLikes.
     * @example
     * // Create many CommentLikes
     * const commentLike = await prisma.commentLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentLikeCreateManyArgs>(args?: SelectSubset<T, CommentLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommentLikes and returns the data saved in the database.
     * @param {CommentLikeCreateManyAndReturnArgs} args - Arguments to create many CommentLikes.
     * @example
     * // Create many CommentLikes
     * const commentLike = await prisma.commentLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommentLikes and only return the `userId`
     * const commentLikeWithUserIdOnly = await prisma.commentLike.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CommentLike.
     * @param {CommentLikeDeleteArgs} args - Arguments to delete one CommentLike.
     * @example
     * // Delete one CommentLike
     * const CommentLike = await prisma.commentLike.delete({
     *   where: {
     *     // ... filter to delete one CommentLike
     *   }
     * })
     * 
     */
    delete<T extends CommentLikeDeleteArgs>(args: SelectSubset<T, CommentLikeDeleteArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CommentLike.
     * @param {CommentLikeUpdateArgs} args - Arguments to update one CommentLike.
     * @example
     * // Update one CommentLike
     * const commentLike = await prisma.commentLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentLikeUpdateArgs>(args: SelectSubset<T, CommentLikeUpdateArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CommentLikes.
     * @param {CommentLikeDeleteManyArgs} args - Arguments to filter CommentLikes to delete.
     * @example
     * // Delete a few CommentLikes
     * const { count } = await prisma.commentLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentLikeDeleteManyArgs>(args?: SelectSubset<T, CommentLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommentLikes
     * const commentLike = await prisma.commentLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentLikeUpdateManyArgs>(args: SelectSubset<T, CommentLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentLikes and returns the data updated in the database.
     * @param {CommentLikeUpdateManyAndReturnArgs} args - Arguments to update many CommentLikes.
     * @example
     * // Update many CommentLikes
     * const commentLike = await prisma.commentLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CommentLikes and only return the `userId`
     * const commentLikeWithUserIdOnly = await prisma.commentLike.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CommentLike.
     * @param {CommentLikeUpsertArgs} args - Arguments to update or create a CommentLike.
     * @example
     * // Update or create a CommentLike
     * const commentLike = await prisma.commentLike.upsert({
     *   create: {
     *     // ... data to create a CommentLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommentLike we want to update
     *   }
     * })
     */
    upsert<T extends CommentLikeUpsertArgs>(args: SelectSubset<T, CommentLikeUpsertArgs<ExtArgs>>): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CommentLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeCountArgs} args - Arguments to filter CommentLikes to count.
     * @example
     * // Count the number of CommentLikes
     * const count = await prisma.commentLike.count({
     *   where: {
     *     // ... the filter for the CommentLikes we want to count
     *   }
     * })
    **/
    count<T extends CommentLikeCountArgs>(
      args?: Subset<T, CommentLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommentLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentLikeAggregateArgs>(args: Subset<T, CommentLikeAggregateArgs>): Prisma.PrismaPromise<GetCommentLikeAggregateType<T>>

    /**
     * Group by CommentLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentLikeGroupByArgs['orderBy'] }
        : { orderBy?: CommentLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommentLike model
   */
  readonly fields: CommentLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommentLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommentLike model
   */
  interface CommentLikeFieldRefs {
    readonly userId: FieldRef<"CommentLike", 'String'>
    readonly commentId: FieldRef<"CommentLike", 'String'>
    readonly likedAt: FieldRef<"CommentLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommentLike findUnique
   */
  export type CommentLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike findUniqueOrThrow
   */
  export type CommentLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike findFirst
   */
  export type CommentLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentLikes.
     */
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * CommentLike findFirstOrThrow
   */
  export type CommentLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentLikes.
     */
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * CommentLike findMany
   */
  export type CommentLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLikes to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * CommentLike create
   */
  export type CommentLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a CommentLike.
     */
    data: XOR<CommentLikeCreateInput, CommentLikeUncheckedCreateInput>
  }

  /**
   * CommentLike createMany
   */
  export type CommentLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommentLikes.
     */
    data: CommentLikeCreateManyInput | CommentLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommentLike createManyAndReturn
   */
  export type CommentLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * The data used to create many CommentLikes.
     */
    data: CommentLikeCreateManyInput | CommentLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommentLike update
   */
  export type CommentLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a CommentLike.
     */
    data: XOR<CommentLikeUpdateInput, CommentLikeUncheckedUpdateInput>
    /**
     * Choose, which CommentLike to update.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike updateMany
   */
  export type CommentLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommentLikes.
     */
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyInput>
    /**
     * Filter which CommentLikes to update
     */
    where?: CommentLikeWhereInput
    /**
     * Limit how many CommentLikes to update.
     */
    limit?: number
  }

  /**
   * CommentLike updateManyAndReturn
   */
  export type CommentLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * The data used to update CommentLikes.
     */
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyInput>
    /**
     * Filter which CommentLikes to update
     */
    where?: CommentLikeWhereInput
    /**
     * Limit how many CommentLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommentLike upsert
   */
  export type CommentLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the CommentLike to update in case it exists.
     */
    where: CommentLikeWhereUniqueInput
    /**
     * In case the CommentLike found by the `where` argument doesn't exist, create a new CommentLike with this data.
     */
    create: XOR<CommentLikeCreateInput, CommentLikeUncheckedCreateInput>
    /**
     * In case the CommentLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentLikeUpdateInput, CommentLikeUncheckedUpdateInput>
  }

  /**
   * CommentLike delete
   */
  export type CommentLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter which CommentLike to delete.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike deleteMany
   */
  export type CommentLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentLikes to delete
     */
    where?: CommentLikeWhereInput
    /**
     * Limit how many CommentLikes to delete.
     */
    limit?: number
  }

  /**
   * CommentLike without action
   */
  export type CommentLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
  }


  /**
   * Model AnimeEpisodeProgress
   */

  export type AggregateAnimeEpisodeProgress = {
    _count: AnimeEpisodeProgressCountAggregateOutputType | null
    _avg: AnimeEpisodeProgressAvgAggregateOutputType | null
    _sum: AnimeEpisodeProgressSumAggregateOutputType | null
    _min: AnimeEpisodeProgressMinAggregateOutputType | null
    _max: AnimeEpisodeProgressMaxAggregateOutputType | null
  }

  export type AnimeEpisodeProgressAvgAggregateOutputType = {
    episode: number | null
    timestamp: number | null
  }

  export type AnimeEpisodeProgressSumAggregateOutputType = {
    episode: number | null
    timestamp: number | null
  }

  export type AnimeEpisodeProgressMinAggregateOutputType = {
    userId: string | null
    animeId: string | null
    episode: number | null
    timestamp: number | null
    isWatched: boolean | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type AnimeEpisodeProgressMaxAggregateOutputType = {
    userId: string | null
    animeId: string | null
    episode: number | null
    timestamp: number | null
    isWatched: boolean | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type AnimeEpisodeProgressCountAggregateOutputType = {
    userId: number
    animeId: number
    episode: number
    timestamp: number
    isWatched: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type AnimeEpisodeProgressAvgAggregateInputType = {
    episode?: true
    timestamp?: true
  }

  export type AnimeEpisodeProgressSumAggregateInputType = {
    episode?: true
    timestamp?: true
  }

  export type AnimeEpisodeProgressMinAggregateInputType = {
    userId?: true
    animeId?: true
    episode?: true
    timestamp?: true
    isWatched?: true
    updatedAt?: true
    createdAt?: true
  }

  export type AnimeEpisodeProgressMaxAggregateInputType = {
    userId?: true
    animeId?: true
    episode?: true
    timestamp?: true
    isWatched?: true
    updatedAt?: true
    createdAt?: true
  }

  export type AnimeEpisodeProgressCountAggregateInputType = {
    userId?: true
    animeId?: true
    episode?: true
    timestamp?: true
    isWatched?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type AnimeEpisodeProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeEpisodeProgress to aggregate.
     */
    where?: AnimeEpisodeProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeEpisodeProgresses to fetch.
     */
    orderBy?: AnimeEpisodeProgressOrderByWithRelationInput | AnimeEpisodeProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeEpisodeProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeEpisodeProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeEpisodeProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimeEpisodeProgresses
    **/
    _count?: true | AnimeEpisodeProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimeEpisodeProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimeEpisodeProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeEpisodeProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeEpisodeProgressMaxAggregateInputType
  }

  export type GetAnimeEpisodeProgressAggregateType<T extends AnimeEpisodeProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimeEpisodeProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimeEpisodeProgress[P]>
      : GetScalarType<T[P], AggregateAnimeEpisodeProgress[P]>
  }




  export type AnimeEpisodeProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimeEpisodeProgressWhereInput
    orderBy?: AnimeEpisodeProgressOrderByWithAggregationInput | AnimeEpisodeProgressOrderByWithAggregationInput[]
    by: AnimeEpisodeProgressScalarFieldEnum[] | AnimeEpisodeProgressScalarFieldEnum
    having?: AnimeEpisodeProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeEpisodeProgressCountAggregateInputType | true
    _avg?: AnimeEpisodeProgressAvgAggregateInputType
    _sum?: AnimeEpisodeProgressSumAggregateInputType
    _min?: AnimeEpisodeProgressMinAggregateInputType
    _max?: AnimeEpisodeProgressMaxAggregateInputType
  }

  export type AnimeEpisodeProgressGroupByOutputType = {
    userId: string
    animeId: string
    episode: number
    timestamp: number
    isWatched: boolean
    updatedAt: Date
    createdAt: Date
    _count: AnimeEpisodeProgressCountAggregateOutputType | null
    _avg: AnimeEpisodeProgressAvgAggregateOutputType | null
    _sum: AnimeEpisodeProgressSumAggregateOutputType | null
    _min: AnimeEpisodeProgressMinAggregateOutputType | null
    _max: AnimeEpisodeProgressMaxAggregateOutputType | null
  }

  type GetAnimeEpisodeProgressGroupByPayload<T extends AnimeEpisodeProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimeEpisodeProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeEpisodeProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeEpisodeProgressGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeEpisodeProgressGroupByOutputType[P]>
        }
      >
    >


  export type AnimeEpisodeProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    animeId?: boolean
    episode?: boolean
    timestamp?: boolean
    isWatched?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeEpisodeProgress"]>

  export type AnimeEpisodeProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    animeId?: boolean
    episode?: boolean
    timestamp?: boolean
    isWatched?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeEpisodeProgress"]>

  export type AnimeEpisodeProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    animeId?: boolean
    episode?: boolean
    timestamp?: boolean
    isWatched?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animeEpisodeProgress"]>

  export type AnimeEpisodeProgressSelectScalar = {
    userId?: boolean
    animeId?: boolean
    episode?: boolean
    timestamp?: boolean
    isWatched?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type AnimeEpisodeProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "animeId" | "episode" | "timestamp" | "isWatched" | "updatedAt" | "createdAt", ExtArgs["result"]["animeEpisodeProgress"]>
  export type AnimeEpisodeProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AnimeEpisodeProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AnimeEpisodeProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AnimeEpisodeProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimeEpisodeProgress"
    objects: {
      anime: Prisma.$AnimePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      animeId: string
      episode: number
      timestamp: number
      isWatched: boolean
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["animeEpisodeProgress"]>
    composites: {}
  }

  type AnimeEpisodeProgressGetPayload<S extends boolean | null | undefined | AnimeEpisodeProgressDefaultArgs> = $Result.GetResult<Prisma.$AnimeEpisodeProgressPayload, S>

  type AnimeEpisodeProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimeEpisodeProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimeEpisodeProgressCountAggregateInputType | true
    }

  export interface AnimeEpisodeProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimeEpisodeProgress'], meta: { name: 'AnimeEpisodeProgress' } }
    /**
     * Find zero or one AnimeEpisodeProgress that matches the filter.
     * @param {AnimeEpisodeProgressFindUniqueArgs} args - Arguments to find a AnimeEpisodeProgress
     * @example
     * // Get one AnimeEpisodeProgress
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimeEpisodeProgressFindUniqueArgs>(args: SelectSubset<T, AnimeEpisodeProgressFindUniqueArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnimeEpisodeProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimeEpisodeProgressFindUniqueOrThrowArgs} args - Arguments to find a AnimeEpisodeProgress
     * @example
     * // Get one AnimeEpisodeProgress
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimeEpisodeProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimeEpisodeProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeEpisodeProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeEpisodeProgressFindFirstArgs} args - Arguments to find a AnimeEpisodeProgress
     * @example
     * // Get one AnimeEpisodeProgress
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimeEpisodeProgressFindFirstArgs>(args?: SelectSubset<T, AnimeEpisodeProgressFindFirstArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnimeEpisodeProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeEpisodeProgressFindFirstOrThrowArgs} args - Arguments to find a AnimeEpisodeProgress
     * @example
     * // Get one AnimeEpisodeProgress
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimeEpisodeProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimeEpisodeProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnimeEpisodeProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeEpisodeProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimeEpisodeProgresses
     * const animeEpisodeProgresses = await prisma.animeEpisodeProgress.findMany()
     * 
     * // Get first 10 AnimeEpisodeProgresses
     * const animeEpisodeProgresses = await prisma.animeEpisodeProgress.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const animeEpisodeProgressWithUserIdOnly = await prisma.animeEpisodeProgress.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends AnimeEpisodeProgressFindManyArgs>(args?: SelectSubset<T, AnimeEpisodeProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnimeEpisodeProgress.
     * @param {AnimeEpisodeProgressCreateArgs} args - Arguments to create a AnimeEpisodeProgress.
     * @example
     * // Create one AnimeEpisodeProgress
     * const AnimeEpisodeProgress = await prisma.animeEpisodeProgress.create({
     *   data: {
     *     // ... data to create a AnimeEpisodeProgress
     *   }
     * })
     * 
     */
    create<T extends AnimeEpisodeProgressCreateArgs>(args: SelectSubset<T, AnimeEpisodeProgressCreateArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnimeEpisodeProgresses.
     * @param {AnimeEpisodeProgressCreateManyArgs} args - Arguments to create many AnimeEpisodeProgresses.
     * @example
     * // Create many AnimeEpisodeProgresses
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimeEpisodeProgressCreateManyArgs>(args?: SelectSubset<T, AnimeEpisodeProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnimeEpisodeProgresses and returns the data saved in the database.
     * @param {AnimeEpisodeProgressCreateManyAndReturnArgs} args - Arguments to create many AnimeEpisodeProgresses.
     * @example
     * // Create many AnimeEpisodeProgresses
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnimeEpisodeProgresses and only return the `userId`
     * const animeEpisodeProgressWithUserIdOnly = await prisma.animeEpisodeProgress.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimeEpisodeProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimeEpisodeProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnimeEpisodeProgress.
     * @param {AnimeEpisodeProgressDeleteArgs} args - Arguments to delete one AnimeEpisodeProgress.
     * @example
     * // Delete one AnimeEpisodeProgress
     * const AnimeEpisodeProgress = await prisma.animeEpisodeProgress.delete({
     *   where: {
     *     // ... filter to delete one AnimeEpisodeProgress
     *   }
     * })
     * 
     */
    delete<T extends AnimeEpisodeProgressDeleteArgs>(args: SelectSubset<T, AnimeEpisodeProgressDeleteArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnimeEpisodeProgress.
     * @param {AnimeEpisodeProgressUpdateArgs} args - Arguments to update one AnimeEpisodeProgress.
     * @example
     * // Update one AnimeEpisodeProgress
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimeEpisodeProgressUpdateArgs>(args: SelectSubset<T, AnimeEpisodeProgressUpdateArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnimeEpisodeProgresses.
     * @param {AnimeEpisodeProgressDeleteManyArgs} args - Arguments to filter AnimeEpisodeProgresses to delete.
     * @example
     * // Delete a few AnimeEpisodeProgresses
     * const { count } = await prisma.animeEpisodeProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimeEpisodeProgressDeleteManyArgs>(args?: SelectSubset<T, AnimeEpisodeProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeEpisodeProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeEpisodeProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimeEpisodeProgresses
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimeEpisodeProgressUpdateManyArgs>(args: SelectSubset<T, AnimeEpisodeProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimeEpisodeProgresses and returns the data updated in the database.
     * @param {AnimeEpisodeProgressUpdateManyAndReturnArgs} args - Arguments to update many AnimeEpisodeProgresses.
     * @example
     * // Update many AnimeEpisodeProgresses
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnimeEpisodeProgresses and only return the `userId`
     * const animeEpisodeProgressWithUserIdOnly = await prisma.animeEpisodeProgress.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimeEpisodeProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimeEpisodeProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnimeEpisodeProgress.
     * @param {AnimeEpisodeProgressUpsertArgs} args - Arguments to update or create a AnimeEpisodeProgress.
     * @example
     * // Update or create a AnimeEpisodeProgress
     * const animeEpisodeProgress = await prisma.animeEpisodeProgress.upsert({
     *   create: {
     *     // ... data to create a AnimeEpisodeProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimeEpisodeProgress we want to update
     *   }
     * })
     */
    upsert<T extends AnimeEpisodeProgressUpsertArgs>(args: SelectSubset<T, AnimeEpisodeProgressUpsertArgs<ExtArgs>>): Prisma__AnimeEpisodeProgressClient<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnimeEpisodeProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeEpisodeProgressCountArgs} args - Arguments to filter AnimeEpisodeProgresses to count.
     * @example
     * // Count the number of AnimeEpisodeProgresses
     * const count = await prisma.animeEpisodeProgress.count({
     *   where: {
     *     // ... the filter for the AnimeEpisodeProgresses we want to count
     *   }
     * })
    **/
    count<T extends AnimeEpisodeProgressCountArgs>(
      args?: Subset<T, AnimeEpisodeProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeEpisodeProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimeEpisodeProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeEpisodeProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeEpisodeProgressAggregateArgs>(args: Subset<T, AnimeEpisodeProgressAggregateArgs>): Prisma.PrismaPromise<GetAnimeEpisodeProgressAggregateType<T>>

    /**
     * Group by AnimeEpisodeProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeEpisodeProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeEpisodeProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeEpisodeProgressGroupByArgs['orderBy'] }
        : { orderBy?: AnimeEpisodeProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeEpisodeProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeEpisodeProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimeEpisodeProgress model
   */
  readonly fields: AnimeEpisodeProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimeEpisodeProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimeEpisodeProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnimeEpisodeProgress model
   */
  interface AnimeEpisodeProgressFieldRefs {
    readonly userId: FieldRef<"AnimeEpisodeProgress", 'String'>
    readonly animeId: FieldRef<"AnimeEpisodeProgress", 'String'>
    readonly episode: FieldRef<"AnimeEpisodeProgress", 'Int'>
    readonly timestamp: FieldRef<"AnimeEpisodeProgress", 'Int'>
    readonly isWatched: FieldRef<"AnimeEpisodeProgress", 'Boolean'>
    readonly updatedAt: FieldRef<"AnimeEpisodeProgress", 'DateTime'>
    readonly createdAt: FieldRef<"AnimeEpisodeProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnimeEpisodeProgress findUnique
   */
  export type AnimeEpisodeProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * Filter, which AnimeEpisodeProgress to fetch.
     */
    where: AnimeEpisodeProgressWhereUniqueInput
  }

  /**
   * AnimeEpisodeProgress findUniqueOrThrow
   */
  export type AnimeEpisodeProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * Filter, which AnimeEpisodeProgress to fetch.
     */
    where: AnimeEpisodeProgressWhereUniqueInput
  }

  /**
   * AnimeEpisodeProgress findFirst
   */
  export type AnimeEpisodeProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * Filter, which AnimeEpisodeProgress to fetch.
     */
    where?: AnimeEpisodeProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeEpisodeProgresses to fetch.
     */
    orderBy?: AnimeEpisodeProgressOrderByWithRelationInput | AnimeEpisodeProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeEpisodeProgresses.
     */
    cursor?: AnimeEpisodeProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeEpisodeProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeEpisodeProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeEpisodeProgresses.
     */
    distinct?: AnimeEpisodeProgressScalarFieldEnum | AnimeEpisodeProgressScalarFieldEnum[]
  }

  /**
   * AnimeEpisodeProgress findFirstOrThrow
   */
  export type AnimeEpisodeProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * Filter, which AnimeEpisodeProgress to fetch.
     */
    where?: AnimeEpisodeProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeEpisodeProgresses to fetch.
     */
    orderBy?: AnimeEpisodeProgressOrderByWithRelationInput | AnimeEpisodeProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimeEpisodeProgresses.
     */
    cursor?: AnimeEpisodeProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeEpisodeProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeEpisodeProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimeEpisodeProgresses.
     */
    distinct?: AnimeEpisodeProgressScalarFieldEnum | AnimeEpisodeProgressScalarFieldEnum[]
  }

  /**
   * AnimeEpisodeProgress findMany
   */
  export type AnimeEpisodeProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * Filter, which AnimeEpisodeProgresses to fetch.
     */
    where?: AnimeEpisodeProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimeEpisodeProgresses to fetch.
     */
    orderBy?: AnimeEpisodeProgressOrderByWithRelationInput | AnimeEpisodeProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimeEpisodeProgresses.
     */
    cursor?: AnimeEpisodeProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimeEpisodeProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimeEpisodeProgresses.
     */
    skip?: number
    distinct?: AnimeEpisodeProgressScalarFieldEnum | AnimeEpisodeProgressScalarFieldEnum[]
  }

  /**
   * AnimeEpisodeProgress create
   */
  export type AnimeEpisodeProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a AnimeEpisodeProgress.
     */
    data: XOR<AnimeEpisodeProgressCreateInput, AnimeEpisodeProgressUncheckedCreateInput>
  }

  /**
   * AnimeEpisodeProgress createMany
   */
  export type AnimeEpisodeProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimeEpisodeProgresses.
     */
    data: AnimeEpisodeProgressCreateManyInput | AnimeEpisodeProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnimeEpisodeProgress createManyAndReturn
   */
  export type AnimeEpisodeProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * The data used to create many AnimeEpisodeProgresses.
     */
    data: AnimeEpisodeProgressCreateManyInput | AnimeEpisodeProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeEpisodeProgress update
   */
  export type AnimeEpisodeProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a AnimeEpisodeProgress.
     */
    data: XOR<AnimeEpisodeProgressUpdateInput, AnimeEpisodeProgressUncheckedUpdateInput>
    /**
     * Choose, which AnimeEpisodeProgress to update.
     */
    where: AnimeEpisodeProgressWhereUniqueInput
  }

  /**
   * AnimeEpisodeProgress updateMany
   */
  export type AnimeEpisodeProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimeEpisodeProgresses.
     */
    data: XOR<AnimeEpisodeProgressUpdateManyMutationInput, AnimeEpisodeProgressUncheckedUpdateManyInput>
    /**
     * Filter which AnimeEpisodeProgresses to update
     */
    where?: AnimeEpisodeProgressWhereInput
    /**
     * Limit how many AnimeEpisodeProgresses to update.
     */
    limit?: number
  }

  /**
   * AnimeEpisodeProgress updateManyAndReturn
   */
  export type AnimeEpisodeProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * The data used to update AnimeEpisodeProgresses.
     */
    data: XOR<AnimeEpisodeProgressUpdateManyMutationInput, AnimeEpisodeProgressUncheckedUpdateManyInput>
    /**
     * Filter which AnimeEpisodeProgresses to update
     */
    where?: AnimeEpisodeProgressWhereInput
    /**
     * Limit how many AnimeEpisodeProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnimeEpisodeProgress upsert
   */
  export type AnimeEpisodeProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the AnimeEpisodeProgress to update in case it exists.
     */
    where: AnimeEpisodeProgressWhereUniqueInput
    /**
     * In case the AnimeEpisodeProgress found by the `where` argument doesn't exist, create a new AnimeEpisodeProgress with this data.
     */
    create: XOR<AnimeEpisodeProgressCreateInput, AnimeEpisodeProgressUncheckedCreateInput>
    /**
     * In case the AnimeEpisodeProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeEpisodeProgressUpdateInput, AnimeEpisodeProgressUncheckedUpdateInput>
  }

  /**
   * AnimeEpisodeProgress delete
   */
  export type AnimeEpisodeProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    /**
     * Filter which AnimeEpisodeProgress to delete.
     */
    where: AnimeEpisodeProgressWhereUniqueInput
  }

  /**
   * AnimeEpisodeProgress deleteMany
   */
  export type AnimeEpisodeProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimeEpisodeProgresses to delete
     */
    where?: AnimeEpisodeProgressWhereInput
    /**
     * Limit how many AnimeEpisodeProgresses to delete.
     */
    limit?: number
  }

  /**
   * AnimeEpisodeProgress without action
   */
  export type AnimeEpisodeProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    userId: string | null
    animeId: string | null
    rating: number | null
    title: string | null
    description: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    animeId: string | null
    rating: number | null
    title: string | null
    description: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    userId: number
    animeId: number
    rating: number
    title: number
    description: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    userId?: true
    animeId?: true
    rating?: true
    title?: true
    description?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    userId?: true
    animeId?: true
    rating?: true
    title?: true
    description?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    userId?: true
    animeId?: true
    rating?: true
    title?: true
    description?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    userId: string
    animeId: string
    rating: number
    title: string | null
    description: string | null
    content: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    animeId?: boolean
    rating?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    reviewLikes?: boolean | Review$reviewLikesArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    animeId?: boolean
    rating?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    animeId?: boolean
    rating?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    userId?: boolean
    animeId?: boolean
    rating?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "animeId" | "rating" | "title" | "description" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
    reviewLikes?: boolean | Review$reviewLikesArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    anime?: boolean | AnimeDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      anime: Prisma.$AnimePayload<ExtArgs>
      reviewLikes: Prisma.$ReviewLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      animeId: string
      rating: number
      title: string | null
      description: string | null
      content: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    anime<T extends AnimeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimeDefaultArgs<ExtArgs>>): Prisma__AnimeClient<$Result.GetResult<Prisma.$AnimePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviewLikes<T extends Review$reviewLikesArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly userId: FieldRef<"Review", 'String'>
    readonly animeId: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly title: FieldRef<"Review", 'String'>
    readonly description: FieldRef<"Review", 'String'>
    readonly content: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review.reviewLikes
   */
  export type Review$reviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    where?: ReviewLikeWhereInput
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    cursor?: ReviewLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model ReviewLike
   */

  export type AggregateReviewLike = {
    _count: ReviewLikeCountAggregateOutputType | null
    _min: ReviewLikeMinAggregateOutputType | null
    _max: ReviewLikeMaxAggregateOutputType | null
  }

  export type ReviewLikeMinAggregateOutputType = {
    userId: string | null
    reviewId: string | null
    likedAt: Date | null
  }

  export type ReviewLikeMaxAggregateOutputType = {
    userId: string | null
    reviewId: string | null
    likedAt: Date | null
  }

  export type ReviewLikeCountAggregateOutputType = {
    userId: number
    reviewId: number
    likedAt: number
    _all: number
  }


  export type ReviewLikeMinAggregateInputType = {
    userId?: true
    reviewId?: true
    likedAt?: true
  }

  export type ReviewLikeMaxAggregateInputType = {
    userId?: true
    reviewId?: true
    likedAt?: true
  }

  export type ReviewLikeCountAggregateInputType = {
    userId?: true
    reviewId?: true
    likedAt?: true
    _all?: true
  }

  export type ReviewLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewLike to aggregate.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewLikes
    **/
    _count?: true | ReviewLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewLikeMaxAggregateInputType
  }

  export type GetReviewLikeAggregateType<T extends ReviewLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewLike[P]>
      : GetScalarType<T[P], AggregateReviewLike[P]>
  }




  export type ReviewLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewLikeWhereInput
    orderBy?: ReviewLikeOrderByWithAggregationInput | ReviewLikeOrderByWithAggregationInput[]
    by: ReviewLikeScalarFieldEnum[] | ReviewLikeScalarFieldEnum
    having?: ReviewLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewLikeCountAggregateInputType | true
    _min?: ReviewLikeMinAggregateInputType
    _max?: ReviewLikeMaxAggregateInputType
  }

  export type ReviewLikeGroupByOutputType = {
    userId: string
    reviewId: string
    likedAt: Date
    _count: ReviewLikeCountAggregateOutputType | null
    _min: ReviewLikeMinAggregateOutputType | null
    _max: ReviewLikeMaxAggregateOutputType | null
  }

  type GetReviewLikeGroupByPayload<T extends ReviewLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewLikeGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewLikeGroupByOutputType[P]>
        }
      >
    >


  export type ReviewLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    reviewId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewLike"]>

  export type ReviewLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    reviewId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewLike"]>

  export type ReviewLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    reviewId?: boolean
    likedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewLike"]>

  export type ReviewLikeSelectScalar = {
    userId?: boolean
    reviewId?: boolean
    likedAt?: boolean
  }

  export type ReviewLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "reviewId" | "likedAt", ExtArgs["result"]["reviewLike"]>
  export type ReviewLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }
  export type ReviewLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }
  export type ReviewLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }

  export type $ReviewLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      reviewId: string
      likedAt: Date
    }, ExtArgs["result"]["reviewLike"]>
    composites: {}
  }

  type ReviewLikeGetPayload<S extends boolean | null | undefined | ReviewLikeDefaultArgs> = $Result.GetResult<Prisma.$ReviewLikePayload, S>

  type ReviewLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewLikeCountAggregateInputType | true
    }

  export interface ReviewLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewLike'], meta: { name: 'ReviewLike' } }
    /**
     * Find zero or one ReviewLike that matches the filter.
     * @param {ReviewLikeFindUniqueArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewLikeFindUniqueArgs>(args: SelectSubset<T, ReviewLikeFindUniqueArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewLikeFindUniqueOrThrowArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeFindFirstArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewLikeFindFirstArgs>(args?: SelectSubset<T, ReviewLikeFindFirstArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeFindFirstOrThrowArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewLikes
     * const reviewLikes = await prisma.reviewLike.findMany()
     * 
     * // Get first 10 ReviewLikes
     * const reviewLikes = await prisma.reviewLike.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const reviewLikeWithUserIdOnly = await prisma.reviewLike.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends ReviewLikeFindManyArgs>(args?: SelectSubset<T, ReviewLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewLike.
     * @param {ReviewLikeCreateArgs} args - Arguments to create a ReviewLike.
     * @example
     * // Create one ReviewLike
     * const ReviewLike = await prisma.reviewLike.create({
     *   data: {
     *     // ... data to create a ReviewLike
     *   }
     * })
     * 
     */
    create<T extends ReviewLikeCreateArgs>(args: SelectSubset<T, ReviewLikeCreateArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewLikes.
     * @param {ReviewLikeCreateManyArgs} args - Arguments to create many ReviewLikes.
     * @example
     * // Create many ReviewLikes
     * const reviewLike = await prisma.reviewLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewLikeCreateManyArgs>(args?: SelectSubset<T, ReviewLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewLikes and returns the data saved in the database.
     * @param {ReviewLikeCreateManyAndReturnArgs} args - Arguments to create many ReviewLikes.
     * @example
     * // Create many ReviewLikes
     * const reviewLike = await prisma.reviewLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewLikes and only return the `userId`
     * const reviewLikeWithUserIdOnly = await prisma.reviewLike.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewLike.
     * @param {ReviewLikeDeleteArgs} args - Arguments to delete one ReviewLike.
     * @example
     * // Delete one ReviewLike
     * const ReviewLike = await prisma.reviewLike.delete({
     *   where: {
     *     // ... filter to delete one ReviewLike
     *   }
     * })
     * 
     */
    delete<T extends ReviewLikeDeleteArgs>(args: SelectSubset<T, ReviewLikeDeleteArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewLike.
     * @param {ReviewLikeUpdateArgs} args - Arguments to update one ReviewLike.
     * @example
     * // Update one ReviewLike
     * const reviewLike = await prisma.reviewLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewLikeUpdateArgs>(args: SelectSubset<T, ReviewLikeUpdateArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewLikes.
     * @param {ReviewLikeDeleteManyArgs} args - Arguments to filter ReviewLikes to delete.
     * @example
     * // Delete a few ReviewLikes
     * const { count } = await prisma.reviewLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewLikeDeleteManyArgs>(args?: SelectSubset<T, ReviewLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewLikes
     * const reviewLike = await prisma.reviewLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewLikeUpdateManyArgs>(args: SelectSubset<T, ReviewLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewLikes and returns the data updated in the database.
     * @param {ReviewLikeUpdateManyAndReturnArgs} args - Arguments to update many ReviewLikes.
     * @example
     * // Update many ReviewLikes
     * const reviewLike = await prisma.reviewLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewLikes and only return the `userId`
     * const reviewLikeWithUserIdOnly = await prisma.reviewLike.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewLike.
     * @param {ReviewLikeUpsertArgs} args - Arguments to update or create a ReviewLike.
     * @example
     * // Update or create a ReviewLike
     * const reviewLike = await prisma.reviewLike.upsert({
     *   create: {
     *     // ... data to create a ReviewLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewLike we want to update
     *   }
     * })
     */
    upsert<T extends ReviewLikeUpsertArgs>(args: SelectSubset<T, ReviewLikeUpsertArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeCountArgs} args - Arguments to filter ReviewLikes to count.
     * @example
     * // Count the number of ReviewLikes
     * const count = await prisma.reviewLike.count({
     *   where: {
     *     // ... the filter for the ReviewLikes we want to count
     *   }
     * })
    **/
    count<T extends ReviewLikeCountArgs>(
      args?: Subset<T, ReviewLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewLikeAggregateArgs>(args: Subset<T, ReviewLikeAggregateArgs>): Prisma.PrismaPromise<GetReviewLikeAggregateType<T>>

    /**
     * Group by ReviewLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewLikeGroupByArgs['orderBy'] }
        : { orderBy?: ReviewLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewLike model
   */
  readonly fields: ReviewLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewLike model
   */
  interface ReviewLikeFieldRefs {
    readonly userId: FieldRef<"ReviewLike", 'String'>
    readonly reviewId: FieldRef<"ReviewLike", 'String'>
    readonly likedAt: FieldRef<"ReviewLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReviewLike findUnique
   */
  export type ReviewLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike findUniqueOrThrow
   */
  export type ReviewLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike findFirst
   */
  export type ReviewLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewLikes.
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewLikes.
     */
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * ReviewLike findFirstOrThrow
   */
  export type ReviewLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewLikes.
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewLikes.
     */
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * ReviewLike findMany
   */
  export type ReviewLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLikes to fetch.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewLikes.
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * ReviewLike create
   */
  export type ReviewLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewLike.
     */
    data: XOR<ReviewLikeCreateInput, ReviewLikeUncheckedCreateInput>
  }

  /**
   * ReviewLike createMany
   */
  export type ReviewLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewLikes.
     */
    data: ReviewLikeCreateManyInput | ReviewLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewLike createManyAndReturn
   */
  export type ReviewLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewLikes.
     */
    data: ReviewLikeCreateManyInput | ReviewLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewLike update
   */
  export type ReviewLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewLike.
     */
    data: XOR<ReviewLikeUpdateInput, ReviewLikeUncheckedUpdateInput>
    /**
     * Choose, which ReviewLike to update.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike updateMany
   */
  export type ReviewLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewLikes.
     */
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyInput>
    /**
     * Filter which ReviewLikes to update
     */
    where?: ReviewLikeWhereInput
    /**
     * Limit how many ReviewLikes to update.
     */
    limit?: number
  }

  /**
   * ReviewLike updateManyAndReturn
   */
  export type ReviewLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * The data used to update ReviewLikes.
     */
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyInput>
    /**
     * Filter which ReviewLikes to update
     */
    where?: ReviewLikeWhereInput
    /**
     * Limit how many ReviewLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewLike upsert
   */
  export type ReviewLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewLike to update in case it exists.
     */
    where: ReviewLikeWhereUniqueInput
    /**
     * In case the ReviewLike found by the `where` argument doesn't exist, create a new ReviewLike with this data.
     */
    create: XOR<ReviewLikeCreateInput, ReviewLikeUncheckedCreateInput>
    /**
     * In case the ReviewLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewLikeUpdateInput, ReviewLikeUncheckedUpdateInput>
  }

  /**
   * ReviewLike delete
   */
  export type ReviewLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter which ReviewLike to delete.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike deleteMany
   */
  export type ReviewLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewLikes to delete
     */
    where?: ReviewLikeWhereInput
    /**
     * Limit how many ReviewLikes to delete.
     */
    limit?: number
  }

  /**
   * ReviewLike without action
   */
  export type ReviewLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
  }


  /**
   * Model UserSettings
   */

  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    theme: string | null
    language: string | null
    show18plus: boolean | null
    showActivity: boolean | null
    showAnimeList: boolean | null
    showAllCommentsInProfile: boolean | null
    showCollections: boolean | null
    showLikedCollections: boolean | null
    showLikedReviews: boolean | null
    showReviews: boolean | null
    notificationsOn: boolean | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    theme: string | null
    language: string | null
    show18plus: boolean | null
    showActivity: boolean | null
    showAnimeList: boolean | null
    showAllCommentsInProfile: boolean | null
    showCollections: boolean | null
    showLikedCollections: boolean | null
    showLikedReviews: boolean | null
    showReviews: boolean | null
    notificationsOn: boolean | null
  }

  export type UserSettingsCountAggregateOutputType = {
    id: number
    userId: number
    theme: number
    language: number
    show18plus: number
    showActivity: number
    showAnimeList: number
    showAllCommentsInProfile: number
    showCollections: number
    showLikedCollections: number
    showLikedReviews: number
    showReviews: number
    notificationsOn: number
    preferredGenres: number
    _all: number
  }


  export type UserSettingsMinAggregateInputType = {
    id?: true
    userId?: true
    theme?: true
    language?: true
    show18plus?: true
    showActivity?: true
    showAnimeList?: true
    showAllCommentsInProfile?: true
    showCollections?: true
    showLikedCollections?: true
    showLikedReviews?: true
    showReviews?: true
    notificationsOn?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    theme?: true
    language?: true
    show18plus?: true
    showActivity?: true
    showAnimeList?: true
    showAllCommentsInProfile?: true
    showCollections?: true
    showLikedCollections?: true
    showLikedReviews?: true
    showReviews?: true
    notificationsOn?: true
  }

  export type UserSettingsCountAggregateInputType = {
    id?: true
    userId?: true
    theme?: true
    language?: true
    show18plus?: true
    showActivity?: true
    showAnimeList?: true
    showAllCommentsInProfile?: true
    showCollections?: true
    showLikedCollections?: true
    showLikedReviews?: true
    showReviews?: true
    notificationsOn?: true
    preferredGenres?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to aggregate.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }




  export type UserSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithAggregationInput | UserSettingsOrderByWithAggregationInput[]
    by: UserSettingsScalarFieldEnum[] | UserSettingsScalarFieldEnum
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }

  export type UserSettingsGroupByOutputType = {
    id: string
    userId: string
    theme: string
    language: string
    show18plus: boolean
    showActivity: boolean
    showAnimeList: boolean
    showAllCommentsInProfile: boolean
    showCollections: boolean
    showLikedCollections: boolean
    showLikedReviews: boolean
    showReviews: boolean
    notificationsOn: boolean
    preferredGenres: string[]
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    theme?: boolean
    language?: boolean
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    theme?: boolean
    language?: boolean
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    theme?: boolean
    language?: boolean
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectScalar = {
    id?: boolean
    userId?: boolean
    theme?: boolean
    language?: boolean
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: boolean
  }

  export type UserSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "theme" | "language" | "show18plus" | "showActivity" | "showAnimeList" | "showAllCommentsInProfile" | "showCollections" | "showLikedCollections" | "showLikedReviews" | "showReviews" | "notificationsOn" | "preferredGenres", ExtArgs["result"]["userSettings"]>
  export type UserSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSettings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      theme: string
      language: string
      show18plus: boolean
      showActivity: boolean
      showAnimeList: boolean
      showAllCommentsInProfile: boolean
      showCollections: boolean
      showLikedCollections: boolean
      showLikedReviews: boolean
      showReviews: boolean
      notificationsOn: boolean
      preferredGenres: string[]
    }, ExtArgs["result"]["userSettings"]>
    composites: {}
  }

  type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsDefaultArgs> = $Result.GetResult<Prisma.$UserSettingsPayload, S>

  type UserSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSettingsCountAggregateInputType | true
    }

  export interface UserSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSettings'], meta: { name: 'UserSettings' } }
    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSettingsFindUniqueArgs>(args: SelectSubset<T, UserSettingsFindUniqueArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSettingsFindFirstArgs>(args?: SelectSubset<T, UserSettingsFindFirstArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSettingsFindManyArgs>(args?: SelectSubset<T, UserSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
     */
    create<T extends UserSettingsCreateArgs>(args: SelectSubset<T, UserSettingsCreateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSettings.
     * @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSettingsCreateManyArgs>(args?: SelectSubset<T, UserSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSettings and returns the data saved in the database.
     * @param {UserSettingsCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
     */
    delete<T extends UserSettingsDeleteArgs>(args: SelectSubset<T, UserSettingsDeleteArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSettingsUpdateArgs>(args: SelectSubset<T, UserSettingsUpdateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSettingsDeleteManyArgs>(args?: SelectSubset<T, UserSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSettingsUpdateManyArgs>(args: SelectSubset<T, UserSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings and returns the data updated in the database.
     * @param {UserSettingsUpdateManyAndReturnArgs} args - Arguments to update many UserSettings.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
     */
    upsert<T extends UserSettingsUpsertArgs>(args: SelectSubset<T, UserSettingsUpsertArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSettings model
   */
  readonly fields: UserSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSettings model
   */
  interface UserSettingsFieldRefs {
    readonly id: FieldRef<"UserSettings", 'String'>
    readonly userId: FieldRef<"UserSettings", 'String'>
    readonly theme: FieldRef<"UserSettings", 'String'>
    readonly language: FieldRef<"UserSettings", 'String'>
    readonly show18plus: FieldRef<"UserSettings", 'Boolean'>
    readonly showActivity: FieldRef<"UserSettings", 'Boolean'>
    readonly showAnimeList: FieldRef<"UserSettings", 'Boolean'>
    readonly showAllCommentsInProfile: FieldRef<"UserSettings", 'Boolean'>
    readonly showCollections: FieldRef<"UserSettings", 'Boolean'>
    readonly showLikedCollections: FieldRef<"UserSettings", 'Boolean'>
    readonly showLikedReviews: FieldRef<"UserSettings", 'Boolean'>
    readonly showReviews: FieldRef<"UserSettings", 'Boolean'>
    readonly notificationsOn: FieldRef<"UserSettings", 'Boolean'>
    readonly preferredGenres: FieldRef<"UserSettings", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * UserSettings findUnique
   */
  export type UserSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findUniqueOrThrow
   */
  export type UserSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findFirst
   */
  export type UserSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findFirstOrThrow
   */
  export type UserSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSettings.
     */
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }

  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSettings createManyAndReturn
   */
  export type UserSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSettings.
     */
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
  }

  /**
   * UserSettings updateManyAndReturn
   */
  export type UserSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     */
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     */
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }

  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter which UserSettings to delete.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to delete.
     */
    limit?: number
  }

  /**
   * UserSettings without action
   */
  export type UserSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    displayName: string | null
    picture: string | null
    role: $Enums.UserRole | null
    method: $Enums.AuthMethod | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    displayName: string | null
    picture: string | null
    role: $Enums.UserRole | null
    method: $Enums.AuthMethod | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    displayName: number
    picture: number
    role: number
    method: number
    isVerified: number
    isTwoFactorEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    displayName?: true
    picture?: true
    role?: true
    method?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    displayName?: true
    picture?: true
    role?: true
    method?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    displayName?: true
    picture?: true
    role?: true
    method?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    displayName: string
    picture: string | null
    role: $Enums.UserRole
    method: $Enums.AuthMethod
    isVerified: boolean
    isTwoFactorEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    displayName?: boolean
    picture?: boolean
    role?: boolean
    method?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    animeProgress?: boolean | User$animeProgressArgs<ExtArgs>
    animeCollection?: boolean | User$animeCollectionArgs<ExtArgs>
    likedCollection?: boolean | User$likedCollectionArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    animeComments?: boolean | User$animeCommentsArgs<ExtArgs>
    animeCommentLikes?: boolean | User$animeCommentLikesArgs<ExtArgs>
    animeReviews?: boolean | User$animeReviewsArgs<ExtArgs>
    reviewLikes?: boolean | User$reviewLikesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    displayName?: boolean
    picture?: boolean
    role?: boolean
    method?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    displayName?: boolean
    picture?: boolean
    role?: boolean
    method?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    displayName?: boolean
    picture?: boolean
    role?: boolean
    method?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "displayName" | "picture" | "role" | "method" | "isVerified" | "isTwoFactorEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    animeProgress?: boolean | User$animeProgressArgs<ExtArgs>
    animeCollection?: boolean | User$animeCollectionArgs<ExtArgs>
    likedCollection?: boolean | User$likedCollectionArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    animeComments?: boolean | User$animeCommentsArgs<ExtArgs>
    animeCommentLikes?: boolean | User$animeCommentLikesArgs<ExtArgs>
    animeReviews?: boolean | User$animeReviewsArgs<ExtArgs>
    reviewLikes?: boolean | User$reviewLikesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      animeProgress: Prisma.$AnimeEpisodeProgressPayload<ExtArgs>[]
      animeCollection: Prisma.$AnimeCollectionPayload<ExtArgs>[]
      likedCollection: Prisma.$AnimeCollectionLikePayload<ExtArgs>[]
      settings: Prisma.$UserSettingsPayload<ExtArgs> | null
      animeComments: Prisma.$CommentPayload<ExtArgs>[]
      animeCommentLikes: Prisma.$CommentLikePayload<ExtArgs>[]
      animeReviews: Prisma.$ReviewPayload<ExtArgs>[]
      reviewLikes: Prisma.$ReviewLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
      displayName: string
      picture: string | null
      role: $Enums.UserRole
      method: $Enums.AuthMethod
      isVerified: boolean
      isTwoFactorEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    animeProgress<T extends User$animeProgressArgs<ExtArgs> = {}>(args?: Subset<T, User$animeProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeEpisodeProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    animeCollection<T extends User$animeCollectionArgs<ExtArgs> = {}>(args?: Subset<T, User$animeCollectionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likedCollection<T extends User$likedCollectionArgs<ExtArgs> = {}>(args?: Subset<T, User$likedCollectionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimeCollectionLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    settings<T extends User$settingsArgs<ExtArgs> = {}>(args?: Subset<T, User$settingsArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    animeComments<T extends User$animeCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$animeCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    animeCommentLikes<T extends User$animeCommentLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$animeCommentLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    animeReviews<T extends User$animeReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$animeReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviewLikes<T extends User$reviewLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly picture: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly method: FieldRef<"User", 'AuthMethod'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly isTwoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.animeProgress
   */
  export type User$animeProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeEpisodeProgress
     */
    select?: AnimeEpisodeProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeEpisodeProgress
     */
    omit?: AnimeEpisodeProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeEpisodeProgressInclude<ExtArgs> | null
    where?: AnimeEpisodeProgressWhereInput
    orderBy?: AnimeEpisodeProgressOrderByWithRelationInput | AnimeEpisodeProgressOrderByWithRelationInput[]
    cursor?: AnimeEpisodeProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeEpisodeProgressScalarFieldEnum | AnimeEpisodeProgressScalarFieldEnum[]
  }

  /**
   * User.animeCollection
   */
  export type User$animeCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollection
     */
    select?: AnimeCollectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollection
     */
    omit?: AnimeCollectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionInclude<ExtArgs> | null
    where?: AnimeCollectionWhereInput
    orderBy?: AnimeCollectionOrderByWithRelationInput | AnimeCollectionOrderByWithRelationInput[]
    cursor?: AnimeCollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeCollectionScalarFieldEnum | AnimeCollectionScalarFieldEnum[]
  }

  /**
   * User.likedCollection
   */
  export type User$likedCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimeCollectionLike
     */
    select?: AnimeCollectionLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnimeCollectionLike
     */
    omit?: AnimeCollectionLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimeCollectionLikeInclude<ExtArgs> | null
    where?: AnimeCollectionLikeWhereInput
    orderBy?: AnimeCollectionLikeOrderByWithRelationInput | AnimeCollectionLikeOrderByWithRelationInput[]
    cursor?: AnimeCollectionLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimeCollectionLikeScalarFieldEnum | AnimeCollectionLikeScalarFieldEnum[]
  }

  /**
   * User.settings
   */
  export type User$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    where?: UserSettingsWhereInput
  }

  /**
   * User.animeComments
   */
  export type User$animeCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.animeCommentLikes
   */
  export type User$animeCommentLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommentLike
     */
    omit?: CommentLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    cursor?: CommentLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * User.animeReviews
   */
  export type User$animeReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.reviewLikes
   */
  export type User$reviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    where?: ReviewLikeWhereInput
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    cursor?: ReviewLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DemographicScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    name: 'name',
    russian: 'russian'
  };

  export type DemographicScalarFieldEnum = (typeof DemographicScalarFieldEnum)[keyof typeof DemographicScalarFieldEnum]


  export const AnimeDemographicScalarFieldEnum: {
    animeId: 'animeId',
    demographicId: 'demographicId'
  };

  export type AnimeDemographicScalarFieldEnum = (typeof AnimeDemographicScalarFieldEnum)[keyof typeof AnimeDemographicScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    name: 'name',
    russian: 'russian'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const AnimeGenreScalarFieldEnum: {
    animeId: 'animeId',
    genreId: 'genreId'
  };

  export type AnimeGenreScalarFieldEnum = (typeof AnimeGenreScalarFieldEnum)[keyof typeof AnimeGenreScalarFieldEnum]


  export const AnimePosterScalarFieldEnum: {
    id: 'id',
    shikimoriId: 'shikimoriId',
    animeId: 'animeId',
    originalUrl: 'originalUrl',
    mainUrl: 'mainUrl'
  };

  export type AnimePosterScalarFieldEnum = (typeof AnimePosterScalarFieldEnum)[keyof typeof AnimePosterScalarFieldEnum]


  export const RelatedAnimeScalarFieldEnum: {
    id: 'id',
    animeId: 'animeId',
    relatedAnimeId: 'relatedAnimeId',
    relationKind: 'relationKind'
  };

  export type RelatedAnimeScalarFieldEnum = (typeof RelatedAnimeScalarFieldEnum)[keyof typeof RelatedAnimeScalarFieldEnum]


  export const ScreenshotsScalarFieldEnum: {
    id: 'id',
    shikimoriId: 'shikimoriId',
    originalUrl: 'originalUrl',
    x332Url: 'x332Url'
  };

  export type ScreenshotsScalarFieldEnum = (typeof ScreenshotsScalarFieldEnum)[keyof typeof ScreenshotsScalarFieldEnum]


  export const AnimeScreenshotScalarFieldEnum: {
    animeId: 'animeId',
    screenshotId: 'screenshotId'
  };

  export type AnimeScreenshotScalarFieldEnum = (typeof AnimeScreenshotScalarFieldEnum)[keyof typeof AnimeScreenshotScalarFieldEnum]


  export const StudioScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imageUrl: 'imageUrl'
  };

  export type StudioScalarFieldEnum = (typeof StudioScalarFieldEnum)[keyof typeof StudioScalarFieldEnum]


  export const AnimeStudioScalarFieldEnum: {
    animeId: 'animeId',
    studioId: 'studioId'
  };

  export type AnimeStudioScalarFieldEnum = (typeof AnimeStudioScalarFieldEnum)[keyof typeof AnimeStudioScalarFieldEnum]


  export const ThemeScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    name: 'name',
    russian: 'russian'
  };

  export type ThemeScalarFieldEnum = (typeof ThemeScalarFieldEnum)[keyof typeof ThemeScalarFieldEnum]


  export const AnimeThemeScalarFieldEnum: {
    animeId: 'animeId',
    themeId: 'themeId'
  };

  export type AnimeThemeScalarFieldEnum = (typeof AnimeThemeScalarFieldEnum)[keyof typeof AnimeThemeScalarFieldEnum]


  export const AnimeVideoScalarFieldEnum: {
    animeId: 'animeId',
    videoId: 'videoId'
  };

  export type AnimeVideoScalarFieldEnum = (typeof AnimeVideoScalarFieldEnum)[keyof typeof AnimeVideoScalarFieldEnum]


  export const VideoScalarFieldEnum: {
    id: 'id',
    shikimoriId: 'shikimoriId',
    url: 'url',
    name: 'name',
    kind: 'kind',
    playerUrl: 'playerUrl',
    imageUrl: 'imageUrl'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const AnimeScalarFieldEnum: {
    id: 'id',
    alias: 'alias',
    malId: 'malId',
    shikimoriId: 'shikimoriId',
    name: 'name',
    description: 'description',
    russian: 'russian',
    english: 'english',
    japanese: 'japanese',
    synonyms: 'synonyms',
    status: 'status',
    kind: 'kind',
    episodes: 'episodes',
    episodesAired: 'episodesAired',
    duration: 'duration',
    score: 'score',
    shikimoriScore: 'shikimoriScore',
    airedOn: 'airedOn',
    releasedOn: 'releasedOn',
    shikimoriUrl: 'shikimoriUrl',
    season: 'season',
    isCensored: 'isCensored',
    rating: 'rating',
    nextEpisodeAt: 'nextEpisodeAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AnimeScalarFieldEnum = (typeof AnimeScalarFieldEnum)[keyof typeof AnimeScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    type: 'type',
    provider: 'provider',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    type: 'type',
    expiresIn: 'expiresIn',
    createdAt: 'createdAt'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const ParsingSessionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    type: 'type',
    lastProcessedPage: 'lastProcessedPage',
    processedPages: 'processedPages',
    processedItems: 'processedItems',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParsingSessionScalarFieldEnum = (typeof ParsingSessionScalarFieldEnum)[keyof typeof ParsingSessionScalarFieldEnum]


  export const AnimeCollectionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    description: 'description',
    isPublic: 'isPublic',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AnimeCollectionScalarFieldEnum = (typeof AnimeCollectionScalarFieldEnum)[keyof typeof AnimeCollectionScalarFieldEnum]


  export const AnimeInCollectionScalarFieldEnum: {
    collectionId: 'collectionId',
    animeId: 'animeId',
    note: 'note',
    addedAt: 'addedAt'
  };

  export type AnimeInCollectionScalarFieldEnum = (typeof AnimeInCollectionScalarFieldEnum)[keyof typeof AnimeInCollectionScalarFieldEnum]


  export const AnimeCollectionLikeScalarFieldEnum: {
    userId: 'userId',
    collectionId: 'collectionId',
    likedAt: 'likedAt'
  };

  export type AnimeCollectionLikeScalarFieldEnum = (typeof AnimeCollectionLikeScalarFieldEnum)[keyof typeof AnimeCollectionLikeScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    userId: 'userId',
    animeId: 'animeId',
    likesCount: 'likesCount',
    episode: 'episode',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CommentLikeScalarFieldEnum: {
    userId: 'userId',
    commentId: 'commentId',
    likedAt: 'likedAt'
  };

  export type CommentLikeScalarFieldEnum = (typeof CommentLikeScalarFieldEnum)[keyof typeof CommentLikeScalarFieldEnum]


  export const AnimeEpisodeProgressScalarFieldEnum: {
    userId: 'userId',
    animeId: 'animeId',
    episode: 'episode',
    timestamp: 'timestamp',
    isWatched: 'isWatched',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type AnimeEpisodeProgressScalarFieldEnum = (typeof AnimeEpisodeProgressScalarFieldEnum)[keyof typeof AnimeEpisodeProgressScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    animeId: 'animeId',
    rating: 'rating',
    title: 'title',
    description: 'description',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ReviewLikeScalarFieldEnum: {
    userId: 'userId',
    reviewId: 'reviewId',
    likedAt: 'likedAt'
  };

  export type ReviewLikeScalarFieldEnum = (typeof ReviewLikeScalarFieldEnum)[keyof typeof ReviewLikeScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    theme: 'theme',
    language: 'language',
    show18plus: 'show18plus',
    showActivity: 'showActivity',
    showAnimeList: 'showAnimeList',
    showAllCommentsInProfile: 'showAllCommentsInProfile',
    showCollections: 'showCollections',
    showLikedCollections: 'showLikedCollections',
    showLikedReviews: 'showLikedReviews',
    showReviews: 'showReviews',
    notificationsOn: 'notificationsOn',
    preferredGenres: 'preferredGenres'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    displayName: 'displayName',
    picture: 'picture',
    role: 'role',
    method: 'method',
    isVerified: 'isVerified',
    isTwoFactorEnabled: 'isTwoFactorEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'RelationKind'
   */
  export type EnumRelationKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelationKind'>
    


  /**
   * Reference to a field of type 'RelationKind[]'
   */
  export type ListEnumRelationKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelationKind[]'>
    


  /**
   * Reference to a field of type 'VideoKindEnum'
   */
  export type EnumVideoKindEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VideoKindEnum'>
    


  /**
   * Reference to a field of type 'VideoKindEnum[]'
   */
  export type ListEnumVideoKindEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VideoKindEnum[]'>
    


  /**
   * Reference to a field of type 'AnimeStatus'
   */
  export type EnumAnimeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeStatus'>
    


  /**
   * Reference to a field of type 'AnimeStatus[]'
   */
  export type ListEnumAnimeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeStatus[]'>
    


  /**
   * Reference to a field of type 'AnimeKind'
   */
  export type EnumAnimeKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeKind'>
    


  /**
   * Reference to a field of type 'AnimeKind[]'
   */
  export type ListEnumAnimeKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeKind[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AnimeRating'
   */
  export type EnumAnimeRatingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeRating'>
    


  /**
   * Reference to a field of type 'AnimeRating[]'
   */
  export type ListEnumAnimeRatingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeRating[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TokenType'
   */
  export type EnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType'>
    


  /**
   * Reference to a field of type 'TokenType[]'
   */
  export type ListEnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType[]'>
    


  /**
   * Reference to a field of type 'ParsingSessionType'
   */
  export type EnumParsingSessionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParsingSessionType'>
    


  /**
   * Reference to a field of type 'ParsingSessionType[]'
   */
  export type ListEnumParsingSessionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParsingSessionType[]'>
    


  /**
   * Reference to a field of type 'AnimeCollectionType'
   */
  export type EnumAnimeCollectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeCollectionType'>
    


  /**
   * Reference to a field of type 'AnimeCollectionType[]'
   */
  export type ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnimeCollectionType[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'AuthMethod'
   */
  export type EnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod'>
    


  /**
   * Reference to a field of type 'AuthMethod[]'
   */
  export type ListEnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod[]'>
    
  /**
   * Deep Input Types
   */


  export type DemographicWhereInput = {
    AND?: DemographicWhereInput | DemographicWhereInput[]
    OR?: DemographicWhereInput[]
    NOT?: DemographicWhereInput | DemographicWhereInput[]
    id?: StringFilter<"Demographic"> | string
    requestId?: IntFilter<"Demographic"> | number
    name?: StringFilter<"Demographic"> | string
    russian?: StringFilter<"Demographic"> | string
    animes?: AnimeDemographicListRelationFilter
  }

  export type DemographicOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
    animes?: AnimeDemographicOrderByRelationAggregateInput
  }

  export type DemographicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    requestId?: number
    name?: string
    AND?: DemographicWhereInput | DemographicWhereInput[]
    OR?: DemographicWhereInput[]
    NOT?: DemographicWhereInput | DemographicWhereInput[]
    russian?: StringFilter<"Demographic"> | string
    animes?: AnimeDemographicListRelationFilter
  }, "id" | "requestId" | "name">

  export type DemographicOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
    _count?: DemographicCountOrderByAggregateInput
    _avg?: DemographicAvgOrderByAggregateInput
    _max?: DemographicMaxOrderByAggregateInput
    _min?: DemographicMinOrderByAggregateInput
    _sum?: DemographicSumOrderByAggregateInput
  }

  export type DemographicScalarWhereWithAggregatesInput = {
    AND?: DemographicScalarWhereWithAggregatesInput | DemographicScalarWhereWithAggregatesInput[]
    OR?: DemographicScalarWhereWithAggregatesInput[]
    NOT?: DemographicScalarWhereWithAggregatesInput | DemographicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Demographic"> | string
    requestId?: IntWithAggregatesFilter<"Demographic"> | number
    name?: StringWithAggregatesFilter<"Demographic"> | string
    russian?: StringWithAggregatesFilter<"Demographic"> | string
  }

  export type AnimeDemographicWhereInput = {
    AND?: AnimeDemographicWhereInput | AnimeDemographicWhereInput[]
    OR?: AnimeDemographicWhereInput[]
    NOT?: AnimeDemographicWhereInput | AnimeDemographicWhereInput[]
    animeId?: StringFilter<"AnimeDemographic"> | string
    demographicId?: StringFilter<"AnimeDemographic"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    demographic?: XOR<DemographicScalarRelationFilter, DemographicWhereInput>
  }

  export type AnimeDemographicOrderByWithRelationInput = {
    animeId?: SortOrder
    demographicId?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    demographic?: DemographicOrderByWithRelationInput
  }

  export type AnimeDemographicWhereUniqueInput = Prisma.AtLeast<{
    animeId_demographicId?: AnimeDemographicAnimeIdDemographicIdCompoundUniqueInput
    AND?: AnimeDemographicWhereInput | AnimeDemographicWhereInput[]
    OR?: AnimeDemographicWhereInput[]
    NOT?: AnimeDemographicWhereInput | AnimeDemographicWhereInput[]
    animeId?: StringFilter<"AnimeDemographic"> | string
    demographicId?: StringFilter<"AnimeDemographic"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    demographic?: XOR<DemographicScalarRelationFilter, DemographicWhereInput>
  }, "animeId_demographicId">

  export type AnimeDemographicOrderByWithAggregationInput = {
    animeId?: SortOrder
    demographicId?: SortOrder
    _count?: AnimeDemographicCountOrderByAggregateInput
    _max?: AnimeDemographicMaxOrderByAggregateInput
    _min?: AnimeDemographicMinOrderByAggregateInput
  }

  export type AnimeDemographicScalarWhereWithAggregatesInput = {
    AND?: AnimeDemographicScalarWhereWithAggregatesInput | AnimeDemographicScalarWhereWithAggregatesInput[]
    OR?: AnimeDemographicScalarWhereWithAggregatesInput[]
    NOT?: AnimeDemographicScalarWhereWithAggregatesInput | AnimeDemographicScalarWhereWithAggregatesInput[]
    animeId?: StringWithAggregatesFilter<"AnimeDemographic"> | string
    demographicId?: StringWithAggregatesFilter<"AnimeDemographic"> | string
  }

  export type GenreWhereInput = {
    AND?: GenreWhereInput | GenreWhereInput[]
    OR?: GenreWhereInput[]
    NOT?: GenreWhereInput | GenreWhereInput[]
    id?: StringFilter<"Genre"> | string
    requestId?: IntFilter<"Genre"> | number
    name?: StringFilter<"Genre"> | string
    russian?: StringFilter<"Genre"> | string
    animes?: AnimeGenreListRelationFilter
  }

  export type GenreOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
    animes?: AnimeGenreOrderByRelationAggregateInput
  }

  export type GenreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    requestId?: number
    name?: string
    AND?: GenreWhereInput | GenreWhereInput[]
    OR?: GenreWhereInput[]
    NOT?: GenreWhereInput | GenreWhereInput[]
    russian?: StringFilter<"Genre"> | string
    animes?: AnimeGenreListRelationFilter
  }, "id" | "requestId" | "name">

  export type GenreOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
    _count?: GenreCountOrderByAggregateInput
    _avg?: GenreAvgOrderByAggregateInput
    _max?: GenreMaxOrderByAggregateInput
    _min?: GenreMinOrderByAggregateInput
    _sum?: GenreSumOrderByAggregateInput
  }

  export type GenreScalarWhereWithAggregatesInput = {
    AND?: GenreScalarWhereWithAggregatesInput | GenreScalarWhereWithAggregatesInput[]
    OR?: GenreScalarWhereWithAggregatesInput[]
    NOT?: GenreScalarWhereWithAggregatesInput | GenreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Genre"> | string
    requestId?: IntWithAggregatesFilter<"Genre"> | number
    name?: StringWithAggregatesFilter<"Genre"> | string
    russian?: StringWithAggregatesFilter<"Genre"> | string
  }

  export type AnimeGenreWhereInput = {
    AND?: AnimeGenreWhereInput | AnimeGenreWhereInput[]
    OR?: AnimeGenreWhereInput[]
    NOT?: AnimeGenreWhereInput | AnimeGenreWhereInput[]
    animeId?: StringFilter<"AnimeGenre"> | string
    genreId?: StringFilter<"AnimeGenre"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    genre?: XOR<GenreScalarRelationFilter, GenreWhereInput>
  }

  export type AnimeGenreOrderByWithRelationInput = {
    animeId?: SortOrder
    genreId?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    genre?: GenreOrderByWithRelationInput
  }

  export type AnimeGenreWhereUniqueInput = Prisma.AtLeast<{
    animeId_genreId?: AnimeGenreAnimeIdGenreIdCompoundUniqueInput
    AND?: AnimeGenreWhereInput | AnimeGenreWhereInput[]
    OR?: AnimeGenreWhereInput[]
    NOT?: AnimeGenreWhereInput | AnimeGenreWhereInput[]
    animeId?: StringFilter<"AnimeGenre"> | string
    genreId?: StringFilter<"AnimeGenre"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    genre?: XOR<GenreScalarRelationFilter, GenreWhereInput>
  }, "animeId_genreId">

  export type AnimeGenreOrderByWithAggregationInput = {
    animeId?: SortOrder
    genreId?: SortOrder
    _count?: AnimeGenreCountOrderByAggregateInput
    _max?: AnimeGenreMaxOrderByAggregateInput
    _min?: AnimeGenreMinOrderByAggregateInput
  }

  export type AnimeGenreScalarWhereWithAggregatesInput = {
    AND?: AnimeGenreScalarWhereWithAggregatesInput | AnimeGenreScalarWhereWithAggregatesInput[]
    OR?: AnimeGenreScalarWhereWithAggregatesInput[]
    NOT?: AnimeGenreScalarWhereWithAggregatesInput | AnimeGenreScalarWhereWithAggregatesInput[]
    animeId?: StringWithAggregatesFilter<"AnimeGenre"> | string
    genreId?: StringWithAggregatesFilter<"AnimeGenre"> | string
  }

  export type AnimePosterWhereInput = {
    AND?: AnimePosterWhereInput | AnimePosterWhereInput[]
    OR?: AnimePosterWhereInput[]
    NOT?: AnimePosterWhereInput | AnimePosterWhereInput[]
    id?: StringFilter<"AnimePoster"> | string
    shikimoriId?: StringNullableFilter<"AnimePoster"> | string | null
    animeId?: StringFilter<"AnimePoster"> | string
    originalUrl?: StringNullableFilter<"AnimePoster"> | string | null
    mainUrl?: StringNullableFilter<"AnimePoster"> | string | null
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
  }

  export type AnimePosterOrderByWithRelationInput = {
    id?: SortOrder
    shikimoriId?: SortOrderInput | SortOrder
    animeId?: SortOrder
    originalUrl?: SortOrderInput | SortOrder
    mainUrl?: SortOrderInput | SortOrder
    anime?: AnimeOrderByWithRelationInput
  }

  export type AnimePosterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnimePosterWhereInput | AnimePosterWhereInput[]
    OR?: AnimePosterWhereInput[]
    NOT?: AnimePosterWhereInput | AnimePosterWhereInput[]
    shikimoriId?: StringNullableFilter<"AnimePoster"> | string | null
    animeId?: StringFilter<"AnimePoster"> | string
    originalUrl?: StringNullableFilter<"AnimePoster"> | string | null
    mainUrl?: StringNullableFilter<"AnimePoster"> | string | null
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
  }, "id">

  export type AnimePosterOrderByWithAggregationInput = {
    id?: SortOrder
    shikimoriId?: SortOrderInput | SortOrder
    animeId?: SortOrder
    originalUrl?: SortOrderInput | SortOrder
    mainUrl?: SortOrderInput | SortOrder
    _count?: AnimePosterCountOrderByAggregateInput
    _max?: AnimePosterMaxOrderByAggregateInput
    _min?: AnimePosterMinOrderByAggregateInput
  }

  export type AnimePosterScalarWhereWithAggregatesInput = {
    AND?: AnimePosterScalarWhereWithAggregatesInput | AnimePosterScalarWhereWithAggregatesInput[]
    OR?: AnimePosterScalarWhereWithAggregatesInput[]
    NOT?: AnimePosterScalarWhereWithAggregatesInput | AnimePosterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AnimePoster"> | string
    shikimoriId?: StringNullableWithAggregatesFilter<"AnimePoster"> | string | null
    animeId?: StringWithAggregatesFilter<"AnimePoster"> | string
    originalUrl?: StringNullableWithAggregatesFilter<"AnimePoster"> | string | null
    mainUrl?: StringNullableWithAggregatesFilter<"AnimePoster"> | string | null
  }

  export type RelatedAnimeWhereInput = {
    AND?: RelatedAnimeWhereInput | RelatedAnimeWhereInput[]
    OR?: RelatedAnimeWhereInput[]
    NOT?: RelatedAnimeWhereInput | RelatedAnimeWhereInput[]
    id?: StringFilter<"RelatedAnime"> | string
    animeId?: StringFilter<"RelatedAnime"> | string
    relatedAnimeId?: StringFilter<"RelatedAnime"> | string
    relationKind?: EnumRelationKindFilter<"RelatedAnime"> | $Enums.RelationKind
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    related?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
  }

  export type RelatedAnimeOrderByWithRelationInput = {
    id?: SortOrder
    animeId?: SortOrder
    relatedAnimeId?: SortOrder
    relationKind?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    related?: AnimeOrderByWithRelationInput
  }

  export type RelatedAnimeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    animeId_relatedAnimeId?: RelatedAnimeAnimeIdRelatedAnimeIdCompoundUniqueInput
    AND?: RelatedAnimeWhereInput | RelatedAnimeWhereInput[]
    OR?: RelatedAnimeWhereInput[]
    NOT?: RelatedAnimeWhereInput | RelatedAnimeWhereInput[]
    animeId?: StringFilter<"RelatedAnime"> | string
    relatedAnimeId?: StringFilter<"RelatedAnime"> | string
    relationKind?: EnumRelationKindFilter<"RelatedAnime"> | $Enums.RelationKind
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    related?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
  }, "id" | "animeId_relatedAnimeId">

  export type RelatedAnimeOrderByWithAggregationInput = {
    id?: SortOrder
    animeId?: SortOrder
    relatedAnimeId?: SortOrder
    relationKind?: SortOrder
    _count?: RelatedAnimeCountOrderByAggregateInput
    _max?: RelatedAnimeMaxOrderByAggregateInput
    _min?: RelatedAnimeMinOrderByAggregateInput
  }

  export type RelatedAnimeScalarWhereWithAggregatesInput = {
    AND?: RelatedAnimeScalarWhereWithAggregatesInput | RelatedAnimeScalarWhereWithAggregatesInput[]
    OR?: RelatedAnimeScalarWhereWithAggregatesInput[]
    NOT?: RelatedAnimeScalarWhereWithAggregatesInput | RelatedAnimeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RelatedAnime"> | string
    animeId?: StringWithAggregatesFilter<"RelatedAnime"> | string
    relatedAnimeId?: StringWithAggregatesFilter<"RelatedAnime"> | string
    relationKind?: EnumRelationKindWithAggregatesFilter<"RelatedAnime"> | $Enums.RelationKind
  }

  export type ScreenshotsWhereInput = {
    AND?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    OR?: ScreenshotsWhereInput[]
    NOT?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    id?: StringFilter<"Screenshots"> | string
    shikimoriId?: StringFilter<"Screenshots"> | string
    originalUrl?: StringNullableFilter<"Screenshots"> | string | null
    x332Url?: StringNullableFilter<"Screenshots"> | string | null
    animeScreenshot?: AnimeScreenshotListRelationFilter
  }

  export type ScreenshotsOrderByWithRelationInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    originalUrl?: SortOrderInput | SortOrder
    x332Url?: SortOrderInput | SortOrder
    animeScreenshot?: AnimeScreenshotOrderByRelationAggregateInput
  }

  export type ScreenshotsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shikimoriId?: string
    AND?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    OR?: ScreenshotsWhereInput[]
    NOT?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    originalUrl?: StringNullableFilter<"Screenshots"> | string | null
    x332Url?: StringNullableFilter<"Screenshots"> | string | null
    animeScreenshot?: AnimeScreenshotListRelationFilter
  }, "id" | "shikimoriId">

  export type ScreenshotsOrderByWithAggregationInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    originalUrl?: SortOrderInput | SortOrder
    x332Url?: SortOrderInput | SortOrder
    _count?: ScreenshotsCountOrderByAggregateInput
    _max?: ScreenshotsMaxOrderByAggregateInput
    _min?: ScreenshotsMinOrderByAggregateInput
  }

  export type ScreenshotsScalarWhereWithAggregatesInput = {
    AND?: ScreenshotsScalarWhereWithAggregatesInput | ScreenshotsScalarWhereWithAggregatesInput[]
    OR?: ScreenshotsScalarWhereWithAggregatesInput[]
    NOT?: ScreenshotsScalarWhereWithAggregatesInput | ScreenshotsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Screenshots"> | string
    shikimoriId?: StringWithAggregatesFilter<"Screenshots"> | string
    originalUrl?: StringNullableWithAggregatesFilter<"Screenshots"> | string | null
    x332Url?: StringNullableWithAggregatesFilter<"Screenshots"> | string | null
  }

  export type AnimeScreenshotWhereInput = {
    AND?: AnimeScreenshotWhereInput | AnimeScreenshotWhereInput[]
    OR?: AnimeScreenshotWhereInput[]
    NOT?: AnimeScreenshotWhereInput | AnimeScreenshotWhereInput[]
    animeId?: StringFilter<"AnimeScreenshot"> | string
    screenshotId?: StringFilter<"AnimeScreenshot"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    screenshot?: XOR<ScreenshotsScalarRelationFilter, ScreenshotsWhereInput>
  }

  export type AnimeScreenshotOrderByWithRelationInput = {
    animeId?: SortOrder
    screenshotId?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    screenshot?: ScreenshotsOrderByWithRelationInput
  }

  export type AnimeScreenshotWhereUniqueInput = Prisma.AtLeast<{
    animeId_screenshotId?: AnimeScreenshotAnimeIdScreenshotIdCompoundUniqueInput
    AND?: AnimeScreenshotWhereInput | AnimeScreenshotWhereInput[]
    OR?: AnimeScreenshotWhereInput[]
    NOT?: AnimeScreenshotWhereInput | AnimeScreenshotWhereInput[]
    animeId?: StringFilter<"AnimeScreenshot"> | string
    screenshotId?: StringFilter<"AnimeScreenshot"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    screenshot?: XOR<ScreenshotsScalarRelationFilter, ScreenshotsWhereInput>
  }, "animeId_screenshotId">

  export type AnimeScreenshotOrderByWithAggregationInput = {
    animeId?: SortOrder
    screenshotId?: SortOrder
    _count?: AnimeScreenshotCountOrderByAggregateInput
    _max?: AnimeScreenshotMaxOrderByAggregateInput
    _min?: AnimeScreenshotMinOrderByAggregateInput
  }

  export type AnimeScreenshotScalarWhereWithAggregatesInput = {
    AND?: AnimeScreenshotScalarWhereWithAggregatesInput | AnimeScreenshotScalarWhereWithAggregatesInput[]
    OR?: AnimeScreenshotScalarWhereWithAggregatesInput[]
    NOT?: AnimeScreenshotScalarWhereWithAggregatesInput | AnimeScreenshotScalarWhereWithAggregatesInput[]
    animeId?: StringWithAggregatesFilter<"AnimeScreenshot"> | string
    screenshotId?: StringWithAggregatesFilter<"AnimeScreenshot"> | string
  }

  export type StudioWhereInput = {
    AND?: StudioWhereInput | StudioWhereInput[]
    OR?: StudioWhereInput[]
    NOT?: StudioWhereInput | StudioWhereInput[]
    id?: StringFilter<"Studio"> | string
    name?: StringFilter<"Studio"> | string
    imageUrl?: StringNullableFilter<"Studio"> | string | null
    AnimeStudio?: AnimeStudioListRelationFilter
  }

  export type StudioOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    AnimeStudio?: AnimeStudioOrderByRelationAggregateInput
  }

  export type StudioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: StudioWhereInput | StudioWhereInput[]
    OR?: StudioWhereInput[]
    NOT?: StudioWhereInput | StudioWhereInput[]
    imageUrl?: StringNullableFilter<"Studio"> | string | null
    AnimeStudio?: AnimeStudioListRelationFilter
  }, "id" | "name">

  export type StudioOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    _count?: StudioCountOrderByAggregateInput
    _max?: StudioMaxOrderByAggregateInput
    _min?: StudioMinOrderByAggregateInput
  }

  export type StudioScalarWhereWithAggregatesInput = {
    AND?: StudioScalarWhereWithAggregatesInput | StudioScalarWhereWithAggregatesInput[]
    OR?: StudioScalarWhereWithAggregatesInput[]
    NOT?: StudioScalarWhereWithAggregatesInput | StudioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Studio"> | string
    name?: StringWithAggregatesFilter<"Studio"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Studio"> | string | null
  }

  export type AnimeStudioWhereInput = {
    AND?: AnimeStudioWhereInput | AnimeStudioWhereInput[]
    OR?: AnimeStudioWhereInput[]
    NOT?: AnimeStudioWhereInput | AnimeStudioWhereInput[]
    animeId?: StringFilter<"AnimeStudio"> | string
    studioId?: StringFilter<"AnimeStudio"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    studio?: XOR<StudioScalarRelationFilter, StudioWhereInput>
  }

  export type AnimeStudioOrderByWithRelationInput = {
    animeId?: SortOrder
    studioId?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    studio?: StudioOrderByWithRelationInput
  }

  export type AnimeStudioWhereUniqueInput = Prisma.AtLeast<{
    animeId_studioId?: AnimeStudioAnimeIdStudioIdCompoundUniqueInput
    AND?: AnimeStudioWhereInput | AnimeStudioWhereInput[]
    OR?: AnimeStudioWhereInput[]
    NOT?: AnimeStudioWhereInput | AnimeStudioWhereInput[]
    animeId?: StringFilter<"AnimeStudio"> | string
    studioId?: StringFilter<"AnimeStudio"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    studio?: XOR<StudioScalarRelationFilter, StudioWhereInput>
  }, "animeId_studioId">

  export type AnimeStudioOrderByWithAggregationInput = {
    animeId?: SortOrder
    studioId?: SortOrder
    _count?: AnimeStudioCountOrderByAggregateInput
    _max?: AnimeStudioMaxOrderByAggregateInput
    _min?: AnimeStudioMinOrderByAggregateInput
  }

  export type AnimeStudioScalarWhereWithAggregatesInput = {
    AND?: AnimeStudioScalarWhereWithAggregatesInput | AnimeStudioScalarWhereWithAggregatesInput[]
    OR?: AnimeStudioScalarWhereWithAggregatesInput[]
    NOT?: AnimeStudioScalarWhereWithAggregatesInput | AnimeStudioScalarWhereWithAggregatesInput[]
    animeId?: StringWithAggregatesFilter<"AnimeStudio"> | string
    studioId?: StringWithAggregatesFilter<"AnimeStudio"> | string
  }

  export type ThemeWhereInput = {
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    id?: StringFilter<"Theme"> | string
    requestId?: IntFilter<"Theme"> | number
    name?: StringFilter<"Theme"> | string
    russian?: StringFilter<"Theme"> | string
    animes?: AnimeThemeListRelationFilter
  }

  export type ThemeOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
    animes?: AnimeThemeOrderByRelationAggregateInput
  }

  export type ThemeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    requestId?: number
    name?: string
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    russian?: StringFilter<"Theme"> | string
    animes?: AnimeThemeListRelationFilter
  }, "id" | "requestId" | "name">

  export type ThemeOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
    _count?: ThemeCountOrderByAggregateInput
    _avg?: ThemeAvgOrderByAggregateInput
    _max?: ThemeMaxOrderByAggregateInput
    _min?: ThemeMinOrderByAggregateInput
    _sum?: ThemeSumOrderByAggregateInput
  }

  export type ThemeScalarWhereWithAggregatesInput = {
    AND?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    OR?: ThemeScalarWhereWithAggregatesInput[]
    NOT?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Theme"> | string
    requestId?: IntWithAggregatesFilter<"Theme"> | number
    name?: StringWithAggregatesFilter<"Theme"> | string
    russian?: StringWithAggregatesFilter<"Theme"> | string
  }

  export type AnimeThemeWhereInput = {
    AND?: AnimeThemeWhereInput | AnimeThemeWhereInput[]
    OR?: AnimeThemeWhereInput[]
    NOT?: AnimeThemeWhereInput | AnimeThemeWhereInput[]
    animeId?: StringFilter<"AnimeTheme"> | string
    themeId?: StringFilter<"AnimeTheme"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    theme?: XOR<ThemeScalarRelationFilter, ThemeWhereInput>
  }

  export type AnimeThemeOrderByWithRelationInput = {
    animeId?: SortOrder
    themeId?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    theme?: ThemeOrderByWithRelationInput
  }

  export type AnimeThemeWhereUniqueInput = Prisma.AtLeast<{
    animeId_themeId?: AnimeThemeAnimeIdThemeIdCompoundUniqueInput
    AND?: AnimeThemeWhereInput | AnimeThemeWhereInput[]
    OR?: AnimeThemeWhereInput[]
    NOT?: AnimeThemeWhereInput | AnimeThemeWhereInput[]
    animeId?: StringFilter<"AnimeTheme"> | string
    themeId?: StringFilter<"AnimeTheme"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    theme?: XOR<ThemeScalarRelationFilter, ThemeWhereInput>
  }, "animeId_themeId">

  export type AnimeThemeOrderByWithAggregationInput = {
    animeId?: SortOrder
    themeId?: SortOrder
    _count?: AnimeThemeCountOrderByAggregateInput
    _max?: AnimeThemeMaxOrderByAggregateInput
    _min?: AnimeThemeMinOrderByAggregateInput
  }

  export type AnimeThemeScalarWhereWithAggregatesInput = {
    AND?: AnimeThemeScalarWhereWithAggregatesInput | AnimeThemeScalarWhereWithAggregatesInput[]
    OR?: AnimeThemeScalarWhereWithAggregatesInput[]
    NOT?: AnimeThemeScalarWhereWithAggregatesInput | AnimeThemeScalarWhereWithAggregatesInput[]
    animeId?: StringWithAggregatesFilter<"AnimeTheme"> | string
    themeId?: StringWithAggregatesFilter<"AnimeTheme"> | string
  }

  export type AnimeVideoWhereInput = {
    AND?: AnimeVideoWhereInput | AnimeVideoWhereInput[]
    OR?: AnimeVideoWhereInput[]
    NOT?: AnimeVideoWhereInput | AnimeVideoWhereInput[]
    animeId?: StringFilter<"AnimeVideo"> | string
    videoId?: StringFilter<"AnimeVideo"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    video?: XOR<VideoScalarRelationFilter, VideoWhereInput>
  }

  export type AnimeVideoOrderByWithRelationInput = {
    animeId?: SortOrder
    videoId?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    video?: VideoOrderByWithRelationInput
  }

  export type AnimeVideoWhereUniqueInput = Prisma.AtLeast<{
    animeId_videoId?: AnimeVideoAnimeIdVideoIdCompoundUniqueInput
    AND?: AnimeVideoWhereInput | AnimeVideoWhereInput[]
    OR?: AnimeVideoWhereInput[]
    NOT?: AnimeVideoWhereInput | AnimeVideoWhereInput[]
    animeId?: StringFilter<"AnimeVideo"> | string
    videoId?: StringFilter<"AnimeVideo"> | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    video?: XOR<VideoScalarRelationFilter, VideoWhereInput>
  }, "animeId_videoId">

  export type AnimeVideoOrderByWithAggregationInput = {
    animeId?: SortOrder
    videoId?: SortOrder
    _count?: AnimeVideoCountOrderByAggregateInput
    _max?: AnimeVideoMaxOrderByAggregateInput
    _min?: AnimeVideoMinOrderByAggregateInput
  }

  export type AnimeVideoScalarWhereWithAggregatesInput = {
    AND?: AnimeVideoScalarWhereWithAggregatesInput | AnimeVideoScalarWhereWithAggregatesInput[]
    OR?: AnimeVideoScalarWhereWithAggregatesInput[]
    NOT?: AnimeVideoScalarWhereWithAggregatesInput | AnimeVideoScalarWhereWithAggregatesInput[]
    animeId?: StringWithAggregatesFilter<"AnimeVideo"> | string
    videoId?: StringWithAggregatesFilter<"AnimeVideo"> | string
  }

  export type VideoWhereInput = {
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    id?: StringFilter<"Video"> | string
    shikimoriId?: StringNullableFilter<"Video"> | string | null
    url?: StringNullableFilter<"Video"> | string | null
    name?: StringNullableFilter<"Video"> | string | null
    kind?: EnumVideoKindEnumFilter<"Video"> | $Enums.VideoKindEnum
    playerUrl?: StringNullableFilter<"Video"> | string | null
    imageUrl?: StringNullableFilter<"Video"> | string | null
    animeVideo?: AnimeVideoListRelationFilter
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    shikimoriId?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    kind?: SortOrder
    playerUrl?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    animeVideo?: AnimeVideoOrderByRelationAggregateInput
  }

  export type VideoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shikimoriId?: string
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    url?: StringNullableFilter<"Video"> | string | null
    name?: StringNullableFilter<"Video"> | string | null
    kind?: EnumVideoKindEnumFilter<"Video"> | $Enums.VideoKindEnum
    playerUrl?: StringNullableFilter<"Video"> | string | null
    imageUrl?: StringNullableFilter<"Video"> | string | null
    animeVideo?: AnimeVideoListRelationFilter
  }, "id" | "shikimoriId">

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    shikimoriId?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    kind?: SortOrder
    playerUrl?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    _count?: VideoCountOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    OR?: VideoScalarWhereWithAggregatesInput[]
    NOT?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Video"> | string
    shikimoriId?: StringNullableWithAggregatesFilter<"Video"> | string | null
    url?: StringNullableWithAggregatesFilter<"Video"> | string | null
    name?: StringNullableWithAggregatesFilter<"Video"> | string | null
    kind?: EnumVideoKindEnumWithAggregatesFilter<"Video"> | $Enums.VideoKindEnum
    playerUrl?: StringNullableWithAggregatesFilter<"Video"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Video"> | string | null
  }

  export type AnimeWhereInput = {
    AND?: AnimeWhereInput | AnimeWhereInput[]
    OR?: AnimeWhereInput[]
    NOT?: AnimeWhereInput | AnimeWhereInput[]
    id?: StringFilter<"Anime"> | string
    alias?: StringNullableFilter<"Anime"> | string | null
    malId?: StringNullableFilter<"Anime"> | string | null
    shikimoriId?: StringNullableFilter<"Anime"> | string | null
    name?: StringFilter<"Anime"> | string
    description?: StringNullableFilter<"Anime"> | string | null
    russian?: StringNullableFilter<"Anime"> | string | null
    english?: StringNullableFilter<"Anime"> | string | null
    japanese?: StringNullableFilter<"Anime"> | string | null
    synonyms?: StringNullableListFilter<"Anime">
    status?: EnumAnimeStatusFilter<"Anime"> | $Enums.AnimeStatus
    kind?: EnumAnimeKindNullableFilter<"Anime"> | $Enums.AnimeKind | null
    episodes?: IntFilter<"Anime"> | number
    episodesAired?: IntFilter<"Anime"> | number
    duration?: IntNullableFilter<"Anime"> | number | null
    score?: FloatNullableFilter<"Anime"> | number | null
    shikimoriScore?: FloatNullableFilter<"Anime"> | number | null
    airedOn?: StringNullableFilter<"Anime"> | string | null
    releasedOn?: StringNullableFilter<"Anime"> | string | null
    shikimoriUrl?: StringNullableFilter<"Anime"> | string | null
    season?: StringNullableFilter<"Anime"> | string | null
    isCensored?: BoolNullableFilter<"Anime"> | boolean | null
    rating?: EnumAnimeRatingNullableFilter<"Anime"> | $Enums.AnimeRating | null
    nextEpisodeAt?: StringNullableFilter<"Anime"> | string | null
    createdAt?: DateTimeFilter<"Anime"> | Date | string
    updatedAt?: DateTimeFilter<"Anime"> | Date | string
    poster?: AnimePosterListRelationFilter
    studios?: AnimeStudioListRelationFilter
    related?: RelatedAnimeListRelationFilter
    videos?: AnimeVideoListRelationFilter
    screenshots?: AnimeScreenshotListRelationFilter
    genres?: AnimeGenreListRelationFilter
    theme?: AnimeThemeListRelationFilter
    demographic?: AnimeDemographicListRelationFilter
    relatedAnime?: RelatedAnimeListRelationFilter
    userProgress?: AnimeEpisodeProgressListRelationFilter
    animeInCollection?: AnimeInCollectionListRelationFilter
    comments?: CommentListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type AnimeOrderByWithRelationInput = {
    id?: SortOrder
    alias?: SortOrderInput | SortOrder
    malId?: SortOrderInput | SortOrder
    shikimoriId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    russian?: SortOrderInput | SortOrder
    english?: SortOrderInput | SortOrder
    japanese?: SortOrderInput | SortOrder
    synonyms?: SortOrder
    status?: SortOrder
    kind?: SortOrderInput | SortOrder
    episodes?: SortOrder
    episodesAired?: SortOrder
    duration?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    shikimoriScore?: SortOrderInput | SortOrder
    airedOn?: SortOrderInput | SortOrder
    releasedOn?: SortOrderInput | SortOrder
    shikimoriUrl?: SortOrderInput | SortOrder
    season?: SortOrderInput | SortOrder
    isCensored?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    nextEpisodeAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    poster?: AnimePosterOrderByRelationAggregateInput
    studios?: AnimeStudioOrderByRelationAggregateInput
    related?: RelatedAnimeOrderByRelationAggregateInput
    videos?: AnimeVideoOrderByRelationAggregateInput
    screenshots?: AnimeScreenshotOrderByRelationAggregateInput
    genres?: AnimeGenreOrderByRelationAggregateInput
    theme?: AnimeThemeOrderByRelationAggregateInput
    demographic?: AnimeDemographicOrderByRelationAggregateInput
    relatedAnime?: RelatedAnimeOrderByRelationAggregateInput
    userProgress?: AnimeEpisodeProgressOrderByRelationAggregateInput
    animeInCollection?: AnimeInCollectionOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type AnimeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    malId?: string
    shikimoriId?: string
    name_shikimoriId?: AnimeNameShikimoriIdCompoundUniqueInput
    AND?: AnimeWhereInput | AnimeWhereInput[]
    OR?: AnimeWhereInput[]
    NOT?: AnimeWhereInput | AnimeWhereInput[]
    alias?: StringNullableFilter<"Anime"> | string | null
    name?: StringFilter<"Anime"> | string
    description?: StringNullableFilter<"Anime"> | string | null
    russian?: StringNullableFilter<"Anime"> | string | null
    english?: StringNullableFilter<"Anime"> | string | null
    japanese?: StringNullableFilter<"Anime"> | string | null
    synonyms?: StringNullableListFilter<"Anime">
    status?: EnumAnimeStatusFilter<"Anime"> | $Enums.AnimeStatus
    kind?: EnumAnimeKindNullableFilter<"Anime"> | $Enums.AnimeKind | null
    episodes?: IntFilter<"Anime"> | number
    episodesAired?: IntFilter<"Anime"> | number
    duration?: IntNullableFilter<"Anime"> | number | null
    score?: FloatNullableFilter<"Anime"> | number | null
    shikimoriScore?: FloatNullableFilter<"Anime"> | number | null
    airedOn?: StringNullableFilter<"Anime"> | string | null
    releasedOn?: StringNullableFilter<"Anime"> | string | null
    shikimoriUrl?: StringNullableFilter<"Anime"> | string | null
    season?: StringNullableFilter<"Anime"> | string | null
    isCensored?: BoolNullableFilter<"Anime"> | boolean | null
    rating?: EnumAnimeRatingNullableFilter<"Anime"> | $Enums.AnimeRating | null
    nextEpisodeAt?: StringNullableFilter<"Anime"> | string | null
    createdAt?: DateTimeFilter<"Anime"> | Date | string
    updatedAt?: DateTimeFilter<"Anime"> | Date | string
    poster?: AnimePosterListRelationFilter
    studios?: AnimeStudioListRelationFilter
    related?: RelatedAnimeListRelationFilter
    videos?: AnimeVideoListRelationFilter
    screenshots?: AnimeScreenshotListRelationFilter
    genres?: AnimeGenreListRelationFilter
    theme?: AnimeThemeListRelationFilter
    demographic?: AnimeDemographicListRelationFilter
    relatedAnime?: RelatedAnimeListRelationFilter
    userProgress?: AnimeEpisodeProgressListRelationFilter
    animeInCollection?: AnimeInCollectionListRelationFilter
    comments?: CommentListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id" | "malId" | "shikimoriId" | "name_shikimoriId">

  export type AnimeOrderByWithAggregationInput = {
    id?: SortOrder
    alias?: SortOrderInput | SortOrder
    malId?: SortOrderInput | SortOrder
    shikimoriId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    russian?: SortOrderInput | SortOrder
    english?: SortOrderInput | SortOrder
    japanese?: SortOrderInput | SortOrder
    synonyms?: SortOrder
    status?: SortOrder
    kind?: SortOrderInput | SortOrder
    episodes?: SortOrder
    episodesAired?: SortOrder
    duration?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    shikimoriScore?: SortOrderInput | SortOrder
    airedOn?: SortOrderInput | SortOrder
    releasedOn?: SortOrderInput | SortOrder
    shikimoriUrl?: SortOrderInput | SortOrder
    season?: SortOrderInput | SortOrder
    isCensored?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    nextEpisodeAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AnimeCountOrderByAggregateInput
    _avg?: AnimeAvgOrderByAggregateInput
    _max?: AnimeMaxOrderByAggregateInput
    _min?: AnimeMinOrderByAggregateInput
    _sum?: AnimeSumOrderByAggregateInput
  }

  export type AnimeScalarWhereWithAggregatesInput = {
    AND?: AnimeScalarWhereWithAggregatesInput | AnimeScalarWhereWithAggregatesInput[]
    OR?: AnimeScalarWhereWithAggregatesInput[]
    NOT?: AnimeScalarWhereWithAggregatesInput | AnimeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Anime"> | string
    alias?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    malId?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    shikimoriId?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    name?: StringWithAggregatesFilter<"Anime"> | string
    description?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    russian?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    english?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    japanese?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    synonyms?: StringNullableListFilter<"Anime">
    status?: EnumAnimeStatusWithAggregatesFilter<"Anime"> | $Enums.AnimeStatus
    kind?: EnumAnimeKindNullableWithAggregatesFilter<"Anime"> | $Enums.AnimeKind | null
    episodes?: IntWithAggregatesFilter<"Anime"> | number
    episodesAired?: IntWithAggregatesFilter<"Anime"> | number
    duration?: IntNullableWithAggregatesFilter<"Anime"> | number | null
    score?: FloatNullableWithAggregatesFilter<"Anime"> | number | null
    shikimoriScore?: FloatNullableWithAggregatesFilter<"Anime"> | number | null
    airedOn?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    releasedOn?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    shikimoriUrl?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    season?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    isCensored?: BoolNullableWithAggregatesFilter<"Anime"> | boolean | null
    rating?: EnumAnimeRatingNullableWithAggregatesFilter<"Anime"> | $Enums.AnimeRating | null
    nextEpisodeAt?: StringNullableWithAggregatesFilter<"Anime"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Anime"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Anime"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntNullableFilter<"Account"> | number | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntNullableFilter<"Account"> | number | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expiresAt?: IntNullableWithAggregatesFilter<"Account"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: StringFilter<"Token"> | string
    email?: StringFilter<"Token"> | string
    token?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Token"> | Date | string
    createdAt?: DateTimeFilter<"Token"> | Date | string
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    email?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Token"> | Date | string
    createdAt?: DateTimeFilter<"Token"> | Date | string
  }, "id" | "token">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Token"> | string
    email?: StringWithAggregatesFilter<"Token"> | string
    token?: StringWithAggregatesFilter<"Token"> | string
    type?: EnumTokenTypeWithAggregatesFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
  }

  export type ParsingSessionWhereInput = {
    AND?: ParsingSessionWhereInput | ParsingSessionWhereInput[]
    OR?: ParsingSessionWhereInput[]
    NOT?: ParsingSessionWhereInput | ParsingSessionWhereInput[]
    id?: IntFilter<"ParsingSession"> | number
    name?: StringFilter<"ParsingSession"> | string
    status?: StringFilter<"ParsingSession"> | string
    type?: EnumParsingSessionTypeFilter<"ParsingSession"> | $Enums.ParsingSessionType
    lastProcessedPage?: IntFilter<"ParsingSession"> | number
    processedPages?: IntFilter<"ParsingSession"> | number
    processedItems?: IntFilter<"ParsingSession"> | number
    createdAt?: DateTimeFilter<"ParsingSession"> | Date | string
    updatedAt?: DateTimeFilter<"ParsingSession"> | Date | string
  }

  export type ParsingSessionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    lastProcessedPage?: SortOrder
    processedPages?: SortOrder
    processedItems?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParsingSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ParsingSessionWhereInput | ParsingSessionWhereInput[]
    OR?: ParsingSessionWhereInput[]
    NOT?: ParsingSessionWhereInput | ParsingSessionWhereInput[]
    name?: StringFilter<"ParsingSession"> | string
    status?: StringFilter<"ParsingSession"> | string
    type?: EnumParsingSessionTypeFilter<"ParsingSession"> | $Enums.ParsingSessionType
    lastProcessedPage?: IntFilter<"ParsingSession"> | number
    processedPages?: IntFilter<"ParsingSession"> | number
    processedItems?: IntFilter<"ParsingSession"> | number
    createdAt?: DateTimeFilter<"ParsingSession"> | Date | string
    updatedAt?: DateTimeFilter<"ParsingSession"> | Date | string
  }, "id" | "id">

  export type ParsingSessionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    lastProcessedPage?: SortOrder
    processedPages?: SortOrder
    processedItems?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParsingSessionCountOrderByAggregateInput
    _avg?: ParsingSessionAvgOrderByAggregateInput
    _max?: ParsingSessionMaxOrderByAggregateInput
    _min?: ParsingSessionMinOrderByAggregateInput
    _sum?: ParsingSessionSumOrderByAggregateInput
  }

  export type ParsingSessionScalarWhereWithAggregatesInput = {
    AND?: ParsingSessionScalarWhereWithAggregatesInput | ParsingSessionScalarWhereWithAggregatesInput[]
    OR?: ParsingSessionScalarWhereWithAggregatesInput[]
    NOT?: ParsingSessionScalarWhereWithAggregatesInput | ParsingSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ParsingSession"> | number
    name?: StringWithAggregatesFilter<"ParsingSession"> | string
    status?: StringWithAggregatesFilter<"ParsingSession"> | string
    type?: EnumParsingSessionTypeWithAggregatesFilter<"ParsingSession"> | $Enums.ParsingSessionType
    lastProcessedPage?: IntWithAggregatesFilter<"ParsingSession"> | number
    processedPages?: IntWithAggregatesFilter<"ParsingSession"> | number
    processedItems?: IntWithAggregatesFilter<"ParsingSession"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ParsingSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParsingSession"> | Date | string
  }

  export type AnimeCollectionWhereInput = {
    AND?: AnimeCollectionWhereInput | AnimeCollectionWhereInput[]
    OR?: AnimeCollectionWhereInput[]
    NOT?: AnimeCollectionWhereInput | AnimeCollectionWhereInput[]
    id?: StringFilter<"AnimeCollection"> | string
    userId?: StringFilter<"AnimeCollection"> | string
    title?: StringFilter<"AnimeCollection"> | string
    description?: StringNullableFilter<"AnimeCollection"> | string | null
    isPublic?: BoolFilter<"AnimeCollection"> | boolean
    type?: EnumAnimeCollectionTypeFilter<"AnimeCollection"> | $Enums.AnimeCollectionType
    createdAt?: DateTimeFilter<"AnimeCollection"> | Date | string
    updatedAt?: DateTimeFilter<"AnimeCollection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: AnimeInCollectionListRelationFilter
    likes?: AnimeCollectionLikeListRelationFilter
  }

  export type AnimeCollectionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: AnimeInCollectionOrderByRelationAggregateInput
    likes?: AnimeCollectionLikeOrderByRelationAggregateInput
  }

  export type AnimeCollectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnimeCollectionWhereInput | AnimeCollectionWhereInput[]
    OR?: AnimeCollectionWhereInput[]
    NOT?: AnimeCollectionWhereInput | AnimeCollectionWhereInput[]
    userId?: StringFilter<"AnimeCollection"> | string
    title?: StringFilter<"AnimeCollection"> | string
    description?: StringNullableFilter<"AnimeCollection"> | string | null
    isPublic?: BoolFilter<"AnimeCollection"> | boolean
    type?: EnumAnimeCollectionTypeFilter<"AnimeCollection"> | $Enums.AnimeCollectionType
    createdAt?: DateTimeFilter<"AnimeCollection"> | Date | string
    updatedAt?: DateTimeFilter<"AnimeCollection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: AnimeInCollectionListRelationFilter
    likes?: AnimeCollectionLikeListRelationFilter
  }, "id">

  export type AnimeCollectionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AnimeCollectionCountOrderByAggregateInput
    _max?: AnimeCollectionMaxOrderByAggregateInput
    _min?: AnimeCollectionMinOrderByAggregateInput
  }

  export type AnimeCollectionScalarWhereWithAggregatesInput = {
    AND?: AnimeCollectionScalarWhereWithAggregatesInput | AnimeCollectionScalarWhereWithAggregatesInput[]
    OR?: AnimeCollectionScalarWhereWithAggregatesInput[]
    NOT?: AnimeCollectionScalarWhereWithAggregatesInput | AnimeCollectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AnimeCollection"> | string
    userId?: StringWithAggregatesFilter<"AnimeCollection"> | string
    title?: StringWithAggregatesFilter<"AnimeCollection"> | string
    description?: StringNullableWithAggregatesFilter<"AnimeCollection"> | string | null
    isPublic?: BoolWithAggregatesFilter<"AnimeCollection"> | boolean
    type?: EnumAnimeCollectionTypeWithAggregatesFilter<"AnimeCollection"> | $Enums.AnimeCollectionType
    createdAt?: DateTimeWithAggregatesFilter<"AnimeCollection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AnimeCollection"> | Date | string
  }

  export type AnimeInCollectionWhereInput = {
    AND?: AnimeInCollectionWhereInput | AnimeInCollectionWhereInput[]
    OR?: AnimeInCollectionWhereInput[]
    NOT?: AnimeInCollectionWhereInput | AnimeInCollectionWhereInput[]
    collectionId?: StringFilter<"AnimeInCollection"> | string
    animeId?: StringFilter<"AnimeInCollection"> | string
    note?: StringNullableFilter<"AnimeInCollection"> | string | null
    addedAt?: DateTimeFilter<"AnimeInCollection"> | Date | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    collection?: XOR<AnimeCollectionScalarRelationFilter, AnimeCollectionWhereInput>
  }

  export type AnimeInCollectionOrderByWithRelationInput = {
    collectionId?: SortOrder
    animeId?: SortOrder
    note?: SortOrderInput | SortOrder
    addedAt?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    collection?: AnimeCollectionOrderByWithRelationInput
  }

  export type AnimeInCollectionWhereUniqueInput = Prisma.AtLeast<{
    collectionId_animeId?: AnimeInCollectionCollectionIdAnimeIdCompoundUniqueInput
    AND?: AnimeInCollectionWhereInput | AnimeInCollectionWhereInput[]
    OR?: AnimeInCollectionWhereInput[]
    NOT?: AnimeInCollectionWhereInput | AnimeInCollectionWhereInput[]
    collectionId?: StringFilter<"AnimeInCollection"> | string
    animeId?: StringFilter<"AnimeInCollection"> | string
    note?: StringNullableFilter<"AnimeInCollection"> | string | null
    addedAt?: DateTimeFilter<"AnimeInCollection"> | Date | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    collection?: XOR<AnimeCollectionScalarRelationFilter, AnimeCollectionWhereInput>
  }, "collectionId_animeId">

  export type AnimeInCollectionOrderByWithAggregationInput = {
    collectionId?: SortOrder
    animeId?: SortOrder
    note?: SortOrderInput | SortOrder
    addedAt?: SortOrder
    _count?: AnimeInCollectionCountOrderByAggregateInput
    _max?: AnimeInCollectionMaxOrderByAggregateInput
    _min?: AnimeInCollectionMinOrderByAggregateInput
  }

  export type AnimeInCollectionScalarWhereWithAggregatesInput = {
    AND?: AnimeInCollectionScalarWhereWithAggregatesInput | AnimeInCollectionScalarWhereWithAggregatesInput[]
    OR?: AnimeInCollectionScalarWhereWithAggregatesInput[]
    NOT?: AnimeInCollectionScalarWhereWithAggregatesInput | AnimeInCollectionScalarWhereWithAggregatesInput[]
    collectionId?: StringWithAggregatesFilter<"AnimeInCollection"> | string
    animeId?: StringWithAggregatesFilter<"AnimeInCollection"> | string
    note?: StringNullableWithAggregatesFilter<"AnimeInCollection"> | string | null
    addedAt?: DateTimeWithAggregatesFilter<"AnimeInCollection"> | Date | string
  }

  export type AnimeCollectionLikeWhereInput = {
    AND?: AnimeCollectionLikeWhereInput | AnimeCollectionLikeWhereInput[]
    OR?: AnimeCollectionLikeWhereInput[]
    NOT?: AnimeCollectionLikeWhereInput | AnimeCollectionLikeWhereInput[]
    userId?: StringFilter<"AnimeCollectionLike"> | string
    collectionId?: StringFilter<"AnimeCollectionLike"> | string
    likedAt?: DateTimeFilter<"AnimeCollectionLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    collection?: XOR<AnimeCollectionScalarRelationFilter, AnimeCollectionWhereInput>
  }

  export type AnimeCollectionLikeOrderByWithRelationInput = {
    userId?: SortOrder
    collectionId?: SortOrder
    likedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    collection?: AnimeCollectionOrderByWithRelationInput
  }

  export type AnimeCollectionLikeWhereUniqueInput = Prisma.AtLeast<{
    userId_collectionId?: AnimeCollectionLikeUserIdCollectionIdCompoundUniqueInput
    AND?: AnimeCollectionLikeWhereInput | AnimeCollectionLikeWhereInput[]
    OR?: AnimeCollectionLikeWhereInput[]
    NOT?: AnimeCollectionLikeWhereInput | AnimeCollectionLikeWhereInput[]
    userId?: StringFilter<"AnimeCollectionLike"> | string
    collectionId?: StringFilter<"AnimeCollectionLike"> | string
    likedAt?: DateTimeFilter<"AnimeCollectionLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    collection?: XOR<AnimeCollectionScalarRelationFilter, AnimeCollectionWhereInput>
  }, "userId_collectionId">

  export type AnimeCollectionLikeOrderByWithAggregationInput = {
    userId?: SortOrder
    collectionId?: SortOrder
    likedAt?: SortOrder
    _count?: AnimeCollectionLikeCountOrderByAggregateInput
    _max?: AnimeCollectionLikeMaxOrderByAggregateInput
    _min?: AnimeCollectionLikeMinOrderByAggregateInput
  }

  export type AnimeCollectionLikeScalarWhereWithAggregatesInput = {
    AND?: AnimeCollectionLikeScalarWhereWithAggregatesInput | AnimeCollectionLikeScalarWhereWithAggregatesInput[]
    OR?: AnimeCollectionLikeScalarWhereWithAggregatesInput[]
    NOT?: AnimeCollectionLikeScalarWhereWithAggregatesInput | AnimeCollectionLikeScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"AnimeCollectionLike"> | string
    collectionId?: StringWithAggregatesFilter<"AnimeCollectionLike"> | string
    likedAt?: DateTimeWithAggregatesFilter<"AnimeCollectionLike"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    animeId?: StringNullableFilter<"Comment"> | string | null
    likesCount?: IntFilter<"Comment"> | number
    episode?: IntNullableFilter<"Comment"> | number | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    anime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    parent?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
    CommentLike?: CommentLikeListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    animeId?: SortOrderInput | SortOrder
    likesCount?: SortOrder
    episode?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    anime?: AnimeOrderByWithRelationInput
    parent?: CommentOrderByWithRelationInput
    replies?: CommentOrderByRelationAggregateInput
    CommentLike?: CommentLikeOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    animeId?: StringNullableFilter<"Comment"> | string | null
    likesCount?: IntFilter<"Comment"> | number
    episode?: IntNullableFilter<"Comment"> | number | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    anime?: XOR<AnimeNullableScalarRelationFilter, AnimeWhereInput> | null
    parent?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
    CommentLike?: CommentLikeListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    animeId?: SortOrderInput | SortOrder
    likesCount?: SortOrder
    episode?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    animeId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    likesCount?: IntWithAggregatesFilter<"Comment"> | number
    episode?: IntNullableWithAggregatesFilter<"Comment"> | number | null
    parentId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type CommentLikeWhereInput = {
    AND?: CommentLikeWhereInput | CommentLikeWhereInput[]
    OR?: CommentLikeWhereInput[]
    NOT?: CommentLikeWhereInput | CommentLikeWhereInput[]
    userId?: StringFilter<"CommentLike"> | string
    commentId?: StringFilter<"CommentLike"> | string
    likedAt?: DateTimeFilter<"CommentLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }

  export type CommentLikeOrderByWithRelationInput = {
    userId?: SortOrder
    commentId?: SortOrder
    likedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type CommentLikeWhereUniqueInput = Prisma.AtLeast<{
    userId_commentId?: CommentLikeUserIdCommentIdCompoundUniqueInput
    AND?: CommentLikeWhereInput | CommentLikeWhereInput[]
    OR?: CommentLikeWhereInput[]
    NOT?: CommentLikeWhereInput | CommentLikeWhereInput[]
    userId?: StringFilter<"CommentLike"> | string
    commentId?: StringFilter<"CommentLike"> | string
    likedAt?: DateTimeFilter<"CommentLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }, "userId_commentId" | "userId_commentId">

  export type CommentLikeOrderByWithAggregationInput = {
    userId?: SortOrder
    commentId?: SortOrder
    likedAt?: SortOrder
    _count?: CommentLikeCountOrderByAggregateInput
    _max?: CommentLikeMaxOrderByAggregateInput
    _min?: CommentLikeMinOrderByAggregateInput
  }

  export type CommentLikeScalarWhereWithAggregatesInput = {
    AND?: CommentLikeScalarWhereWithAggregatesInput | CommentLikeScalarWhereWithAggregatesInput[]
    OR?: CommentLikeScalarWhereWithAggregatesInput[]
    NOT?: CommentLikeScalarWhereWithAggregatesInput | CommentLikeScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"CommentLike"> | string
    commentId?: StringWithAggregatesFilter<"CommentLike"> | string
    likedAt?: DateTimeWithAggregatesFilter<"CommentLike"> | Date | string
  }

  export type AnimeEpisodeProgressWhereInput = {
    AND?: AnimeEpisodeProgressWhereInput | AnimeEpisodeProgressWhereInput[]
    OR?: AnimeEpisodeProgressWhereInput[]
    NOT?: AnimeEpisodeProgressWhereInput | AnimeEpisodeProgressWhereInput[]
    userId?: StringFilter<"AnimeEpisodeProgress"> | string
    animeId?: StringFilter<"AnimeEpisodeProgress"> | string
    episode?: IntFilter<"AnimeEpisodeProgress"> | number
    timestamp?: IntFilter<"AnimeEpisodeProgress"> | number
    isWatched?: BoolFilter<"AnimeEpisodeProgress"> | boolean
    updatedAt?: DateTimeFilter<"AnimeEpisodeProgress"> | Date | string
    createdAt?: DateTimeFilter<"AnimeEpisodeProgress"> | Date | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AnimeEpisodeProgressOrderByWithRelationInput = {
    userId?: SortOrder
    animeId?: SortOrder
    episode?: SortOrder
    timestamp?: SortOrder
    isWatched?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    anime?: AnimeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AnimeEpisodeProgressWhereUniqueInput = Prisma.AtLeast<{
    userId_animeId_episode?: AnimeEpisodeProgressUserIdAnimeIdEpisodeCompoundUniqueInput
    AND?: AnimeEpisodeProgressWhereInput | AnimeEpisodeProgressWhereInput[]
    OR?: AnimeEpisodeProgressWhereInput[]
    NOT?: AnimeEpisodeProgressWhereInput | AnimeEpisodeProgressWhereInput[]
    userId?: StringFilter<"AnimeEpisodeProgress"> | string
    animeId?: StringFilter<"AnimeEpisodeProgress"> | string
    episode?: IntFilter<"AnimeEpisodeProgress"> | number
    timestamp?: IntFilter<"AnimeEpisodeProgress"> | number
    isWatched?: BoolFilter<"AnimeEpisodeProgress"> | boolean
    updatedAt?: DateTimeFilter<"AnimeEpisodeProgress"> | Date | string
    createdAt?: DateTimeFilter<"AnimeEpisodeProgress"> | Date | string
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId_animeId_episode">

  export type AnimeEpisodeProgressOrderByWithAggregationInput = {
    userId?: SortOrder
    animeId?: SortOrder
    episode?: SortOrder
    timestamp?: SortOrder
    isWatched?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: AnimeEpisodeProgressCountOrderByAggregateInput
    _avg?: AnimeEpisodeProgressAvgOrderByAggregateInput
    _max?: AnimeEpisodeProgressMaxOrderByAggregateInput
    _min?: AnimeEpisodeProgressMinOrderByAggregateInput
    _sum?: AnimeEpisodeProgressSumOrderByAggregateInput
  }

  export type AnimeEpisodeProgressScalarWhereWithAggregatesInput = {
    AND?: AnimeEpisodeProgressScalarWhereWithAggregatesInput | AnimeEpisodeProgressScalarWhereWithAggregatesInput[]
    OR?: AnimeEpisodeProgressScalarWhereWithAggregatesInput[]
    NOT?: AnimeEpisodeProgressScalarWhereWithAggregatesInput | AnimeEpisodeProgressScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"AnimeEpisodeProgress"> | string
    animeId?: StringWithAggregatesFilter<"AnimeEpisodeProgress"> | string
    episode?: IntWithAggregatesFilter<"AnimeEpisodeProgress"> | number
    timestamp?: IntWithAggregatesFilter<"AnimeEpisodeProgress"> | number
    isWatched?: BoolWithAggregatesFilter<"AnimeEpisodeProgress"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"AnimeEpisodeProgress"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"AnimeEpisodeProgress"> | Date | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    animeId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    title?: StringNullableFilter<"Review"> | string | null
    description?: StringNullableFilter<"Review"> | string | null
    content?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    reviewLikes?: ReviewLikeListRelationFilter
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    rating?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    anime?: AnimeOrderByWithRelationInput
    reviewLikes?: ReviewLikeOrderByRelationAggregateInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_animeId?: ReviewUserIdAnimeIdCompoundUniqueInput
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    userId?: StringFilter<"Review"> | string
    animeId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    title?: StringNullableFilter<"Review"> | string | null
    description?: StringNullableFilter<"Review"> | string | null
    content?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    anime?: XOR<AnimeScalarRelationFilter, AnimeWhereInput>
    reviewLikes?: ReviewLikeListRelationFilter
  }, "id" | "userId_animeId">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    rating?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    userId?: StringWithAggregatesFilter<"Review"> | string
    animeId?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    title?: StringNullableWithAggregatesFilter<"Review"> | string | null
    description?: StringNullableWithAggregatesFilter<"Review"> | string | null
    content?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type ReviewLikeWhereInput = {
    AND?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    OR?: ReviewLikeWhereInput[]
    NOT?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    userId?: StringFilter<"ReviewLike"> | string
    reviewId?: StringFilter<"ReviewLike"> | string
    likedAt?: DateTimeFilter<"ReviewLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    review?: XOR<ReviewScalarRelationFilter, ReviewWhereInput>
  }

  export type ReviewLikeOrderByWithRelationInput = {
    userId?: SortOrder
    reviewId?: SortOrder
    likedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    review?: ReviewOrderByWithRelationInput
  }

  export type ReviewLikeWhereUniqueInput = Prisma.AtLeast<{
    userId_reviewId?: ReviewLikeUserIdReviewIdCompoundUniqueInput
    AND?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    OR?: ReviewLikeWhereInput[]
    NOT?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    userId?: StringFilter<"ReviewLike"> | string
    reviewId?: StringFilter<"ReviewLike"> | string
    likedAt?: DateTimeFilter<"ReviewLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    review?: XOR<ReviewScalarRelationFilter, ReviewWhereInput>
  }, "userId_reviewId">

  export type ReviewLikeOrderByWithAggregationInput = {
    userId?: SortOrder
    reviewId?: SortOrder
    likedAt?: SortOrder
    _count?: ReviewLikeCountOrderByAggregateInput
    _max?: ReviewLikeMaxOrderByAggregateInput
    _min?: ReviewLikeMinOrderByAggregateInput
  }

  export type ReviewLikeScalarWhereWithAggregatesInput = {
    AND?: ReviewLikeScalarWhereWithAggregatesInput | ReviewLikeScalarWhereWithAggregatesInput[]
    OR?: ReviewLikeScalarWhereWithAggregatesInput[]
    NOT?: ReviewLikeScalarWhereWithAggregatesInput | ReviewLikeScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"ReviewLike"> | string
    reviewId?: StringWithAggregatesFilter<"ReviewLike"> | string
    likedAt?: DateTimeWithAggregatesFilter<"ReviewLike"> | Date | string
  }

  export type UserSettingsWhereInput = {
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    id?: StringFilter<"UserSettings"> | string
    userId?: StringFilter<"UserSettings"> | string
    theme?: StringFilter<"UserSettings"> | string
    language?: StringFilter<"UserSettings"> | string
    show18plus?: BoolFilter<"UserSettings"> | boolean
    showActivity?: BoolFilter<"UserSettings"> | boolean
    showAnimeList?: BoolFilter<"UserSettings"> | boolean
    showAllCommentsInProfile?: BoolFilter<"UserSettings"> | boolean
    showCollections?: BoolFilter<"UserSettings"> | boolean
    showLikedCollections?: BoolFilter<"UserSettings"> | boolean
    showLikedReviews?: BoolFilter<"UserSettings"> | boolean
    showReviews?: BoolFilter<"UserSettings"> | boolean
    notificationsOn?: BoolFilter<"UserSettings"> | boolean
    preferredGenres?: StringNullableListFilter<"UserSettings">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSettingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    show18plus?: SortOrder
    showActivity?: SortOrder
    showAnimeList?: SortOrder
    showAllCommentsInProfile?: SortOrder
    showCollections?: SortOrder
    showLikedCollections?: SortOrder
    showLikedReviews?: SortOrder
    showReviews?: SortOrder
    notificationsOn?: SortOrder
    preferredGenres?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    theme?: StringFilter<"UserSettings"> | string
    language?: StringFilter<"UserSettings"> | string
    show18plus?: BoolFilter<"UserSettings"> | boolean
    showActivity?: BoolFilter<"UserSettings"> | boolean
    showAnimeList?: BoolFilter<"UserSettings"> | boolean
    showAllCommentsInProfile?: BoolFilter<"UserSettings"> | boolean
    showCollections?: BoolFilter<"UserSettings"> | boolean
    showLikedCollections?: BoolFilter<"UserSettings"> | boolean
    showLikedReviews?: BoolFilter<"UserSettings"> | boolean
    showReviews?: BoolFilter<"UserSettings"> | boolean
    notificationsOn?: BoolFilter<"UserSettings"> | boolean
    preferredGenres?: StringNullableListFilter<"UserSettings">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    show18plus?: SortOrder
    showActivity?: SortOrder
    showAnimeList?: SortOrder
    showAllCommentsInProfile?: SortOrder
    showCollections?: SortOrder
    showLikedCollections?: SortOrder
    showLikedReviews?: SortOrder
    showReviews?: SortOrder
    notificationsOn?: SortOrder
    preferredGenres?: SortOrder
    _count?: UserSettingsCountOrderByAggregateInput
    _max?: UserSettingsMaxOrderByAggregateInput
    _min?: UserSettingsMinOrderByAggregateInput
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    OR?: UserSettingsScalarWhereWithAggregatesInput[]
    NOT?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSettings"> | string
    userId?: StringWithAggregatesFilter<"UserSettings"> | string
    theme?: StringWithAggregatesFilter<"UserSettings"> | string
    language?: StringWithAggregatesFilter<"UserSettings"> | string
    show18plus?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showActivity?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showAnimeList?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showAllCommentsInProfile?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showCollections?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showLikedCollections?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showLikedReviews?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    showReviews?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    notificationsOn?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    preferredGenres?: StringNullableListFilter<"UserSettings">
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    displayName?: StringFilter<"User"> | string
    picture?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    animeProgress?: AnimeEpisodeProgressListRelationFilter
    animeCollection?: AnimeCollectionListRelationFilter
    likedCollection?: AnimeCollectionLikeListRelationFilter
    settings?: XOR<UserSettingsNullableScalarRelationFilter, UserSettingsWhereInput> | null
    animeComments?: CommentListRelationFilter
    animeCommentLikes?: CommentLikeListRelationFilter
    animeReviews?: ReviewListRelationFilter
    reviewLikes?: ReviewLikeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    picture?: SortOrderInput | SortOrder
    role?: SortOrder
    method?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    animeProgress?: AnimeEpisodeProgressOrderByRelationAggregateInput
    animeCollection?: AnimeCollectionOrderByRelationAggregateInput
    likedCollection?: AnimeCollectionLikeOrderByRelationAggregateInput
    settings?: UserSettingsOrderByWithRelationInput
    animeComments?: CommentOrderByRelationAggregateInput
    animeCommentLikes?: CommentLikeOrderByRelationAggregateInput
    animeReviews?: ReviewOrderByRelationAggregateInput
    reviewLikes?: ReviewLikeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    displayName?: StringFilter<"User"> | string
    picture?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    animeProgress?: AnimeEpisodeProgressListRelationFilter
    animeCollection?: AnimeCollectionListRelationFilter
    likedCollection?: AnimeCollectionLikeListRelationFilter
    settings?: XOR<UserSettingsNullableScalarRelationFilter, UserSettingsWhereInput> | null
    animeComments?: CommentListRelationFilter
    animeCommentLikes?: CommentLikeListRelationFilter
    animeReviews?: ReviewListRelationFilter
    reviewLikes?: ReviewLikeListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    picture?: SortOrderInput | SortOrder
    role?: SortOrder
    method?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    displayName?: StringWithAggregatesFilter<"User"> | string
    picture?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    method?: EnumAuthMethodWithAggregatesFilter<"User"> | $Enums.AuthMethod
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type DemographicCreateInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
    animes?: AnimeDemographicCreateNestedManyWithoutDemographicInput
  }

  export type DemographicUncheckedCreateInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
    animes?: AnimeDemographicUncheckedCreateNestedManyWithoutDemographicInput
  }

  export type DemographicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
    animes?: AnimeDemographicUpdateManyWithoutDemographicNestedInput
  }

  export type DemographicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
    animes?: AnimeDemographicUncheckedUpdateManyWithoutDemographicNestedInput
  }

  export type DemographicCreateManyInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type DemographicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type DemographicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeDemographicCreateInput = {
    anime: AnimeCreateNestedOneWithoutDemographicInput
    demographic: DemographicCreateNestedOneWithoutAnimesInput
  }

  export type AnimeDemographicUncheckedCreateInput = {
    animeId: string
    demographicId: string
  }

  export type AnimeDemographicUpdateInput = {
    anime?: AnimeUpdateOneRequiredWithoutDemographicNestedInput
    demographic?: DemographicUpdateOneRequiredWithoutAnimesNestedInput
  }

  export type AnimeDemographicUncheckedUpdateInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    demographicId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeDemographicCreateManyInput = {
    animeId: string
    demographicId: string
  }

  export type AnimeDemographicUpdateManyMutationInput = {

  }

  export type AnimeDemographicUncheckedUpdateManyInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    demographicId?: StringFieldUpdateOperationsInput | string
  }

  export type GenreCreateInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
    animes?: AnimeGenreCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
    animes?: AnimeGenreUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
    animes?: AnimeGenreUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
    animes?: AnimeGenreUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type GenreCreateManyInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type GenreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeGenreCreateInput = {
    anime: AnimeCreateNestedOneWithoutGenresInput
    genre: GenreCreateNestedOneWithoutAnimesInput
  }

  export type AnimeGenreUncheckedCreateInput = {
    animeId: string
    genreId: string
  }

  export type AnimeGenreUpdateInput = {
    anime?: AnimeUpdateOneRequiredWithoutGenresNestedInput
    genre?: GenreUpdateOneRequiredWithoutAnimesNestedInput
  }

  export type AnimeGenreUncheckedUpdateInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    genreId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeGenreCreateManyInput = {
    animeId: string
    genreId: string
  }

  export type AnimeGenreUpdateManyMutationInput = {

  }

  export type AnimeGenreUncheckedUpdateManyInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    genreId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimePosterCreateInput = {
    id?: string
    shikimoriId?: string | null
    originalUrl?: string | null
    mainUrl?: string | null
    anime: AnimeCreateNestedOneWithoutPosterInput
  }

  export type AnimePosterUncheckedCreateInput = {
    id?: string
    shikimoriId?: string | null
    animeId: string
    originalUrl?: string | null
    mainUrl?: string | null
  }

  export type AnimePosterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mainUrl?: NullableStringFieldUpdateOperationsInput | string | null
    anime?: AnimeUpdateOneRequiredWithoutPosterNestedInput
  }

  export type AnimePosterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    animeId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mainUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimePosterCreateManyInput = {
    id?: string
    shikimoriId?: string | null
    animeId: string
    originalUrl?: string | null
    mainUrl?: string | null
  }

  export type AnimePosterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mainUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimePosterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    animeId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mainUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedAnimeCreateInput = {
    id?: string
    relationKind: $Enums.RelationKind
    anime: AnimeCreateNestedOneWithoutRelatedInput
    related: AnimeCreateNestedOneWithoutRelatedAnimeInput
  }

  export type RelatedAnimeUncheckedCreateInput = {
    id?: string
    animeId: string
    relatedAnimeId: string
    relationKind: $Enums.RelationKind
  }

  export type RelatedAnimeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
    anime?: AnimeUpdateOneRequiredWithoutRelatedNestedInput
    related?: AnimeUpdateOneRequiredWithoutRelatedAnimeNestedInput
  }

  export type RelatedAnimeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    relatedAnimeId?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
  }

  export type RelatedAnimeCreateManyInput = {
    id?: string
    animeId: string
    relatedAnimeId: string
    relationKind: $Enums.RelationKind
  }

  export type RelatedAnimeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
  }

  export type RelatedAnimeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    relatedAnimeId?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
  }

  export type ScreenshotsCreateInput = {
    id?: string
    shikimoriId: string
    originalUrl?: string | null
    x332Url?: string | null
    animeScreenshot?: AnimeScreenshotCreateNestedManyWithoutScreenshotInput
  }

  export type ScreenshotsUncheckedCreateInput = {
    id?: string
    shikimoriId: string
    originalUrl?: string | null
    x332Url?: string | null
    animeScreenshot?: AnimeScreenshotUncheckedCreateNestedManyWithoutScreenshotInput
  }

  export type ScreenshotsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    x332Url?: NullableStringFieldUpdateOperationsInput | string | null
    animeScreenshot?: AnimeScreenshotUpdateManyWithoutScreenshotNestedInput
  }

  export type ScreenshotsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    x332Url?: NullableStringFieldUpdateOperationsInput | string | null
    animeScreenshot?: AnimeScreenshotUncheckedUpdateManyWithoutScreenshotNestedInput
  }

  export type ScreenshotsCreateManyInput = {
    id?: string
    shikimoriId: string
    originalUrl?: string | null
    x332Url?: string | null
  }

  export type ScreenshotsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    x332Url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScreenshotsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    x332Url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimeScreenshotCreateInput = {
    anime: AnimeCreateNestedOneWithoutScreenshotsInput
    screenshot: ScreenshotsCreateNestedOneWithoutAnimeScreenshotInput
  }

  export type AnimeScreenshotUncheckedCreateInput = {
    animeId: string
    screenshotId: string
  }

  export type AnimeScreenshotUpdateInput = {
    anime?: AnimeUpdateOneRequiredWithoutScreenshotsNestedInput
    screenshot?: ScreenshotsUpdateOneRequiredWithoutAnimeScreenshotNestedInput
  }

  export type AnimeScreenshotUncheckedUpdateInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    screenshotId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeScreenshotCreateManyInput = {
    animeId: string
    screenshotId: string
  }

  export type AnimeScreenshotUpdateManyMutationInput = {

  }

  export type AnimeScreenshotUncheckedUpdateManyInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    screenshotId?: StringFieldUpdateOperationsInput | string
  }

  export type StudioCreateInput = {
    id?: string
    name: string
    imageUrl?: string | null
    AnimeStudio?: AnimeStudioCreateNestedManyWithoutStudioInput
  }

  export type StudioUncheckedCreateInput = {
    id?: string
    name: string
    imageUrl?: string | null
    AnimeStudio?: AnimeStudioUncheckedCreateNestedManyWithoutStudioInput
  }

  export type StudioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    AnimeStudio?: AnimeStudioUpdateManyWithoutStudioNestedInput
  }

  export type StudioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    AnimeStudio?: AnimeStudioUncheckedUpdateManyWithoutStudioNestedInput
  }

  export type StudioCreateManyInput = {
    id?: string
    name: string
    imageUrl?: string | null
  }

  export type StudioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimeStudioCreateInput = {
    anime: AnimeCreateNestedOneWithoutStudiosInput
    studio: StudioCreateNestedOneWithoutAnimeStudioInput
  }

  export type AnimeStudioUncheckedCreateInput = {
    animeId: string
    studioId: string
  }

  export type AnimeStudioUpdateInput = {
    anime?: AnimeUpdateOneRequiredWithoutStudiosNestedInput
    studio?: StudioUpdateOneRequiredWithoutAnimeStudioNestedInput
  }

  export type AnimeStudioUncheckedUpdateInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    studioId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeStudioCreateManyInput = {
    animeId: string
    studioId: string
  }

  export type AnimeStudioUpdateManyMutationInput = {

  }

  export type AnimeStudioUncheckedUpdateManyInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    studioId?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeCreateInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
    animes?: AnimeThemeCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
    animes?: AnimeThemeUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
    animes?: AnimeThemeUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
    animes?: AnimeThemeUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ThemeCreateManyInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type ThemeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeThemeCreateInput = {
    anime: AnimeCreateNestedOneWithoutThemeInput
    theme: ThemeCreateNestedOneWithoutAnimesInput
  }

  export type AnimeThemeUncheckedCreateInput = {
    animeId: string
    themeId: string
  }

  export type AnimeThemeUpdateInput = {
    anime?: AnimeUpdateOneRequiredWithoutThemeNestedInput
    theme?: ThemeUpdateOneRequiredWithoutAnimesNestedInput
  }

  export type AnimeThemeUncheckedUpdateInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    themeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeThemeCreateManyInput = {
    animeId: string
    themeId: string
  }

  export type AnimeThemeUpdateManyMutationInput = {

  }

  export type AnimeThemeUncheckedUpdateManyInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    themeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeVideoCreateInput = {
    anime: AnimeCreateNestedOneWithoutVideosInput
    video: VideoCreateNestedOneWithoutAnimeVideoInput
  }

  export type AnimeVideoUncheckedCreateInput = {
    animeId: string
    videoId: string
  }

  export type AnimeVideoUpdateInput = {
    anime?: AnimeUpdateOneRequiredWithoutVideosNestedInput
    video?: VideoUpdateOneRequiredWithoutAnimeVideoNestedInput
  }

  export type AnimeVideoUncheckedUpdateInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeVideoCreateManyInput = {
    animeId: string
    videoId: string
  }

  export type AnimeVideoUpdateManyMutationInput = {

  }

  export type AnimeVideoUncheckedUpdateManyInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type VideoCreateInput = {
    id?: string
    shikimoriId?: string | null
    url?: string | null
    name?: string | null
    kind: $Enums.VideoKindEnum
    playerUrl?: string | null
    imageUrl?: string | null
    animeVideo?: AnimeVideoCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateInput = {
    id?: string
    shikimoriId?: string | null
    url?: string | null
    name?: string | null
    kind: $Enums.VideoKindEnum
    playerUrl?: string | null
    imageUrl?: string | null
    animeVideo?: AnimeVideoUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: EnumVideoKindEnumFieldUpdateOperationsInput | $Enums.VideoKindEnum
    playerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    animeVideo?: AnimeVideoUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: EnumVideoKindEnumFieldUpdateOperationsInput | $Enums.VideoKindEnum
    playerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    animeVideo?: AnimeVideoUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoCreateManyInput = {
    id?: string
    shikimoriId?: string | null
    url?: string | null
    name?: string | null
    kind: $Enums.VideoKindEnum
    playerUrl?: string | null
    imageUrl?: string | null
  }

  export type VideoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: EnumVideoKindEnumFieldUpdateOperationsInput | $Enums.VideoKindEnum
    playerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: EnumVideoKindEnumFieldUpdateOperationsInput | $Enums.VideoKindEnum
    playerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimeCreateInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeCreateManyInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TokenCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateManyInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParsingSessionCreateInput = {
    name: string
    status: string
    type: $Enums.ParsingSessionType
    lastProcessedPage: number
    processedPages: number
    processedItems: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParsingSessionUncheckedCreateInput = {
    id?: number
    name: string
    status: string
    type: $Enums.ParsingSessionType
    lastProcessedPage: number
    processedPages: number
    processedItems: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParsingSessionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumParsingSessionTypeFieldUpdateOperationsInput | $Enums.ParsingSessionType
    lastProcessedPage?: IntFieldUpdateOperationsInput | number
    processedPages?: IntFieldUpdateOperationsInput | number
    processedItems?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParsingSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumParsingSessionTypeFieldUpdateOperationsInput | $Enums.ParsingSessionType
    lastProcessedPage?: IntFieldUpdateOperationsInput | number
    processedPages?: IntFieldUpdateOperationsInput | number
    processedItems?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParsingSessionCreateManyInput = {
    id?: number
    name: string
    status: string
    type: $Enums.ParsingSessionType
    lastProcessedPage: number
    processedPages: number
    processedItems: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParsingSessionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumParsingSessionTypeFieldUpdateOperationsInput | $Enums.ParsingSessionType
    lastProcessedPage?: IntFieldUpdateOperationsInput | number
    processedPages?: IntFieldUpdateOperationsInput | number
    processedItems?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParsingSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: EnumParsingSessionTypeFieldUpdateOperationsInput | $Enums.ParsingSessionType
    lastProcessedPage?: IntFieldUpdateOperationsInput | number
    processedPages?: IntFieldUpdateOperationsInput | number
    processedItems?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionCreateInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCollectionInput
    items?: AnimeInCollectionCreateNestedManyWithoutCollectionInput
    likes?: AnimeCollectionLikeCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: AnimeInCollectionUncheckedCreateNestedManyWithoutCollectionInput
    likes?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCollectionNestedInput
    items?: AnimeInCollectionUpdateManyWithoutCollectionNestedInput
    likes?: AnimeCollectionLikeUpdateManyWithoutCollectionNestedInput
  }

  export type AnimeCollectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: AnimeInCollectionUncheckedUpdateManyWithoutCollectionNestedInput
    likes?: AnimeCollectionLikeUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type AnimeCollectionCreateManyInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimeCollectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeInCollectionCreateInput = {
    note?: string | null
    addedAt?: Date | string
    anime: AnimeCreateNestedOneWithoutAnimeInCollectionInput
    collection: AnimeCollectionCreateNestedOneWithoutItemsInput
  }

  export type AnimeInCollectionUncheckedCreateInput = {
    collectionId: string
    animeId: string
    note?: string | null
    addedAt?: Date | string
  }

  export type AnimeInCollectionUpdateInput = {
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneRequiredWithoutAnimeInCollectionNestedInput
    collection?: AnimeCollectionUpdateOneRequiredWithoutItemsNestedInput
  }

  export type AnimeInCollectionUncheckedUpdateInput = {
    collectionId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeInCollectionCreateManyInput = {
    collectionId: string
    animeId: string
    note?: string | null
    addedAt?: Date | string
  }

  export type AnimeInCollectionUpdateManyMutationInput = {
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeInCollectionUncheckedUpdateManyInput = {
    collectionId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionLikeCreateInput = {
    likedAt?: Date | string
    user: UserCreateNestedOneWithoutLikedCollectionInput
    collection: AnimeCollectionCreateNestedOneWithoutLikesInput
  }

  export type AnimeCollectionLikeUncheckedCreateInput = {
    userId: string
    collectionId: string
    likedAt?: Date | string
  }

  export type AnimeCollectionLikeUpdateInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikedCollectionNestedInput
    collection?: AnimeCollectionUpdateOneRequiredWithoutLikesNestedInput
  }

  export type AnimeCollectionLikeUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionLikeCreateManyInput = {
    userId: string
    collectionId: string
    likedAt?: Date | string
  }

  export type AnimeCollectionLikeUpdateManyMutationInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionLikeUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    collectionId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCommentsInput
    anime?: AnimeCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    userId: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCommentsNestedInput
    anime?: AnimeUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    userId: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeCreateInput = {
    likedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCommentLikesInput
    comment: CommentCreateNestedOneWithoutCommentLikeInput
  }

  export type CommentLikeUncheckedCreateInput = {
    userId: string
    commentId: string
    likedAt?: Date | string
  }

  export type CommentLikeUpdateInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCommentLikesNestedInput
    comment?: CommentUpdateOneRequiredWithoutCommentLikeNestedInput
  }

  export type CommentLikeUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeCreateManyInput = {
    userId: string
    commentId: string
    likedAt?: Date | string
  }

  export type CommentLikeUpdateManyMutationInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeEpisodeProgressCreateInput = {
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    anime: AnimeCreateNestedOneWithoutUserProgressInput
    user: UserCreateNestedOneWithoutAnimeProgressInput
  }

  export type AnimeEpisodeProgressUncheckedCreateInput = {
    userId: string
    animeId: string
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AnimeEpisodeProgressUpdateInput = {
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneRequiredWithoutUserProgressNestedInput
    user?: UserUpdateOneRequiredWithoutAnimeProgressNestedInput
  }

  export type AnimeEpisodeProgressUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeEpisodeProgressCreateManyInput = {
    userId: string
    animeId: string
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AnimeEpisodeProgressUpdateManyMutationInput = {
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeEpisodeProgressUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateInput = {
    id?: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeReviewsInput
    anime: AnimeCreateNestedOneWithoutReviewsInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    userId: string
    animeId: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeReviewsNestedInput
    anime?: AnimeUpdateOneRequiredWithoutReviewsNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateManyInput = {
    id?: string
    userId: string
    animeId: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewLikeCreateInput = {
    likedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewLikesInput
    review: ReviewCreateNestedOneWithoutReviewLikesInput
  }

  export type ReviewLikeUncheckedCreateInput = {
    userId: string
    reviewId: string
    likedAt?: Date | string
  }

  export type ReviewLikeUpdateInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewLikesNestedInput
    review?: ReviewUpdateOneRequiredWithoutReviewLikesNestedInput
  }

  export type ReviewLikeUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewLikeCreateManyInput = {
    userId: string
    reviewId: string
    likedAt?: Date | string
  }

  export type ReviewLikeUpdateManyMutationInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewLikeUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsCreateInput = {
    id?: string
    theme?: string
    language?: string
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: UserSettingsCreatepreferredGenresInput | string[]
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type UserSettingsUncheckedCreateInput = {
    id?: string
    userId: string
    theme?: string
    language?: string
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: UserSettingsCreatepreferredGenresInput | string[]
  }

  export type UserSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    show18plus?: BoolFieldUpdateOperationsInput | boolean
    showActivity?: BoolFieldUpdateOperationsInput | boolean
    showAnimeList?: BoolFieldUpdateOperationsInput | boolean
    showAllCommentsInProfile?: BoolFieldUpdateOperationsInput | boolean
    showCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedReviews?: BoolFieldUpdateOperationsInput | boolean
    showReviews?: BoolFieldUpdateOperationsInput | boolean
    notificationsOn?: BoolFieldUpdateOperationsInput | boolean
    preferredGenres?: UserSettingsUpdatepreferredGenresInput | string[]
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    show18plus?: BoolFieldUpdateOperationsInput | boolean
    showActivity?: BoolFieldUpdateOperationsInput | boolean
    showAnimeList?: BoolFieldUpdateOperationsInput | boolean
    showAllCommentsInProfile?: BoolFieldUpdateOperationsInput | boolean
    showCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedReviews?: BoolFieldUpdateOperationsInput | boolean
    showReviews?: BoolFieldUpdateOperationsInput | boolean
    notificationsOn?: BoolFieldUpdateOperationsInput | boolean
    preferredGenres?: UserSettingsUpdatepreferredGenresInput | string[]
  }

  export type UserSettingsCreateManyInput = {
    id?: string
    userId: string
    theme?: string
    language?: string
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: UserSettingsCreatepreferredGenresInput | string[]
  }

  export type UserSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    show18plus?: BoolFieldUpdateOperationsInput | boolean
    showActivity?: BoolFieldUpdateOperationsInput | boolean
    showAnimeList?: BoolFieldUpdateOperationsInput | boolean
    showAllCommentsInProfile?: BoolFieldUpdateOperationsInput | boolean
    showCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedReviews?: BoolFieldUpdateOperationsInput | boolean
    showReviews?: BoolFieldUpdateOperationsInput | boolean
    notificationsOn?: BoolFieldUpdateOperationsInput | boolean
    preferredGenres?: UserSettingsUpdatepreferredGenresInput | string[]
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    show18plus?: BoolFieldUpdateOperationsInput | boolean
    showActivity?: BoolFieldUpdateOperationsInput | boolean
    showAnimeList?: BoolFieldUpdateOperationsInput | boolean
    showAllCommentsInProfile?: BoolFieldUpdateOperationsInput | boolean
    showCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedReviews?: BoolFieldUpdateOperationsInput | boolean
    showReviews?: BoolFieldUpdateOperationsInput | boolean
    notificationsOn?: BoolFieldUpdateOperationsInput | boolean
    preferredGenres?: UserSettingsUpdatepreferredGenresInput | string[]
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AnimeDemographicListRelationFilter = {
    every?: AnimeDemographicWhereInput
    some?: AnimeDemographicWhereInput
    none?: AnimeDemographicWhereInput
  }

  export type AnimeDemographicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DemographicCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type DemographicAvgOrderByAggregateInput = {
    requestId?: SortOrder
  }

  export type DemographicMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type DemographicMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type DemographicSumOrderByAggregateInput = {
    requestId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type AnimeScalarRelationFilter = {
    is?: AnimeWhereInput
    isNot?: AnimeWhereInput
  }

  export type DemographicScalarRelationFilter = {
    is?: DemographicWhereInput
    isNot?: DemographicWhereInput
  }

  export type AnimeDemographicAnimeIdDemographicIdCompoundUniqueInput = {
    animeId: string
    demographicId: string
  }

  export type AnimeDemographicCountOrderByAggregateInput = {
    animeId?: SortOrder
    demographicId?: SortOrder
  }

  export type AnimeDemographicMaxOrderByAggregateInput = {
    animeId?: SortOrder
    demographicId?: SortOrder
  }

  export type AnimeDemographicMinOrderByAggregateInput = {
    animeId?: SortOrder
    demographicId?: SortOrder
  }

  export type AnimeGenreListRelationFilter = {
    every?: AnimeGenreWhereInput
    some?: AnimeGenreWhereInput
    none?: AnimeGenreWhereInput
  }

  export type AnimeGenreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GenreCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type GenreAvgOrderByAggregateInput = {
    requestId?: SortOrder
  }

  export type GenreMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type GenreMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type GenreSumOrderByAggregateInput = {
    requestId?: SortOrder
  }

  export type GenreScalarRelationFilter = {
    is?: GenreWhereInput
    isNot?: GenreWhereInput
  }

  export type AnimeGenreAnimeIdGenreIdCompoundUniqueInput = {
    animeId: string
    genreId: string
  }

  export type AnimeGenreCountOrderByAggregateInput = {
    animeId?: SortOrder
    genreId?: SortOrder
  }

  export type AnimeGenreMaxOrderByAggregateInput = {
    animeId?: SortOrder
    genreId?: SortOrder
  }

  export type AnimeGenreMinOrderByAggregateInput = {
    animeId?: SortOrder
    genreId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AnimePosterCountOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    animeId?: SortOrder
    originalUrl?: SortOrder
    mainUrl?: SortOrder
  }

  export type AnimePosterMaxOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    animeId?: SortOrder
    originalUrl?: SortOrder
    mainUrl?: SortOrder
  }

  export type AnimePosterMinOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    animeId?: SortOrder
    originalUrl?: SortOrder
    mainUrl?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRelationKindFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationKind | EnumRelationKindFieldRefInput<$PrismaModel>
    in?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationKindFilter<$PrismaModel> | $Enums.RelationKind
  }

  export type RelatedAnimeAnimeIdRelatedAnimeIdCompoundUniqueInput = {
    animeId: string
    relatedAnimeId: string
  }

  export type RelatedAnimeCountOrderByAggregateInput = {
    id?: SortOrder
    animeId?: SortOrder
    relatedAnimeId?: SortOrder
    relationKind?: SortOrder
  }

  export type RelatedAnimeMaxOrderByAggregateInput = {
    id?: SortOrder
    animeId?: SortOrder
    relatedAnimeId?: SortOrder
    relationKind?: SortOrder
  }

  export type RelatedAnimeMinOrderByAggregateInput = {
    id?: SortOrder
    animeId?: SortOrder
    relatedAnimeId?: SortOrder
    relationKind?: SortOrder
  }

  export type EnumRelationKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationKind | EnumRelationKindFieldRefInput<$PrismaModel>
    in?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationKindWithAggregatesFilter<$PrismaModel> | $Enums.RelationKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationKindFilter<$PrismaModel>
    _max?: NestedEnumRelationKindFilter<$PrismaModel>
  }

  export type AnimeScreenshotListRelationFilter = {
    every?: AnimeScreenshotWhereInput
    some?: AnimeScreenshotWhereInput
    none?: AnimeScreenshotWhereInput
  }

  export type AnimeScreenshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScreenshotsCountOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    originalUrl?: SortOrder
    x332Url?: SortOrder
  }

  export type ScreenshotsMaxOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    originalUrl?: SortOrder
    x332Url?: SortOrder
  }

  export type ScreenshotsMinOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    originalUrl?: SortOrder
    x332Url?: SortOrder
  }

  export type ScreenshotsScalarRelationFilter = {
    is?: ScreenshotsWhereInput
    isNot?: ScreenshotsWhereInput
  }

  export type AnimeScreenshotAnimeIdScreenshotIdCompoundUniqueInput = {
    animeId: string
    screenshotId: string
  }

  export type AnimeScreenshotCountOrderByAggregateInput = {
    animeId?: SortOrder
    screenshotId?: SortOrder
  }

  export type AnimeScreenshotMaxOrderByAggregateInput = {
    animeId?: SortOrder
    screenshotId?: SortOrder
  }

  export type AnimeScreenshotMinOrderByAggregateInput = {
    animeId?: SortOrder
    screenshotId?: SortOrder
  }

  export type AnimeStudioListRelationFilter = {
    every?: AnimeStudioWhereInput
    some?: AnimeStudioWhereInput
    none?: AnimeStudioWhereInput
  }

  export type AnimeStudioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudioCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type StudioMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type StudioMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type StudioScalarRelationFilter = {
    is?: StudioWhereInput
    isNot?: StudioWhereInput
  }

  export type AnimeStudioAnimeIdStudioIdCompoundUniqueInput = {
    animeId: string
    studioId: string
  }

  export type AnimeStudioCountOrderByAggregateInput = {
    animeId?: SortOrder
    studioId?: SortOrder
  }

  export type AnimeStudioMaxOrderByAggregateInput = {
    animeId?: SortOrder
    studioId?: SortOrder
  }

  export type AnimeStudioMinOrderByAggregateInput = {
    animeId?: SortOrder
    studioId?: SortOrder
  }

  export type AnimeThemeListRelationFilter = {
    every?: AnimeThemeWhereInput
    some?: AnimeThemeWhereInput
    none?: AnimeThemeWhereInput
  }

  export type AnimeThemeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThemeCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type ThemeAvgOrderByAggregateInput = {
    requestId?: SortOrder
  }

  export type ThemeMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type ThemeMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    name?: SortOrder
    russian?: SortOrder
  }

  export type ThemeSumOrderByAggregateInput = {
    requestId?: SortOrder
  }

  export type ThemeScalarRelationFilter = {
    is?: ThemeWhereInput
    isNot?: ThemeWhereInput
  }

  export type AnimeThemeAnimeIdThemeIdCompoundUniqueInput = {
    animeId: string
    themeId: string
  }

  export type AnimeThemeCountOrderByAggregateInput = {
    animeId?: SortOrder
    themeId?: SortOrder
  }

  export type AnimeThemeMaxOrderByAggregateInput = {
    animeId?: SortOrder
    themeId?: SortOrder
  }

  export type AnimeThemeMinOrderByAggregateInput = {
    animeId?: SortOrder
    themeId?: SortOrder
  }

  export type VideoScalarRelationFilter = {
    is?: VideoWhereInput
    isNot?: VideoWhereInput
  }

  export type AnimeVideoAnimeIdVideoIdCompoundUniqueInput = {
    animeId: string
    videoId: string
  }

  export type AnimeVideoCountOrderByAggregateInput = {
    animeId?: SortOrder
    videoId?: SortOrder
  }

  export type AnimeVideoMaxOrderByAggregateInput = {
    animeId?: SortOrder
    videoId?: SortOrder
  }

  export type AnimeVideoMinOrderByAggregateInput = {
    animeId?: SortOrder
    videoId?: SortOrder
  }

  export type EnumVideoKindEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.VideoKindEnum | EnumVideoKindEnumFieldRefInput<$PrismaModel>
    in?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumVideoKindEnumFilter<$PrismaModel> | $Enums.VideoKindEnum
  }

  export type AnimeVideoListRelationFilter = {
    every?: AnimeVideoWhereInput
    some?: AnimeVideoWhereInput
    none?: AnimeVideoWhereInput
  }

  export type AnimeVideoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    url?: SortOrder
    name?: SortOrder
    kind?: SortOrder
    playerUrl?: SortOrder
    imageUrl?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    url?: SortOrder
    name?: SortOrder
    kind?: SortOrder
    playerUrl?: SortOrder
    imageUrl?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    shikimoriId?: SortOrder
    url?: SortOrder
    name?: SortOrder
    kind?: SortOrder
    playerUrl?: SortOrder
    imageUrl?: SortOrder
  }

  export type EnumVideoKindEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VideoKindEnum | EnumVideoKindEnumFieldRefInput<$PrismaModel>
    in?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumVideoKindEnumWithAggregatesFilter<$PrismaModel> | $Enums.VideoKindEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVideoKindEnumFilter<$PrismaModel>
    _max?: NestedEnumVideoKindEnumFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumAnimeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeStatus | EnumAnimeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeStatusFilter<$PrismaModel> | $Enums.AnimeStatus
  }

  export type EnumAnimeKindNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeKind | EnumAnimeKindFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeKindNullableFilter<$PrismaModel> | $Enums.AnimeKind | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EnumAnimeRatingNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeRating | EnumAnimeRatingFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeRatingNullableFilter<$PrismaModel> | $Enums.AnimeRating | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AnimePosterListRelationFilter = {
    every?: AnimePosterWhereInput
    some?: AnimePosterWhereInput
    none?: AnimePosterWhereInput
  }

  export type RelatedAnimeListRelationFilter = {
    every?: RelatedAnimeWhereInput
    some?: RelatedAnimeWhereInput
    none?: RelatedAnimeWhereInput
  }

  export type AnimeEpisodeProgressListRelationFilter = {
    every?: AnimeEpisodeProgressWhereInput
    some?: AnimeEpisodeProgressWhereInput
    none?: AnimeEpisodeProgressWhereInput
  }

  export type AnimeInCollectionListRelationFilter = {
    every?: AnimeInCollectionWhereInput
    some?: AnimeInCollectionWhereInput
    none?: AnimeInCollectionWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type AnimePosterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelatedAnimeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeEpisodeProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeInCollectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeNameShikimoriIdCompoundUniqueInput = {
    name: string
    shikimoriId: string
  }

  export type AnimeCountOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    malId?: SortOrder
    shikimoriId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    russian?: SortOrder
    english?: SortOrder
    japanese?: SortOrder
    synonyms?: SortOrder
    status?: SortOrder
    kind?: SortOrder
    episodes?: SortOrder
    episodesAired?: SortOrder
    duration?: SortOrder
    score?: SortOrder
    shikimoriScore?: SortOrder
    airedOn?: SortOrder
    releasedOn?: SortOrder
    shikimoriUrl?: SortOrder
    season?: SortOrder
    isCensored?: SortOrder
    rating?: SortOrder
    nextEpisodeAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimeAvgOrderByAggregateInput = {
    episodes?: SortOrder
    episodesAired?: SortOrder
    duration?: SortOrder
    score?: SortOrder
    shikimoriScore?: SortOrder
  }

  export type AnimeMaxOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    malId?: SortOrder
    shikimoriId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    russian?: SortOrder
    english?: SortOrder
    japanese?: SortOrder
    status?: SortOrder
    kind?: SortOrder
    episodes?: SortOrder
    episodesAired?: SortOrder
    duration?: SortOrder
    score?: SortOrder
    shikimoriScore?: SortOrder
    airedOn?: SortOrder
    releasedOn?: SortOrder
    shikimoriUrl?: SortOrder
    season?: SortOrder
    isCensored?: SortOrder
    rating?: SortOrder
    nextEpisodeAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimeMinOrderByAggregateInput = {
    id?: SortOrder
    alias?: SortOrder
    malId?: SortOrder
    shikimoriId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    russian?: SortOrder
    english?: SortOrder
    japanese?: SortOrder
    status?: SortOrder
    kind?: SortOrder
    episodes?: SortOrder
    episodesAired?: SortOrder
    duration?: SortOrder
    score?: SortOrder
    shikimoriScore?: SortOrder
    airedOn?: SortOrder
    releasedOn?: SortOrder
    shikimoriUrl?: SortOrder
    season?: SortOrder
    isCensored?: SortOrder
    rating?: SortOrder
    nextEpisodeAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimeSumOrderByAggregateInput = {
    episodes?: SortOrder
    episodesAired?: SortOrder
    duration?: SortOrder
    score?: SortOrder
    shikimoriScore?: SortOrder
  }

  export type EnumAnimeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeStatus | EnumAnimeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeStatusWithAggregatesFilter<$PrismaModel> | $Enums.AnimeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnimeStatusFilter<$PrismaModel>
    _max?: NestedEnumAnimeStatusFilter<$PrismaModel>
  }

  export type EnumAnimeKindNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeKind | EnumAnimeKindFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeKindNullableWithAggregatesFilter<$PrismaModel> | $Enums.AnimeKind | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAnimeKindNullableFilter<$PrismaModel>
    _max?: NestedEnumAnimeKindNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumAnimeRatingNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeRating | EnumAnimeRatingFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeRatingNullableWithAggregatesFilter<$PrismaModel> | $Enums.AnimeRating | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAnimeRatingNullableFilter<$PrismaModel>
    _max?: NestedEnumAnimeRatingNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type EnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type EnumParsingSessionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ParsingSessionType | EnumParsingSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParsingSessionTypeFilter<$PrismaModel> | $Enums.ParsingSessionType
  }

  export type ParsingSessionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    lastProcessedPage?: SortOrder
    processedPages?: SortOrder
    processedItems?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParsingSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    lastProcessedPage?: SortOrder
    processedPages?: SortOrder
    processedItems?: SortOrder
  }

  export type ParsingSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    lastProcessedPage?: SortOrder
    processedPages?: SortOrder
    processedItems?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParsingSessionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    lastProcessedPage?: SortOrder
    processedPages?: SortOrder
    processedItems?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParsingSessionSumOrderByAggregateInput = {
    id?: SortOrder
    lastProcessedPage?: SortOrder
    processedPages?: SortOrder
    processedItems?: SortOrder
  }

  export type EnumParsingSessionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParsingSessionType | EnumParsingSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParsingSessionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ParsingSessionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParsingSessionTypeFilter<$PrismaModel>
    _max?: NestedEnumParsingSessionTypeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumAnimeCollectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeCollectionType | EnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeCollectionTypeFilter<$PrismaModel> | $Enums.AnimeCollectionType
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AnimeCollectionLikeListRelationFilter = {
    every?: AnimeCollectionLikeWhereInput
    some?: AnimeCollectionLikeWhereInput
    none?: AnimeCollectionLikeWhereInput
  }

  export type AnimeCollectionLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeCollectionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimeCollectionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimeCollectionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumAnimeCollectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeCollectionType | EnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeCollectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.AnimeCollectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnimeCollectionTypeFilter<$PrismaModel>
    _max?: NestedEnumAnimeCollectionTypeFilter<$PrismaModel>
  }

  export type AnimeCollectionScalarRelationFilter = {
    is?: AnimeCollectionWhereInput
    isNot?: AnimeCollectionWhereInput
  }

  export type AnimeInCollectionCollectionIdAnimeIdCompoundUniqueInput = {
    collectionId: string
    animeId: string
  }

  export type AnimeInCollectionCountOrderByAggregateInput = {
    collectionId?: SortOrder
    animeId?: SortOrder
    note?: SortOrder
    addedAt?: SortOrder
  }

  export type AnimeInCollectionMaxOrderByAggregateInput = {
    collectionId?: SortOrder
    animeId?: SortOrder
    note?: SortOrder
    addedAt?: SortOrder
  }

  export type AnimeInCollectionMinOrderByAggregateInput = {
    collectionId?: SortOrder
    animeId?: SortOrder
    note?: SortOrder
    addedAt?: SortOrder
  }

  export type AnimeCollectionLikeUserIdCollectionIdCompoundUniqueInput = {
    userId: string
    collectionId: string
  }

  export type AnimeCollectionLikeCountOrderByAggregateInput = {
    userId?: SortOrder
    collectionId?: SortOrder
    likedAt?: SortOrder
  }

  export type AnimeCollectionLikeMaxOrderByAggregateInput = {
    userId?: SortOrder
    collectionId?: SortOrder
    likedAt?: SortOrder
  }

  export type AnimeCollectionLikeMinOrderByAggregateInput = {
    userId?: SortOrder
    collectionId?: SortOrder
    likedAt?: SortOrder
  }

  export type AnimeNullableScalarRelationFilter = {
    is?: AnimeWhereInput | null
    isNot?: AnimeWhereInput | null
  }

  export type CommentNullableScalarRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type CommentLikeListRelationFilter = {
    every?: CommentLikeWhereInput
    some?: CommentLikeWhereInput
    none?: CommentLikeWhereInput
  }

  export type CommentLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    likesCount?: SortOrder
    episode?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    likesCount?: SortOrder
    episode?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    likesCount?: SortOrder
    episode?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    likesCount?: SortOrder
    episode?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    likesCount?: SortOrder
    episode?: SortOrder
  }

  export type CommentScalarRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type CommentLikeUserIdCommentIdCompoundUniqueInput = {
    userId: string
    commentId: string
  }

  export type CommentLikeCountOrderByAggregateInput = {
    userId?: SortOrder
    commentId?: SortOrder
    likedAt?: SortOrder
  }

  export type CommentLikeMaxOrderByAggregateInput = {
    userId?: SortOrder
    commentId?: SortOrder
    likedAt?: SortOrder
  }

  export type CommentLikeMinOrderByAggregateInput = {
    userId?: SortOrder
    commentId?: SortOrder
    likedAt?: SortOrder
  }

  export type AnimeEpisodeProgressUserIdAnimeIdEpisodeCompoundUniqueInput = {
    userId: string
    animeId: string
    episode: number
  }

  export type AnimeEpisodeProgressCountOrderByAggregateInput = {
    userId?: SortOrder
    animeId?: SortOrder
    episode?: SortOrder
    timestamp?: SortOrder
    isWatched?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AnimeEpisodeProgressAvgOrderByAggregateInput = {
    episode?: SortOrder
    timestamp?: SortOrder
  }

  export type AnimeEpisodeProgressMaxOrderByAggregateInput = {
    userId?: SortOrder
    animeId?: SortOrder
    episode?: SortOrder
    timestamp?: SortOrder
    isWatched?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AnimeEpisodeProgressMinOrderByAggregateInput = {
    userId?: SortOrder
    animeId?: SortOrder
    episode?: SortOrder
    timestamp?: SortOrder
    isWatched?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AnimeEpisodeProgressSumOrderByAggregateInput = {
    episode?: SortOrder
    timestamp?: SortOrder
  }

  export type ReviewLikeListRelationFilter = {
    every?: ReviewLikeWhereInput
    some?: ReviewLikeWhereInput
    none?: ReviewLikeWhereInput
  }

  export type ReviewLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewUserIdAnimeIdCompoundUniqueInput = {
    userId: string
    animeId: string
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    animeId?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewScalarRelationFilter = {
    is?: ReviewWhereInput
    isNot?: ReviewWhereInput
  }

  export type ReviewLikeUserIdReviewIdCompoundUniqueInput = {
    userId: string
    reviewId: string
  }

  export type ReviewLikeCountOrderByAggregateInput = {
    userId?: SortOrder
    reviewId?: SortOrder
    likedAt?: SortOrder
  }

  export type ReviewLikeMaxOrderByAggregateInput = {
    userId?: SortOrder
    reviewId?: SortOrder
    likedAt?: SortOrder
  }

  export type ReviewLikeMinOrderByAggregateInput = {
    userId?: SortOrder
    reviewId?: SortOrder
    likedAt?: SortOrder
  }

  export type UserSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    show18plus?: SortOrder
    showActivity?: SortOrder
    showAnimeList?: SortOrder
    showAllCommentsInProfile?: SortOrder
    showCollections?: SortOrder
    showLikedCollections?: SortOrder
    showLikedReviews?: SortOrder
    showReviews?: SortOrder
    notificationsOn?: SortOrder
    preferredGenres?: SortOrder
  }

  export type UserSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    show18plus?: SortOrder
    showActivity?: SortOrder
    showAnimeList?: SortOrder
    showAllCommentsInProfile?: SortOrder
    showCollections?: SortOrder
    showLikedCollections?: SortOrder
    showLikedReviews?: SortOrder
    showReviews?: SortOrder
    notificationsOn?: SortOrder
  }

  export type UserSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    show18plus?: SortOrder
    showActivity?: SortOrder
    showAnimeList?: SortOrder
    showAllCommentsInProfile?: SortOrder
    showCollections?: SortOrder
    showLikedCollections?: SortOrder
    showLikedReviews?: SortOrder
    showReviews?: SortOrder
    notificationsOn?: SortOrder
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type AnimeCollectionListRelationFilter = {
    every?: AnimeCollectionWhereInput
    some?: AnimeCollectionWhereInput
    none?: AnimeCollectionWhereInput
  }

  export type UserSettingsNullableScalarRelationFilter = {
    is?: UserSettingsWhereInput | null
    isNot?: UserSettingsWhereInput | null
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeCollectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    picture?: SortOrder
    role?: SortOrder
    method?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    picture?: SortOrder
    role?: SortOrder
    method?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    picture?: SortOrder
    role?: SortOrder
    method?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type AnimeDemographicCreateNestedManyWithoutDemographicInput = {
    create?: XOR<AnimeDemographicCreateWithoutDemographicInput, AnimeDemographicUncheckedCreateWithoutDemographicInput> | AnimeDemographicCreateWithoutDemographicInput[] | AnimeDemographicUncheckedCreateWithoutDemographicInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutDemographicInput | AnimeDemographicCreateOrConnectWithoutDemographicInput[]
    createMany?: AnimeDemographicCreateManyDemographicInputEnvelope
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
  }

  export type AnimeDemographicUncheckedCreateNestedManyWithoutDemographicInput = {
    create?: XOR<AnimeDemographicCreateWithoutDemographicInput, AnimeDemographicUncheckedCreateWithoutDemographicInput> | AnimeDemographicCreateWithoutDemographicInput[] | AnimeDemographicUncheckedCreateWithoutDemographicInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutDemographicInput | AnimeDemographicCreateOrConnectWithoutDemographicInput[]
    createMany?: AnimeDemographicCreateManyDemographicInputEnvelope
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AnimeDemographicUpdateManyWithoutDemographicNestedInput = {
    create?: XOR<AnimeDemographicCreateWithoutDemographicInput, AnimeDemographicUncheckedCreateWithoutDemographicInput> | AnimeDemographicCreateWithoutDemographicInput[] | AnimeDemographicUncheckedCreateWithoutDemographicInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutDemographicInput | AnimeDemographicCreateOrConnectWithoutDemographicInput[]
    upsert?: AnimeDemographicUpsertWithWhereUniqueWithoutDemographicInput | AnimeDemographicUpsertWithWhereUniqueWithoutDemographicInput[]
    createMany?: AnimeDemographicCreateManyDemographicInputEnvelope
    set?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    disconnect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    delete?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    update?: AnimeDemographicUpdateWithWhereUniqueWithoutDemographicInput | AnimeDemographicUpdateWithWhereUniqueWithoutDemographicInput[]
    updateMany?: AnimeDemographicUpdateManyWithWhereWithoutDemographicInput | AnimeDemographicUpdateManyWithWhereWithoutDemographicInput[]
    deleteMany?: AnimeDemographicScalarWhereInput | AnimeDemographicScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AnimeDemographicUncheckedUpdateManyWithoutDemographicNestedInput = {
    create?: XOR<AnimeDemographicCreateWithoutDemographicInput, AnimeDemographicUncheckedCreateWithoutDemographicInput> | AnimeDemographicCreateWithoutDemographicInput[] | AnimeDemographicUncheckedCreateWithoutDemographicInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutDemographicInput | AnimeDemographicCreateOrConnectWithoutDemographicInput[]
    upsert?: AnimeDemographicUpsertWithWhereUniqueWithoutDemographicInput | AnimeDemographicUpsertWithWhereUniqueWithoutDemographicInput[]
    createMany?: AnimeDemographicCreateManyDemographicInputEnvelope
    set?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    disconnect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    delete?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    update?: AnimeDemographicUpdateWithWhereUniqueWithoutDemographicInput | AnimeDemographicUpdateWithWhereUniqueWithoutDemographicInput[]
    updateMany?: AnimeDemographicUpdateManyWithWhereWithoutDemographicInput | AnimeDemographicUpdateManyWithWhereWithoutDemographicInput[]
    deleteMany?: AnimeDemographicScalarWhereInput | AnimeDemographicScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutDemographicInput = {
    create?: XOR<AnimeCreateWithoutDemographicInput, AnimeUncheckedCreateWithoutDemographicInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutDemographicInput
    connect?: AnimeWhereUniqueInput
  }

  export type DemographicCreateNestedOneWithoutAnimesInput = {
    create?: XOR<DemographicCreateWithoutAnimesInput, DemographicUncheckedCreateWithoutAnimesInput>
    connectOrCreate?: DemographicCreateOrConnectWithoutAnimesInput
    connect?: DemographicWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutDemographicNestedInput = {
    create?: XOR<AnimeCreateWithoutDemographicInput, AnimeUncheckedCreateWithoutDemographicInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutDemographicInput
    upsert?: AnimeUpsertWithoutDemographicInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutDemographicInput, AnimeUpdateWithoutDemographicInput>, AnimeUncheckedUpdateWithoutDemographicInput>
  }

  export type DemographicUpdateOneRequiredWithoutAnimesNestedInput = {
    create?: XOR<DemographicCreateWithoutAnimesInput, DemographicUncheckedCreateWithoutAnimesInput>
    connectOrCreate?: DemographicCreateOrConnectWithoutAnimesInput
    upsert?: DemographicUpsertWithoutAnimesInput
    connect?: DemographicWhereUniqueInput
    update?: XOR<XOR<DemographicUpdateToOneWithWhereWithoutAnimesInput, DemographicUpdateWithoutAnimesInput>, DemographicUncheckedUpdateWithoutAnimesInput>
  }

  export type AnimeGenreCreateNestedManyWithoutGenreInput = {
    create?: XOR<AnimeGenreCreateWithoutGenreInput, AnimeGenreUncheckedCreateWithoutGenreInput> | AnimeGenreCreateWithoutGenreInput[] | AnimeGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutGenreInput | AnimeGenreCreateOrConnectWithoutGenreInput[]
    createMany?: AnimeGenreCreateManyGenreInputEnvelope
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
  }

  export type AnimeGenreUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<AnimeGenreCreateWithoutGenreInput, AnimeGenreUncheckedCreateWithoutGenreInput> | AnimeGenreCreateWithoutGenreInput[] | AnimeGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutGenreInput | AnimeGenreCreateOrConnectWithoutGenreInput[]
    createMany?: AnimeGenreCreateManyGenreInputEnvelope
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
  }

  export type AnimeGenreUpdateManyWithoutGenreNestedInput = {
    create?: XOR<AnimeGenreCreateWithoutGenreInput, AnimeGenreUncheckedCreateWithoutGenreInput> | AnimeGenreCreateWithoutGenreInput[] | AnimeGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutGenreInput | AnimeGenreCreateOrConnectWithoutGenreInput[]
    upsert?: AnimeGenreUpsertWithWhereUniqueWithoutGenreInput | AnimeGenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: AnimeGenreCreateManyGenreInputEnvelope
    set?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    disconnect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    delete?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    update?: AnimeGenreUpdateWithWhereUniqueWithoutGenreInput | AnimeGenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: AnimeGenreUpdateManyWithWhereWithoutGenreInput | AnimeGenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: AnimeGenreScalarWhereInput | AnimeGenreScalarWhereInput[]
  }

  export type AnimeGenreUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<AnimeGenreCreateWithoutGenreInput, AnimeGenreUncheckedCreateWithoutGenreInput> | AnimeGenreCreateWithoutGenreInput[] | AnimeGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutGenreInput | AnimeGenreCreateOrConnectWithoutGenreInput[]
    upsert?: AnimeGenreUpsertWithWhereUniqueWithoutGenreInput | AnimeGenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: AnimeGenreCreateManyGenreInputEnvelope
    set?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    disconnect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    delete?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    update?: AnimeGenreUpdateWithWhereUniqueWithoutGenreInput | AnimeGenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: AnimeGenreUpdateManyWithWhereWithoutGenreInput | AnimeGenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: AnimeGenreScalarWhereInput | AnimeGenreScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutGenresInput = {
    create?: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutGenresInput
    connect?: AnimeWhereUniqueInput
  }

  export type GenreCreateNestedOneWithoutAnimesInput = {
    create?: XOR<GenreCreateWithoutAnimesInput, GenreUncheckedCreateWithoutAnimesInput>
    connectOrCreate?: GenreCreateOrConnectWithoutAnimesInput
    connect?: GenreWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutGenresNestedInput = {
    create?: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutGenresInput
    upsert?: AnimeUpsertWithoutGenresInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutGenresInput, AnimeUpdateWithoutGenresInput>, AnimeUncheckedUpdateWithoutGenresInput>
  }

  export type GenreUpdateOneRequiredWithoutAnimesNestedInput = {
    create?: XOR<GenreCreateWithoutAnimesInput, GenreUncheckedCreateWithoutAnimesInput>
    connectOrCreate?: GenreCreateOrConnectWithoutAnimesInput
    upsert?: GenreUpsertWithoutAnimesInput
    connect?: GenreWhereUniqueInput
    update?: XOR<XOR<GenreUpdateToOneWithWhereWithoutAnimesInput, GenreUpdateWithoutAnimesInput>, GenreUncheckedUpdateWithoutAnimesInput>
  }

  export type AnimeCreateNestedOneWithoutPosterInput = {
    create?: XOR<AnimeCreateWithoutPosterInput, AnimeUncheckedCreateWithoutPosterInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutPosterInput
    connect?: AnimeWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AnimeUpdateOneRequiredWithoutPosterNestedInput = {
    create?: XOR<AnimeCreateWithoutPosterInput, AnimeUncheckedCreateWithoutPosterInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutPosterInput
    upsert?: AnimeUpsertWithoutPosterInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutPosterInput, AnimeUpdateWithoutPosterInput>, AnimeUncheckedUpdateWithoutPosterInput>
  }

  export type AnimeCreateNestedOneWithoutRelatedInput = {
    create?: XOR<AnimeCreateWithoutRelatedInput, AnimeUncheckedCreateWithoutRelatedInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedInput
    connect?: AnimeWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutRelatedAnimeInput = {
    create?: XOR<AnimeCreateWithoutRelatedAnimeInput, AnimeUncheckedCreateWithoutRelatedAnimeInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedAnimeInput
    connect?: AnimeWhereUniqueInput
  }

  export type EnumRelationKindFieldUpdateOperationsInput = {
    set?: $Enums.RelationKind
  }

  export type AnimeUpdateOneRequiredWithoutRelatedNestedInput = {
    create?: XOR<AnimeCreateWithoutRelatedInput, AnimeUncheckedCreateWithoutRelatedInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedInput
    upsert?: AnimeUpsertWithoutRelatedInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutRelatedInput, AnimeUpdateWithoutRelatedInput>, AnimeUncheckedUpdateWithoutRelatedInput>
  }

  export type AnimeUpdateOneRequiredWithoutRelatedAnimeNestedInput = {
    create?: XOR<AnimeCreateWithoutRelatedAnimeInput, AnimeUncheckedCreateWithoutRelatedAnimeInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutRelatedAnimeInput
    upsert?: AnimeUpsertWithoutRelatedAnimeInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutRelatedAnimeInput, AnimeUpdateWithoutRelatedAnimeInput>, AnimeUncheckedUpdateWithoutRelatedAnimeInput>
  }

  export type AnimeScreenshotCreateNestedManyWithoutScreenshotInput = {
    create?: XOR<AnimeScreenshotCreateWithoutScreenshotInput, AnimeScreenshotUncheckedCreateWithoutScreenshotInput> | AnimeScreenshotCreateWithoutScreenshotInput[] | AnimeScreenshotUncheckedCreateWithoutScreenshotInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutScreenshotInput | AnimeScreenshotCreateOrConnectWithoutScreenshotInput[]
    createMany?: AnimeScreenshotCreateManyScreenshotInputEnvelope
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
  }

  export type AnimeScreenshotUncheckedCreateNestedManyWithoutScreenshotInput = {
    create?: XOR<AnimeScreenshotCreateWithoutScreenshotInput, AnimeScreenshotUncheckedCreateWithoutScreenshotInput> | AnimeScreenshotCreateWithoutScreenshotInput[] | AnimeScreenshotUncheckedCreateWithoutScreenshotInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutScreenshotInput | AnimeScreenshotCreateOrConnectWithoutScreenshotInput[]
    createMany?: AnimeScreenshotCreateManyScreenshotInputEnvelope
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
  }

  export type AnimeScreenshotUpdateManyWithoutScreenshotNestedInput = {
    create?: XOR<AnimeScreenshotCreateWithoutScreenshotInput, AnimeScreenshotUncheckedCreateWithoutScreenshotInput> | AnimeScreenshotCreateWithoutScreenshotInput[] | AnimeScreenshotUncheckedCreateWithoutScreenshotInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutScreenshotInput | AnimeScreenshotCreateOrConnectWithoutScreenshotInput[]
    upsert?: AnimeScreenshotUpsertWithWhereUniqueWithoutScreenshotInput | AnimeScreenshotUpsertWithWhereUniqueWithoutScreenshotInput[]
    createMany?: AnimeScreenshotCreateManyScreenshotInputEnvelope
    set?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    disconnect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    delete?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    update?: AnimeScreenshotUpdateWithWhereUniqueWithoutScreenshotInput | AnimeScreenshotUpdateWithWhereUniqueWithoutScreenshotInput[]
    updateMany?: AnimeScreenshotUpdateManyWithWhereWithoutScreenshotInput | AnimeScreenshotUpdateManyWithWhereWithoutScreenshotInput[]
    deleteMany?: AnimeScreenshotScalarWhereInput | AnimeScreenshotScalarWhereInput[]
  }

  export type AnimeScreenshotUncheckedUpdateManyWithoutScreenshotNestedInput = {
    create?: XOR<AnimeScreenshotCreateWithoutScreenshotInput, AnimeScreenshotUncheckedCreateWithoutScreenshotInput> | AnimeScreenshotCreateWithoutScreenshotInput[] | AnimeScreenshotUncheckedCreateWithoutScreenshotInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutScreenshotInput | AnimeScreenshotCreateOrConnectWithoutScreenshotInput[]
    upsert?: AnimeScreenshotUpsertWithWhereUniqueWithoutScreenshotInput | AnimeScreenshotUpsertWithWhereUniqueWithoutScreenshotInput[]
    createMany?: AnimeScreenshotCreateManyScreenshotInputEnvelope
    set?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    disconnect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    delete?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    update?: AnimeScreenshotUpdateWithWhereUniqueWithoutScreenshotInput | AnimeScreenshotUpdateWithWhereUniqueWithoutScreenshotInput[]
    updateMany?: AnimeScreenshotUpdateManyWithWhereWithoutScreenshotInput | AnimeScreenshotUpdateManyWithWhereWithoutScreenshotInput[]
    deleteMany?: AnimeScreenshotScalarWhereInput | AnimeScreenshotScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutScreenshotsInput = {
    create?: XOR<AnimeCreateWithoutScreenshotsInput, AnimeUncheckedCreateWithoutScreenshotsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutScreenshotsInput
    connect?: AnimeWhereUniqueInput
  }

  export type ScreenshotsCreateNestedOneWithoutAnimeScreenshotInput = {
    create?: XOR<ScreenshotsCreateWithoutAnimeScreenshotInput, ScreenshotsUncheckedCreateWithoutAnimeScreenshotInput>
    connectOrCreate?: ScreenshotsCreateOrConnectWithoutAnimeScreenshotInput
    connect?: ScreenshotsWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutScreenshotsNestedInput = {
    create?: XOR<AnimeCreateWithoutScreenshotsInput, AnimeUncheckedCreateWithoutScreenshotsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutScreenshotsInput
    upsert?: AnimeUpsertWithoutScreenshotsInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutScreenshotsInput, AnimeUpdateWithoutScreenshotsInput>, AnimeUncheckedUpdateWithoutScreenshotsInput>
  }

  export type ScreenshotsUpdateOneRequiredWithoutAnimeScreenshotNestedInput = {
    create?: XOR<ScreenshotsCreateWithoutAnimeScreenshotInput, ScreenshotsUncheckedCreateWithoutAnimeScreenshotInput>
    connectOrCreate?: ScreenshotsCreateOrConnectWithoutAnimeScreenshotInput
    upsert?: ScreenshotsUpsertWithoutAnimeScreenshotInput
    connect?: ScreenshotsWhereUniqueInput
    update?: XOR<XOR<ScreenshotsUpdateToOneWithWhereWithoutAnimeScreenshotInput, ScreenshotsUpdateWithoutAnimeScreenshotInput>, ScreenshotsUncheckedUpdateWithoutAnimeScreenshotInput>
  }

  export type AnimeStudioCreateNestedManyWithoutStudioInput = {
    create?: XOR<AnimeStudioCreateWithoutStudioInput, AnimeStudioUncheckedCreateWithoutStudioInput> | AnimeStudioCreateWithoutStudioInput[] | AnimeStudioUncheckedCreateWithoutStudioInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutStudioInput | AnimeStudioCreateOrConnectWithoutStudioInput[]
    createMany?: AnimeStudioCreateManyStudioInputEnvelope
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
  }

  export type AnimeStudioUncheckedCreateNestedManyWithoutStudioInput = {
    create?: XOR<AnimeStudioCreateWithoutStudioInput, AnimeStudioUncheckedCreateWithoutStudioInput> | AnimeStudioCreateWithoutStudioInput[] | AnimeStudioUncheckedCreateWithoutStudioInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutStudioInput | AnimeStudioCreateOrConnectWithoutStudioInput[]
    createMany?: AnimeStudioCreateManyStudioInputEnvelope
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
  }

  export type AnimeStudioUpdateManyWithoutStudioNestedInput = {
    create?: XOR<AnimeStudioCreateWithoutStudioInput, AnimeStudioUncheckedCreateWithoutStudioInput> | AnimeStudioCreateWithoutStudioInput[] | AnimeStudioUncheckedCreateWithoutStudioInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutStudioInput | AnimeStudioCreateOrConnectWithoutStudioInput[]
    upsert?: AnimeStudioUpsertWithWhereUniqueWithoutStudioInput | AnimeStudioUpsertWithWhereUniqueWithoutStudioInput[]
    createMany?: AnimeStudioCreateManyStudioInputEnvelope
    set?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    disconnect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    delete?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    update?: AnimeStudioUpdateWithWhereUniqueWithoutStudioInput | AnimeStudioUpdateWithWhereUniqueWithoutStudioInput[]
    updateMany?: AnimeStudioUpdateManyWithWhereWithoutStudioInput | AnimeStudioUpdateManyWithWhereWithoutStudioInput[]
    deleteMany?: AnimeStudioScalarWhereInput | AnimeStudioScalarWhereInput[]
  }

  export type AnimeStudioUncheckedUpdateManyWithoutStudioNestedInput = {
    create?: XOR<AnimeStudioCreateWithoutStudioInput, AnimeStudioUncheckedCreateWithoutStudioInput> | AnimeStudioCreateWithoutStudioInput[] | AnimeStudioUncheckedCreateWithoutStudioInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutStudioInput | AnimeStudioCreateOrConnectWithoutStudioInput[]
    upsert?: AnimeStudioUpsertWithWhereUniqueWithoutStudioInput | AnimeStudioUpsertWithWhereUniqueWithoutStudioInput[]
    createMany?: AnimeStudioCreateManyStudioInputEnvelope
    set?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    disconnect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    delete?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    update?: AnimeStudioUpdateWithWhereUniqueWithoutStudioInput | AnimeStudioUpdateWithWhereUniqueWithoutStudioInput[]
    updateMany?: AnimeStudioUpdateManyWithWhereWithoutStudioInput | AnimeStudioUpdateManyWithWhereWithoutStudioInput[]
    deleteMany?: AnimeStudioScalarWhereInput | AnimeStudioScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutStudiosInput = {
    create?: XOR<AnimeCreateWithoutStudiosInput, AnimeUncheckedCreateWithoutStudiosInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutStudiosInput
    connect?: AnimeWhereUniqueInput
  }

  export type StudioCreateNestedOneWithoutAnimeStudioInput = {
    create?: XOR<StudioCreateWithoutAnimeStudioInput, StudioUncheckedCreateWithoutAnimeStudioInput>
    connectOrCreate?: StudioCreateOrConnectWithoutAnimeStudioInput
    connect?: StudioWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutStudiosNestedInput = {
    create?: XOR<AnimeCreateWithoutStudiosInput, AnimeUncheckedCreateWithoutStudiosInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutStudiosInput
    upsert?: AnimeUpsertWithoutStudiosInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutStudiosInput, AnimeUpdateWithoutStudiosInput>, AnimeUncheckedUpdateWithoutStudiosInput>
  }

  export type StudioUpdateOneRequiredWithoutAnimeStudioNestedInput = {
    create?: XOR<StudioCreateWithoutAnimeStudioInput, StudioUncheckedCreateWithoutAnimeStudioInput>
    connectOrCreate?: StudioCreateOrConnectWithoutAnimeStudioInput
    upsert?: StudioUpsertWithoutAnimeStudioInput
    connect?: StudioWhereUniqueInput
    update?: XOR<XOR<StudioUpdateToOneWithWhereWithoutAnimeStudioInput, StudioUpdateWithoutAnimeStudioInput>, StudioUncheckedUpdateWithoutAnimeStudioInput>
  }

  export type AnimeThemeCreateNestedManyWithoutThemeInput = {
    create?: XOR<AnimeThemeCreateWithoutThemeInput, AnimeThemeUncheckedCreateWithoutThemeInput> | AnimeThemeCreateWithoutThemeInput[] | AnimeThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutThemeInput | AnimeThemeCreateOrConnectWithoutThemeInput[]
    createMany?: AnimeThemeCreateManyThemeInputEnvelope
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
  }

  export type AnimeThemeUncheckedCreateNestedManyWithoutThemeInput = {
    create?: XOR<AnimeThemeCreateWithoutThemeInput, AnimeThemeUncheckedCreateWithoutThemeInput> | AnimeThemeCreateWithoutThemeInput[] | AnimeThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutThemeInput | AnimeThemeCreateOrConnectWithoutThemeInput[]
    createMany?: AnimeThemeCreateManyThemeInputEnvelope
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
  }

  export type AnimeThemeUpdateManyWithoutThemeNestedInput = {
    create?: XOR<AnimeThemeCreateWithoutThemeInput, AnimeThemeUncheckedCreateWithoutThemeInput> | AnimeThemeCreateWithoutThemeInput[] | AnimeThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutThemeInput | AnimeThemeCreateOrConnectWithoutThemeInput[]
    upsert?: AnimeThemeUpsertWithWhereUniqueWithoutThemeInput | AnimeThemeUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: AnimeThemeCreateManyThemeInputEnvelope
    set?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    disconnect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    delete?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    update?: AnimeThemeUpdateWithWhereUniqueWithoutThemeInput | AnimeThemeUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: AnimeThemeUpdateManyWithWhereWithoutThemeInput | AnimeThemeUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: AnimeThemeScalarWhereInput | AnimeThemeScalarWhereInput[]
  }

  export type AnimeThemeUncheckedUpdateManyWithoutThemeNestedInput = {
    create?: XOR<AnimeThemeCreateWithoutThemeInput, AnimeThemeUncheckedCreateWithoutThemeInput> | AnimeThemeCreateWithoutThemeInput[] | AnimeThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutThemeInput | AnimeThemeCreateOrConnectWithoutThemeInput[]
    upsert?: AnimeThemeUpsertWithWhereUniqueWithoutThemeInput | AnimeThemeUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: AnimeThemeCreateManyThemeInputEnvelope
    set?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    disconnect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    delete?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    update?: AnimeThemeUpdateWithWhereUniqueWithoutThemeInput | AnimeThemeUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: AnimeThemeUpdateManyWithWhereWithoutThemeInput | AnimeThemeUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: AnimeThemeScalarWhereInput | AnimeThemeScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutThemeInput = {
    create?: XOR<AnimeCreateWithoutThemeInput, AnimeUncheckedCreateWithoutThemeInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutThemeInput
    connect?: AnimeWhereUniqueInput
  }

  export type ThemeCreateNestedOneWithoutAnimesInput = {
    create?: XOR<ThemeCreateWithoutAnimesInput, ThemeUncheckedCreateWithoutAnimesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutAnimesInput
    connect?: ThemeWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutThemeNestedInput = {
    create?: XOR<AnimeCreateWithoutThemeInput, AnimeUncheckedCreateWithoutThemeInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutThemeInput
    upsert?: AnimeUpsertWithoutThemeInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutThemeInput, AnimeUpdateWithoutThemeInput>, AnimeUncheckedUpdateWithoutThemeInput>
  }

  export type ThemeUpdateOneRequiredWithoutAnimesNestedInput = {
    create?: XOR<ThemeCreateWithoutAnimesInput, ThemeUncheckedCreateWithoutAnimesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutAnimesInput
    upsert?: ThemeUpsertWithoutAnimesInput
    connect?: ThemeWhereUniqueInput
    update?: XOR<XOR<ThemeUpdateToOneWithWhereWithoutAnimesInput, ThemeUpdateWithoutAnimesInput>, ThemeUncheckedUpdateWithoutAnimesInput>
  }

  export type AnimeCreateNestedOneWithoutVideosInput = {
    create?: XOR<AnimeCreateWithoutVideosInput, AnimeUncheckedCreateWithoutVideosInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutVideosInput
    connect?: AnimeWhereUniqueInput
  }

  export type VideoCreateNestedOneWithoutAnimeVideoInput = {
    create?: XOR<VideoCreateWithoutAnimeVideoInput, VideoUncheckedCreateWithoutAnimeVideoInput>
    connectOrCreate?: VideoCreateOrConnectWithoutAnimeVideoInput
    connect?: VideoWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutVideosNestedInput = {
    create?: XOR<AnimeCreateWithoutVideosInput, AnimeUncheckedCreateWithoutVideosInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutVideosInput
    upsert?: AnimeUpsertWithoutVideosInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutVideosInput, AnimeUpdateWithoutVideosInput>, AnimeUncheckedUpdateWithoutVideosInput>
  }

  export type VideoUpdateOneRequiredWithoutAnimeVideoNestedInput = {
    create?: XOR<VideoCreateWithoutAnimeVideoInput, VideoUncheckedCreateWithoutAnimeVideoInput>
    connectOrCreate?: VideoCreateOrConnectWithoutAnimeVideoInput
    upsert?: VideoUpsertWithoutAnimeVideoInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutAnimeVideoInput, VideoUpdateWithoutAnimeVideoInput>, VideoUncheckedUpdateWithoutAnimeVideoInput>
  }

  export type AnimeVideoCreateNestedManyWithoutVideoInput = {
    create?: XOR<AnimeVideoCreateWithoutVideoInput, AnimeVideoUncheckedCreateWithoutVideoInput> | AnimeVideoCreateWithoutVideoInput[] | AnimeVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutVideoInput | AnimeVideoCreateOrConnectWithoutVideoInput[]
    createMany?: AnimeVideoCreateManyVideoInputEnvelope
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
  }

  export type AnimeVideoUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<AnimeVideoCreateWithoutVideoInput, AnimeVideoUncheckedCreateWithoutVideoInput> | AnimeVideoCreateWithoutVideoInput[] | AnimeVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutVideoInput | AnimeVideoCreateOrConnectWithoutVideoInput[]
    createMany?: AnimeVideoCreateManyVideoInputEnvelope
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
  }

  export type EnumVideoKindEnumFieldUpdateOperationsInput = {
    set?: $Enums.VideoKindEnum
  }

  export type AnimeVideoUpdateManyWithoutVideoNestedInput = {
    create?: XOR<AnimeVideoCreateWithoutVideoInput, AnimeVideoUncheckedCreateWithoutVideoInput> | AnimeVideoCreateWithoutVideoInput[] | AnimeVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutVideoInput | AnimeVideoCreateOrConnectWithoutVideoInput[]
    upsert?: AnimeVideoUpsertWithWhereUniqueWithoutVideoInput | AnimeVideoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: AnimeVideoCreateManyVideoInputEnvelope
    set?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    disconnect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    delete?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    update?: AnimeVideoUpdateWithWhereUniqueWithoutVideoInput | AnimeVideoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: AnimeVideoUpdateManyWithWhereWithoutVideoInput | AnimeVideoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: AnimeVideoScalarWhereInput | AnimeVideoScalarWhereInput[]
  }

  export type AnimeVideoUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<AnimeVideoCreateWithoutVideoInput, AnimeVideoUncheckedCreateWithoutVideoInput> | AnimeVideoCreateWithoutVideoInput[] | AnimeVideoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutVideoInput | AnimeVideoCreateOrConnectWithoutVideoInput[]
    upsert?: AnimeVideoUpsertWithWhereUniqueWithoutVideoInput | AnimeVideoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: AnimeVideoCreateManyVideoInputEnvelope
    set?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    disconnect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    delete?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    update?: AnimeVideoUpdateWithWhereUniqueWithoutVideoInput | AnimeVideoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: AnimeVideoUpdateManyWithWhereWithoutVideoInput | AnimeVideoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: AnimeVideoScalarWhereInput | AnimeVideoScalarWhereInput[]
  }

  export type AnimeCreatesynonymsInput = {
    set: string[]
  }

  export type AnimePosterCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimePosterCreateWithoutAnimeInput, AnimePosterUncheckedCreateWithoutAnimeInput> | AnimePosterCreateWithoutAnimeInput[] | AnimePosterUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimePosterCreateOrConnectWithoutAnimeInput | AnimePosterCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimePosterCreateManyAnimeInputEnvelope
    connect?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
  }

  export type AnimeStudioCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeStudioCreateWithoutAnimeInput, AnimeStudioUncheckedCreateWithoutAnimeInput> | AnimeStudioCreateWithoutAnimeInput[] | AnimeStudioUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutAnimeInput | AnimeStudioCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeStudioCreateManyAnimeInputEnvelope
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
  }

  export type RelatedAnimeCreateNestedManyWithoutAnimeInput = {
    create?: XOR<RelatedAnimeCreateWithoutAnimeInput, RelatedAnimeUncheckedCreateWithoutAnimeInput> | RelatedAnimeCreateWithoutAnimeInput[] | RelatedAnimeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutAnimeInput | RelatedAnimeCreateOrConnectWithoutAnimeInput[]
    createMany?: RelatedAnimeCreateManyAnimeInputEnvelope
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
  }

  export type AnimeVideoCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeVideoCreateWithoutAnimeInput, AnimeVideoUncheckedCreateWithoutAnimeInput> | AnimeVideoCreateWithoutAnimeInput[] | AnimeVideoUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutAnimeInput | AnimeVideoCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeVideoCreateManyAnimeInputEnvelope
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
  }

  export type AnimeScreenshotCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeScreenshotCreateWithoutAnimeInput, AnimeScreenshotUncheckedCreateWithoutAnimeInput> | AnimeScreenshotCreateWithoutAnimeInput[] | AnimeScreenshotUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutAnimeInput | AnimeScreenshotCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeScreenshotCreateManyAnimeInputEnvelope
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
  }

  export type AnimeGenreCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeGenreCreateWithoutAnimeInput, AnimeGenreUncheckedCreateWithoutAnimeInput> | AnimeGenreCreateWithoutAnimeInput[] | AnimeGenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutAnimeInput | AnimeGenreCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeGenreCreateManyAnimeInputEnvelope
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
  }

  export type AnimeThemeCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeThemeCreateWithoutAnimeInput, AnimeThemeUncheckedCreateWithoutAnimeInput> | AnimeThemeCreateWithoutAnimeInput[] | AnimeThemeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutAnimeInput | AnimeThemeCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeThemeCreateManyAnimeInputEnvelope
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
  }

  export type AnimeDemographicCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeDemographicCreateWithoutAnimeInput, AnimeDemographicUncheckedCreateWithoutAnimeInput> | AnimeDemographicCreateWithoutAnimeInput[] | AnimeDemographicUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutAnimeInput | AnimeDemographicCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeDemographicCreateManyAnimeInputEnvelope
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
  }

  export type RelatedAnimeCreateNestedManyWithoutRelatedInput = {
    create?: XOR<RelatedAnimeCreateWithoutRelatedInput, RelatedAnimeUncheckedCreateWithoutRelatedInput> | RelatedAnimeCreateWithoutRelatedInput[] | RelatedAnimeUncheckedCreateWithoutRelatedInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutRelatedInput | RelatedAnimeCreateOrConnectWithoutRelatedInput[]
    createMany?: RelatedAnimeCreateManyRelatedInputEnvelope
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
  }

  export type AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutAnimeInput, AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput> | AnimeEpisodeProgressCreateWithoutAnimeInput[] | AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput | AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeEpisodeProgressCreateManyAnimeInputEnvelope
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
  }

  export type AnimeInCollectionCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeInCollectionCreateWithoutAnimeInput, AnimeInCollectionUncheckedCreateWithoutAnimeInput> | AnimeInCollectionCreateWithoutAnimeInput[] | AnimeInCollectionUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutAnimeInput | AnimeInCollectionCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeInCollectionCreateManyAnimeInputEnvelope
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAnimeInput = {
    create?: XOR<CommentCreateWithoutAnimeInput, CommentUncheckedCreateWithoutAnimeInput> | CommentCreateWithoutAnimeInput[] | CommentUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAnimeInput | CommentCreateOrConnectWithoutAnimeInput[]
    createMany?: CommentCreateManyAnimeInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutAnimeInput = {
    create?: XOR<ReviewCreateWithoutAnimeInput, ReviewUncheckedCreateWithoutAnimeInput> | ReviewCreateWithoutAnimeInput[] | ReviewUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAnimeInput | ReviewCreateOrConnectWithoutAnimeInput[]
    createMany?: ReviewCreateManyAnimeInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type AnimePosterUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimePosterCreateWithoutAnimeInput, AnimePosterUncheckedCreateWithoutAnimeInput> | AnimePosterCreateWithoutAnimeInput[] | AnimePosterUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimePosterCreateOrConnectWithoutAnimeInput | AnimePosterCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimePosterCreateManyAnimeInputEnvelope
    connect?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
  }

  export type AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeStudioCreateWithoutAnimeInput, AnimeStudioUncheckedCreateWithoutAnimeInput> | AnimeStudioCreateWithoutAnimeInput[] | AnimeStudioUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutAnimeInput | AnimeStudioCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeStudioCreateManyAnimeInputEnvelope
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
  }

  export type RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<RelatedAnimeCreateWithoutAnimeInput, RelatedAnimeUncheckedCreateWithoutAnimeInput> | RelatedAnimeCreateWithoutAnimeInput[] | RelatedAnimeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutAnimeInput | RelatedAnimeCreateOrConnectWithoutAnimeInput[]
    createMany?: RelatedAnimeCreateManyAnimeInputEnvelope
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
  }

  export type AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeVideoCreateWithoutAnimeInput, AnimeVideoUncheckedCreateWithoutAnimeInput> | AnimeVideoCreateWithoutAnimeInput[] | AnimeVideoUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutAnimeInput | AnimeVideoCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeVideoCreateManyAnimeInputEnvelope
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
  }

  export type AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeScreenshotCreateWithoutAnimeInput, AnimeScreenshotUncheckedCreateWithoutAnimeInput> | AnimeScreenshotCreateWithoutAnimeInput[] | AnimeScreenshotUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutAnimeInput | AnimeScreenshotCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeScreenshotCreateManyAnimeInputEnvelope
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
  }

  export type AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeGenreCreateWithoutAnimeInput, AnimeGenreUncheckedCreateWithoutAnimeInput> | AnimeGenreCreateWithoutAnimeInput[] | AnimeGenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutAnimeInput | AnimeGenreCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeGenreCreateManyAnimeInputEnvelope
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
  }

  export type AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeThemeCreateWithoutAnimeInput, AnimeThemeUncheckedCreateWithoutAnimeInput> | AnimeThemeCreateWithoutAnimeInput[] | AnimeThemeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutAnimeInput | AnimeThemeCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeThemeCreateManyAnimeInputEnvelope
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
  }

  export type AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeDemographicCreateWithoutAnimeInput, AnimeDemographicUncheckedCreateWithoutAnimeInput> | AnimeDemographicCreateWithoutAnimeInput[] | AnimeDemographicUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutAnimeInput | AnimeDemographicCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeDemographicCreateManyAnimeInputEnvelope
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
  }

  export type RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput = {
    create?: XOR<RelatedAnimeCreateWithoutRelatedInput, RelatedAnimeUncheckedCreateWithoutRelatedInput> | RelatedAnimeCreateWithoutRelatedInput[] | RelatedAnimeUncheckedCreateWithoutRelatedInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutRelatedInput | RelatedAnimeCreateOrConnectWithoutRelatedInput[]
    createMany?: RelatedAnimeCreateManyRelatedInputEnvelope
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
  }

  export type AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutAnimeInput, AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput> | AnimeEpisodeProgressCreateWithoutAnimeInput[] | AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput | AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeEpisodeProgressCreateManyAnimeInputEnvelope
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
  }

  export type AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<AnimeInCollectionCreateWithoutAnimeInput, AnimeInCollectionUncheckedCreateWithoutAnimeInput> | AnimeInCollectionCreateWithoutAnimeInput[] | AnimeInCollectionUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutAnimeInput | AnimeInCollectionCreateOrConnectWithoutAnimeInput[]
    createMany?: AnimeInCollectionCreateManyAnimeInputEnvelope
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<CommentCreateWithoutAnimeInput, CommentUncheckedCreateWithoutAnimeInput> | CommentCreateWithoutAnimeInput[] | CommentUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAnimeInput | CommentCreateOrConnectWithoutAnimeInput[]
    createMany?: CommentCreateManyAnimeInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<ReviewCreateWithoutAnimeInput, ReviewUncheckedCreateWithoutAnimeInput> | ReviewCreateWithoutAnimeInput[] | ReviewUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAnimeInput | ReviewCreateOrConnectWithoutAnimeInput[]
    createMany?: ReviewCreateManyAnimeInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type AnimeUpdatesynonymsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumAnimeStatusFieldUpdateOperationsInput = {
    set?: $Enums.AnimeStatus
  }

  export type NullableEnumAnimeKindFieldUpdateOperationsInput = {
    set?: $Enums.AnimeKind | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableEnumAnimeRatingFieldUpdateOperationsInput = {
    set?: $Enums.AnimeRating | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AnimePosterUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimePosterCreateWithoutAnimeInput, AnimePosterUncheckedCreateWithoutAnimeInput> | AnimePosterCreateWithoutAnimeInput[] | AnimePosterUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimePosterCreateOrConnectWithoutAnimeInput | AnimePosterCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimePosterUpsertWithWhereUniqueWithoutAnimeInput | AnimePosterUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimePosterCreateManyAnimeInputEnvelope
    set?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    disconnect?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    delete?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    connect?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    update?: AnimePosterUpdateWithWhereUniqueWithoutAnimeInput | AnimePosterUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimePosterUpdateManyWithWhereWithoutAnimeInput | AnimePosterUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimePosterScalarWhereInput | AnimePosterScalarWhereInput[]
  }

  export type AnimeStudioUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeStudioCreateWithoutAnimeInput, AnimeStudioUncheckedCreateWithoutAnimeInput> | AnimeStudioCreateWithoutAnimeInput[] | AnimeStudioUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutAnimeInput | AnimeStudioCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeStudioUpsertWithWhereUniqueWithoutAnimeInput | AnimeStudioUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeStudioCreateManyAnimeInputEnvelope
    set?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    disconnect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    delete?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    update?: AnimeStudioUpdateWithWhereUniqueWithoutAnimeInput | AnimeStudioUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeStudioUpdateManyWithWhereWithoutAnimeInput | AnimeStudioUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeStudioScalarWhereInput | AnimeStudioScalarWhereInput[]
  }

  export type RelatedAnimeUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<RelatedAnimeCreateWithoutAnimeInput, RelatedAnimeUncheckedCreateWithoutAnimeInput> | RelatedAnimeCreateWithoutAnimeInput[] | RelatedAnimeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutAnimeInput | RelatedAnimeCreateOrConnectWithoutAnimeInput[]
    upsert?: RelatedAnimeUpsertWithWhereUniqueWithoutAnimeInput | RelatedAnimeUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: RelatedAnimeCreateManyAnimeInputEnvelope
    set?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    disconnect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    delete?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    update?: RelatedAnimeUpdateWithWhereUniqueWithoutAnimeInput | RelatedAnimeUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: RelatedAnimeUpdateManyWithWhereWithoutAnimeInput | RelatedAnimeUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: RelatedAnimeScalarWhereInput | RelatedAnimeScalarWhereInput[]
  }

  export type AnimeVideoUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeVideoCreateWithoutAnimeInput, AnimeVideoUncheckedCreateWithoutAnimeInput> | AnimeVideoCreateWithoutAnimeInput[] | AnimeVideoUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutAnimeInput | AnimeVideoCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeVideoUpsertWithWhereUniqueWithoutAnimeInput | AnimeVideoUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeVideoCreateManyAnimeInputEnvelope
    set?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    disconnect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    delete?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    update?: AnimeVideoUpdateWithWhereUniqueWithoutAnimeInput | AnimeVideoUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeVideoUpdateManyWithWhereWithoutAnimeInput | AnimeVideoUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeVideoScalarWhereInput | AnimeVideoScalarWhereInput[]
  }

  export type AnimeScreenshotUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeScreenshotCreateWithoutAnimeInput, AnimeScreenshotUncheckedCreateWithoutAnimeInput> | AnimeScreenshotCreateWithoutAnimeInput[] | AnimeScreenshotUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutAnimeInput | AnimeScreenshotCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeScreenshotUpsertWithWhereUniqueWithoutAnimeInput | AnimeScreenshotUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeScreenshotCreateManyAnimeInputEnvelope
    set?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    disconnect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    delete?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    update?: AnimeScreenshotUpdateWithWhereUniqueWithoutAnimeInput | AnimeScreenshotUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeScreenshotUpdateManyWithWhereWithoutAnimeInput | AnimeScreenshotUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeScreenshotScalarWhereInput | AnimeScreenshotScalarWhereInput[]
  }

  export type AnimeGenreUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeGenreCreateWithoutAnimeInput, AnimeGenreUncheckedCreateWithoutAnimeInput> | AnimeGenreCreateWithoutAnimeInput[] | AnimeGenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutAnimeInput | AnimeGenreCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeGenreUpsertWithWhereUniqueWithoutAnimeInput | AnimeGenreUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeGenreCreateManyAnimeInputEnvelope
    set?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    disconnect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    delete?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    update?: AnimeGenreUpdateWithWhereUniqueWithoutAnimeInput | AnimeGenreUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeGenreUpdateManyWithWhereWithoutAnimeInput | AnimeGenreUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeGenreScalarWhereInput | AnimeGenreScalarWhereInput[]
  }

  export type AnimeThemeUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeThemeCreateWithoutAnimeInput, AnimeThemeUncheckedCreateWithoutAnimeInput> | AnimeThemeCreateWithoutAnimeInput[] | AnimeThemeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutAnimeInput | AnimeThemeCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeThemeUpsertWithWhereUniqueWithoutAnimeInput | AnimeThemeUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeThemeCreateManyAnimeInputEnvelope
    set?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    disconnect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    delete?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    update?: AnimeThemeUpdateWithWhereUniqueWithoutAnimeInput | AnimeThemeUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeThemeUpdateManyWithWhereWithoutAnimeInput | AnimeThemeUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeThemeScalarWhereInput | AnimeThemeScalarWhereInput[]
  }

  export type AnimeDemographicUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeDemographicCreateWithoutAnimeInput, AnimeDemographicUncheckedCreateWithoutAnimeInput> | AnimeDemographicCreateWithoutAnimeInput[] | AnimeDemographicUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutAnimeInput | AnimeDemographicCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeDemographicUpsertWithWhereUniqueWithoutAnimeInput | AnimeDemographicUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeDemographicCreateManyAnimeInputEnvelope
    set?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    disconnect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    delete?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    update?: AnimeDemographicUpdateWithWhereUniqueWithoutAnimeInput | AnimeDemographicUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeDemographicUpdateManyWithWhereWithoutAnimeInput | AnimeDemographicUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeDemographicScalarWhereInput | AnimeDemographicScalarWhereInput[]
  }

  export type RelatedAnimeUpdateManyWithoutRelatedNestedInput = {
    create?: XOR<RelatedAnimeCreateWithoutRelatedInput, RelatedAnimeUncheckedCreateWithoutRelatedInput> | RelatedAnimeCreateWithoutRelatedInput[] | RelatedAnimeUncheckedCreateWithoutRelatedInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutRelatedInput | RelatedAnimeCreateOrConnectWithoutRelatedInput[]
    upsert?: RelatedAnimeUpsertWithWhereUniqueWithoutRelatedInput | RelatedAnimeUpsertWithWhereUniqueWithoutRelatedInput[]
    createMany?: RelatedAnimeCreateManyRelatedInputEnvelope
    set?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    disconnect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    delete?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    update?: RelatedAnimeUpdateWithWhereUniqueWithoutRelatedInput | RelatedAnimeUpdateWithWhereUniqueWithoutRelatedInput[]
    updateMany?: RelatedAnimeUpdateManyWithWhereWithoutRelatedInput | RelatedAnimeUpdateManyWithWhereWithoutRelatedInput[]
    deleteMany?: RelatedAnimeScalarWhereInput | RelatedAnimeScalarWhereInput[]
  }

  export type AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutAnimeInput, AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput> | AnimeEpisodeProgressCreateWithoutAnimeInput[] | AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput | AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeEpisodeProgressUpsertWithWhereUniqueWithoutAnimeInput | AnimeEpisodeProgressUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeEpisodeProgressCreateManyAnimeInputEnvelope
    set?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    disconnect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    delete?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    update?: AnimeEpisodeProgressUpdateWithWhereUniqueWithoutAnimeInput | AnimeEpisodeProgressUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeEpisodeProgressUpdateManyWithWhereWithoutAnimeInput | AnimeEpisodeProgressUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeEpisodeProgressScalarWhereInput | AnimeEpisodeProgressScalarWhereInput[]
  }

  export type AnimeInCollectionUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeInCollectionCreateWithoutAnimeInput, AnimeInCollectionUncheckedCreateWithoutAnimeInput> | AnimeInCollectionCreateWithoutAnimeInput[] | AnimeInCollectionUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutAnimeInput | AnimeInCollectionCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeInCollectionUpsertWithWhereUniqueWithoutAnimeInput | AnimeInCollectionUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeInCollectionCreateManyAnimeInputEnvelope
    set?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    disconnect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    delete?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    update?: AnimeInCollectionUpdateWithWhereUniqueWithoutAnimeInput | AnimeInCollectionUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeInCollectionUpdateManyWithWhereWithoutAnimeInput | AnimeInCollectionUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeInCollectionScalarWhereInput | AnimeInCollectionScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<CommentCreateWithoutAnimeInput, CommentUncheckedCreateWithoutAnimeInput> | CommentCreateWithoutAnimeInput[] | CommentUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAnimeInput | CommentCreateOrConnectWithoutAnimeInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAnimeInput | CommentUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: CommentCreateManyAnimeInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAnimeInput | CommentUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAnimeInput | CommentUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<ReviewCreateWithoutAnimeInput, ReviewUncheckedCreateWithoutAnimeInput> | ReviewCreateWithoutAnimeInput[] | ReviewUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAnimeInput | ReviewCreateOrConnectWithoutAnimeInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAnimeInput | ReviewUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: ReviewCreateManyAnimeInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAnimeInput | ReviewUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAnimeInput | ReviewUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimePosterCreateWithoutAnimeInput, AnimePosterUncheckedCreateWithoutAnimeInput> | AnimePosterCreateWithoutAnimeInput[] | AnimePosterUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimePosterCreateOrConnectWithoutAnimeInput | AnimePosterCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimePosterUpsertWithWhereUniqueWithoutAnimeInput | AnimePosterUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimePosterCreateManyAnimeInputEnvelope
    set?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    disconnect?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    delete?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    connect?: AnimePosterWhereUniqueInput | AnimePosterWhereUniqueInput[]
    update?: AnimePosterUpdateWithWhereUniqueWithoutAnimeInput | AnimePosterUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimePosterUpdateManyWithWhereWithoutAnimeInput | AnimePosterUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimePosterScalarWhereInput | AnimePosterScalarWhereInput[]
  }

  export type AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeStudioCreateWithoutAnimeInput, AnimeStudioUncheckedCreateWithoutAnimeInput> | AnimeStudioCreateWithoutAnimeInput[] | AnimeStudioUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeStudioCreateOrConnectWithoutAnimeInput | AnimeStudioCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeStudioUpsertWithWhereUniqueWithoutAnimeInput | AnimeStudioUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeStudioCreateManyAnimeInputEnvelope
    set?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    disconnect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    delete?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    connect?: AnimeStudioWhereUniqueInput | AnimeStudioWhereUniqueInput[]
    update?: AnimeStudioUpdateWithWhereUniqueWithoutAnimeInput | AnimeStudioUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeStudioUpdateManyWithWhereWithoutAnimeInput | AnimeStudioUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeStudioScalarWhereInput | AnimeStudioScalarWhereInput[]
  }

  export type RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<RelatedAnimeCreateWithoutAnimeInput, RelatedAnimeUncheckedCreateWithoutAnimeInput> | RelatedAnimeCreateWithoutAnimeInput[] | RelatedAnimeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutAnimeInput | RelatedAnimeCreateOrConnectWithoutAnimeInput[]
    upsert?: RelatedAnimeUpsertWithWhereUniqueWithoutAnimeInput | RelatedAnimeUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: RelatedAnimeCreateManyAnimeInputEnvelope
    set?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    disconnect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    delete?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    update?: RelatedAnimeUpdateWithWhereUniqueWithoutAnimeInput | RelatedAnimeUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: RelatedAnimeUpdateManyWithWhereWithoutAnimeInput | RelatedAnimeUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: RelatedAnimeScalarWhereInput | RelatedAnimeScalarWhereInput[]
  }

  export type AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeVideoCreateWithoutAnimeInput, AnimeVideoUncheckedCreateWithoutAnimeInput> | AnimeVideoCreateWithoutAnimeInput[] | AnimeVideoUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeVideoCreateOrConnectWithoutAnimeInput | AnimeVideoCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeVideoUpsertWithWhereUniqueWithoutAnimeInput | AnimeVideoUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeVideoCreateManyAnimeInputEnvelope
    set?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    disconnect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    delete?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    connect?: AnimeVideoWhereUniqueInput | AnimeVideoWhereUniqueInput[]
    update?: AnimeVideoUpdateWithWhereUniqueWithoutAnimeInput | AnimeVideoUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeVideoUpdateManyWithWhereWithoutAnimeInput | AnimeVideoUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeVideoScalarWhereInput | AnimeVideoScalarWhereInput[]
  }

  export type AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeScreenshotCreateWithoutAnimeInput, AnimeScreenshotUncheckedCreateWithoutAnimeInput> | AnimeScreenshotCreateWithoutAnimeInput[] | AnimeScreenshotUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeScreenshotCreateOrConnectWithoutAnimeInput | AnimeScreenshotCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeScreenshotUpsertWithWhereUniqueWithoutAnimeInput | AnimeScreenshotUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeScreenshotCreateManyAnimeInputEnvelope
    set?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    disconnect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    delete?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    connect?: AnimeScreenshotWhereUniqueInput | AnimeScreenshotWhereUniqueInput[]
    update?: AnimeScreenshotUpdateWithWhereUniqueWithoutAnimeInput | AnimeScreenshotUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeScreenshotUpdateManyWithWhereWithoutAnimeInput | AnimeScreenshotUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeScreenshotScalarWhereInput | AnimeScreenshotScalarWhereInput[]
  }

  export type AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeGenreCreateWithoutAnimeInput, AnimeGenreUncheckedCreateWithoutAnimeInput> | AnimeGenreCreateWithoutAnimeInput[] | AnimeGenreUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeGenreCreateOrConnectWithoutAnimeInput | AnimeGenreCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeGenreUpsertWithWhereUniqueWithoutAnimeInput | AnimeGenreUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeGenreCreateManyAnimeInputEnvelope
    set?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    disconnect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    delete?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    connect?: AnimeGenreWhereUniqueInput | AnimeGenreWhereUniqueInput[]
    update?: AnimeGenreUpdateWithWhereUniqueWithoutAnimeInput | AnimeGenreUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeGenreUpdateManyWithWhereWithoutAnimeInput | AnimeGenreUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeGenreScalarWhereInput | AnimeGenreScalarWhereInput[]
  }

  export type AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeThemeCreateWithoutAnimeInput, AnimeThemeUncheckedCreateWithoutAnimeInput> | AnimeThemeCreateWithoutAnimeInput[] | AnimeThemeUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeThemeCreateOrConnectWithoutAnimeInput | AnimeThemeCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeThemeUpsertWithWhereUniqueWithoutAnimeInput | AnimeThemeUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeThemeCreateManyAnimeInputEnvelope
    set?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    disconnect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    delete?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    connect?: AnimeThemeWhereUniqueInput | AnimeThemeWhereUniqueInput[]
    update?: AnimeThemeUpdateWithWhereUniqueWithoutAnimeInput | AnimeThemeUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeThemeUpdateManyWithWhereWithoutAnimeInput | AnimeThemeUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeThemeScalarWhereInput | AnimeThemeScalarWhereInput[]
  }

  export type AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeDemographicCreateWithoutAnimeInput, AnimeDemographicUncheckedCreateWithoutAnimeInput> | AnimeDemographicCreateWithoutAnimeInput[] | AnimeDemographicUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeDemographicCreateOrConnectWithoutAnimeInput | AnimeDemographicCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeDemographicUpsertWithWhereUniqueWithoutAnimeInput | AnimeDemographicUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeDemographicCreateManyAnimeInputEnvelope
    set?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    disconnect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    delete?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    connect?: AnimeDemographicWhereUniqueInput | AnimeDemographicWhereUniqueInput[]
    update?: AnimeDemographicUpdateWithWhereUniqueWithoutAnimeInput | AnimeDemographicUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeDemographicUpdateManyWithWhereWithoutAnimeInput | AnimeDemographicUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeDemographicScalarWhereInput | AnimeDemographicScalarWhereInput[]
  }

  export type RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput = {
    create?: XOR<RelatedAnimeCreateWithoutRelatedInput, RelatedAnimeUncheckedCreateWithoutRelatedInput> | RelatedAnimeCreateWithoutRelatedInput[] | RelatedAnimeUncheckedCreateWithoutRelatedInput[]
    connectOrCreate?: RelatedAnimeCreateOrConnectWithoutRelatedInput | RelatedAnimeCreateOrConnectWithoutRelatedInput[]
    upsert?: RelatedAnimeUpsertWithWhereUniqueWithoutRelatedInput | RelatedAnimeUpsertWithWhereUniqueWithoutRelatedInput[]
    createMany?: RelatedAnimeCreateManyRelatedInputEnvelope
    set?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    disconnect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    delete?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    connect?: RelatedAnimeWhereUniqueInput | RelatedAnimeWhereUniqueInput[]
    update?: RelatedAnimeUpdateWithWhereUniqueWithoutRelatedInput | RelatedAnimeUpdateWithWhereUniqueWithoutRelatedInput[]
    updateMany?: RelatedAnimeUpdateManyWithWhereWithoutRelatedInput | RelatedAnimeUpdateManyWithWhereWithoutRelatedInput[]
    deleteMany?: RelatedAnimeScalarWhereInput | RelatedAnimeScalarWhereInput[]
  }

  export type AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutAnimeInput, AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput> | AnimeEpisodeProgressCreateWithoutAnimeInput[] | AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput | AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeEpisodeProgressUpsertWithWhereUniqueWithoutAnimeInput | AnimeEpisodeProgressUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeEpisodeProgressCreateManyAnimeInputEnvelope
    set?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    disconnect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    delete?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    update?: AnimeEpisodeProgressUpdateWithWhereUniqueWithoutAnimeInput | AnimeEpisodeProgressUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeEpisodeProgressUpdateManyWithWhereWithoutAnimeInput | AnimeEpisodeProgressUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeEpisodeProgressScalarWhereInput | AnimeEpisodeProgressScalarWhereInput[]
  }

  export type AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<AnimeInCollectionCreateWithoutAnimeInput, AnimeInCollectionUncheckedCreateWithoutAnimeInput> | AnimeInCollectionCreateWithoutAnimeInput[] | AnimeInCollectionUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutAnimeInput | AnimeInCollectionCreateOrConnectWithoutAnimeInput[]
    upsert?: AnimeInCollectionUpsertWithWhereUniqueWithoutAnimeInput | AnimeInCollectionUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: AnimeInCollectionCreateManyAnimeInputEnvelope
    set?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    disconnect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    delete?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    update?: AnimeInCollectionUpdateWithWhereUniqueWithoutAnimeInput | AnimeInCollectionUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: AnimeInCollectionUpdateManyWithWhereWithoutAnimeInput | AnimeInCollectionUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: AnimeInCollectionScalarWhereInput | AnimeInCollectionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<CommentCreateWithoutAnimeInput, CommentUncheckedCreateWithoutAnimeInput> | CommentCreateWithoutAnimeInput[] | CommentUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAnimeInput | CommentCreateOrConnectWithoutAnimeInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAnimeInput | CommentUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: CommentCreateManyAnimeInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAnimeInput | CommentUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAnimeInput | CommentUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<ReviewCreateWithoutAnimeInput, ReviewUncheckedCreateWithoutAnimeInput> | ReviewCreateWithoutAnimeInput[] | ReviewUncheckedCreateWithoutAnimeInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAnimeInput | ReviewCreateOrConnectWithoutAnimeInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAnimeInput | ReviewUpsertWithWhereUniqueWithoutAnimeInput[]
    createMany?: ReviewCreateManyAnimeInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAnimeInput | ReviewUpdateWithWhereUniqueWithoutAnimeInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAnimeInput | ReviewUpdateManyWithWhereWithoutAnimeInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type EnumTokenTypeFieldUpdateOperationsInput = {
    set?: $Enums.TokenType
  }

  export type EnumParsingSessionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ParsingSessionType
  }

  export type UserCreateNestedOneWithoutAnimeCollectionInput = {
    create?: XOR<UserCreateWithoutAnimeCollectionInput, UserUncheckedCreateWithoutAnimeCollectionInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeCollectionInput
    connect?: UserWhereUniqueInput
  }

  export type AnimeInCollectionCreateNestedManyWithoutCollectionInput = {
    create?: XOR<AnimeInCollectionCreateWithoutCollectionInput, AnimeInCollectionUncheckedCreateWithoutCollectionInput> | AnimeInCollectionCreateWithoutCollectionInput[] | AnimeInCollectionUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutCollectionInput | AnimeInCollectionCreateOrConnectWithoutCollectionInput[]
    createMany?: AnimeInCollectionCreateManyCollectionInputEnvelope
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
  }

  export type AnimeCollectionLikeCreateNestedManyWithoutCollectionInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutCollectionInput, AnimeCollectionLikeUncheckedCreateWithoutCollectionInput> | AnimeCollectionLikeCreateWithoutCollectionInput[] | AnimeCollectionLikeUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutCollectionInput | AnimeCollectionLikeCreateOrConnectWithoutCollectionInput[]
    createMany?: AnimeCollectionLikeCreateManyCollectionInputEnvelope
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
  }

  export type AnimeInCollectionUncheckedCreateNestedManyWithoutCollectionInput = {
    create?: XOR<AnimeInCollectionCreateWithoutCollectionInput, AnimeInCollectionUncheckedCreateWithoutCollectionInput> | AnimeInCollectionCreateWithoutCollectionInput[] | AnimeInCollectionUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutCollectionInput | AnimeInCollectionCreateOrConnectWithoutCollectionInput[]
    createMany?: AnimeInCollectionCreateManyCollectionInputEnvelope
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
  }

  export type AnimeCollectionLikeUncheckedCreateNestedManyWithoutCollectionInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutCollectionInput, AnimeCollectionLikeUncheckedCreateWithoutCollectionInput> | AnimeCollectionLikeCreateWithoutCollectionInput[] | AnimeCollectionLikeUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutCollectionInput | AnimeCollectionLikeCreateOrConnectWithoutCollectionInput[]
    createMany?: AnimeCollectionLikeCreateManyCollectionInputEnvelope
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumAnimeCollectionTypeFieldUpdateOperationsInput = {
    set?: $Enums.AnimeCollectionType
  }

  export type UserUpdateOneRequiredWithoutAnimeCollectionNestedInput = {
    create?: XOR<UserCreateWithoutAnimeCollectionInput, UserUncheckedCreateWithoutAnimeCollectionInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeCollectionInput
    upsert?: UserUpsertWithoutAnimeCollectionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnimeCollectionInput, UserUpdateWithoutAnimeCollectionInput>, UserUncheckedUpdateWithoutAnimeCollectionInput>
  }

  export type AnimeInCollectionUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<AnimeInCollectionCreateWithoutCollectionInput, AnimeInCollectionUncheckedCreateWithoutCollectionInput> | AnimeInCollectionCreateWithoutCollectionInput[] | AnimeInCollectionUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutCollectionInput | AnimeInCollectionCreateOrConnectWithoutCollectionInput[]
    upsert?: AnimeInCollectionUpsertWithWhereUniqueWithoutCollectionInput | AnimeInCollectionUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: AnimeInCollectionCreateManyCollectionInputEnvelope
    set?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    disconnect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    delete?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    update?: AnimeInCollectionUpdateWithWhereUniqueWithoutCollectionInput | AnimeInCollectionUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: AnimeInCollectionUpdateManyWithWhereWithoutCollectionInput | AnimeInCollectionUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: AnimeInCollectionScalarWhereInput | AnimeInCollectionScalarWhereInput[]
  }

  export type AnimeCollectionLikeUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutCollectionInput, AnimeCollectionLikeUncheckedCreateWithoutCollectionInput> | AnimeCollectionLikeCreateWithoutCollectionInput[] | AnimeCollectionLikeUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutCollectionInput | AnimeCollectionLikeCreateOrConnectWithoutCollectionInput[]
    upsert?: AnimeCollectionLikeUpsertWithWhereUniqueWithoutCollectionInput | AnimeCollectionLikeUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: AnimeCollectionLikeCreateManyCollectionInputEnvelope
    set?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    disconnect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    delete?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    update?: AnimeCollectionLikeUpdateWithWhereUniqueWithoutCollectionInput | AnimeCollectionLikeUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: AnimeCollectionLikeUpdateManyWithWhereWithoutCollectionInput | AnimeCollectionLikeUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: AnimeCollectionLikeScalarWhereInput | AnimeCollectionLikeScalarWhereInput[]
  }

  export type AnimeInCollectionUncheckedUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<AnimeInCollectionCreateWithoutCollectionInput, AnimeInCollectionUncheckedCreateWithoutCollectionInput> | AnimeInCollectionCreateWithoutCollectionInput[] | AnimeInCollectionUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeInCollectionCreateOrConnectWithoutCollectionInput | AnimeInCollectionCreateOrConnectWithoutCollectionInput[]
    upsert?: AnimeInCollectionUpsertWithWhereUniqueWithoutCollectionInput | AnimeInCollectionUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: AnimeInCollectionCreateManyCollectionInputEnvelope
    set?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    disconnect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    delete?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    connect?: AnimeInCollectionWhereUniqueInput | AnimeInCollectionWhereUniqueInput[]
    update?: AnimeInCollectionUpdateWithWhereUniqueWithoutCollectionInput | AnimeInCollectionUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: AnimeInCollectionUpdateManyWithWhereWithoutCollectionInput | AnimeInCollectionUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: AnimeInCollectionScalarWhereInput | AnimeInCollectionScalarWhereInput[]
  }

  export type AnimeCollectionLikeUncheckedUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutCollectionInput, AnimeCollectionLikeUncheckedCreateWithoutCollectionInput> | AnimeCollectionLikeCreateWithoutCollectionInput[] | AnimeCollectionLikeUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutCollectionInput | AnimeCollectionLikeCreateOrConnectWithoutCollectionInput[]
    upsert?: AnimeCollectionLikeUpsertWithWhereUniqueWithoutCollectionInput | AnimeCollectionLikeUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: AnimeCollectionLikeCreateManyCollectionInputEnvelope
    set?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    disconnect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    delete?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    update?: AnimeCollectionLikeUpdateWithWhereUniqueWithoutCollectionInput | AnimeCollectionLikeUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: AnimeCollectionLikeUpdateManyWithWhereWithoutCollectionInput | AnimeCollectionLikeUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: AnimeCollectionLikeScalarWhereInput | AnimeCollectionLikeScalarWhereInput[]
  }

  export type AnimeCreateNestedOneWithoutAnimeInCollectionInput = {
    create?: XOR<AnimeCreateWithoutAnimeInCollectionInput, AnimeUncheckedCreateWithoutAnimeInCollectionInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutAnimeInCollectionInput
    connect?: AnimeWhereUniqueInput
  }

  export type AnimeCollectionCreateNestedOneWithoutItemsInput = {
    create?: XOR<AnimeCollectionCreateWithoutItemsInput, AnimeCollectionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutItemsInput
    connect?: AnimeCollectionWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutAnimeInCollectionNestedInput = {
    create?: XOR<AnimeCreateWithoutAnimeInCollectionInput, AnimeUncheckedCreateWithoutAnimeInCollectionInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutAnimeInCollectionInput
    upsert?: AnimeUpsertWithoutAnimeInCollectionInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutAnimeInCollectionInput, AnimeUpdateWithoutAnimeInCollectionInput>, AnimeUncheckedUpdateWithoutAnimeInCollectionInput>
  }

  export type AnimeCollectionUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<AnimeCollectionCreateWithoutItemsInput, AnimeCollectionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutItemsInput
    upsert?: AnimeCollectionUpsertWithoutItemsInput
    connect?: AnimeCollectionWhereUniqueInput
    update?: XOR<XOR<AnimeCollectionUpdateToOneWithWhereWithoutItemsInput, AnimeCollectionUpdateWithoutItemsInput>, AnimeCollectionUncheckedUpdateWithoutItemsInput>
  }

  export type UserCreateNestedOneWithoutLikedCollectionInput = {
    create?: XOR<UserCreateWithoutLikedCollectionInput, UserUncheckedCreateWithoutLikedCollectionInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikedCollectionInput
    connect?: UserWhereUniqueInput
  }

  export type AnimeCollectionCreateNestedOneWithoutLikesInput = {
    create?: XOR<AnimeCollectionCreateWithoutLikesInput, AnimeCollectionUncheckedCreateWithoutLikesInput>
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutLikesInput
    connect?: AnimeCollectionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikedCollectionNestedInput = {
    create?: XOR<UserCreateWithoutLikedCollectionInput, UserUncheckedCreateWithoutLikedCollectionInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikedCollectionInput
    upsert?: UserUpsertWithoutLikedCollectionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikedCollectionInput, UserUpdateWithoutLikedCollectionInput>, UserUncheckedUpdateWithoutLikedCollectionInput>
  }

  export type AnimeCollectionUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<AnimeCollectionCreateWithoutLikesInput, AnimeCollectionUncheckedCreateWithoutLikesInput>
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutLikesInput
    upsert?: AnimeCollectionUpsertWithoutLikesInput
    connect?: AnimeCollectionWhereUniqueInput
    update?: XOR<XOR<AnimeCollectionUpdateToOneWithWhereWithoutLikesInput, AnimeCollectionUpdateWithoutLikesInput>, AnimeCollectionUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutAnimeCommentsInput = {
    create?: XOR<UserCreateWithoutAnimeCommentsInput, UserUncheckedCreateWithoutAnimeCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutCommentsInput = {
    create?: XOR<AnimeCreateWithoutCommentsInput, AnimeUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutCommentsInput
    connect?: AnimeWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    connect?: CommentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentLikeCreateNestedManyWithoutCommentInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentLikeUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAnimeCommentsNestedInput = {
    create?: XOR<UserCreateWithoutAnimeCommentsInput, UserUncheckedCreateWithoutAnimeCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeCommentsInput
    upsert?: UserUpsertWithoutAnimeCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnimeCommentsInput, UserUpdateWithoutAnimeCommentsInput>, UserUncheckedUpdateWithoutAnimeCommentsInput>
  }

  export type AnimeUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<AnimeCreateWithoutCommentsInput, AnimeUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutCommentsInput
    upsert?: AnimeUpsertWithoutCommentsInput
    disconnect?: AnimeWhereInput | boolean
    delete?: AnimeWhereInput | boolean
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutCommentsInput, AnimeUpdateWithoutCommentsInput>, AnimeUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    upsert?: CommentUpsertWithoutRepliesInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutRepliesInput, CommentUpdateWithoutRepliesInput>, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentLikeUpdateManyWithoutCommentNestedInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutCommentInput | CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutCommentInput | CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutCommentInput | CommentLikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentLikeUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutCommentInput | CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutCommentInput | CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutCommentInput | CommentLikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAnimeCommentLikesInput = {
    create?: XOR<UserCreateWithoutAnimeCommentLikesInput, UserUncheckedCreateWithoutAnimeCommentLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeCommentLikesInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutCommentLikeInput = {
    create?: XOR<CommentCreateWithoutCommentLikeInput, CommentUncheckedCreateWithoutCommentLikeInput>
    connectOrCreate?: CommentCreateOrConnectWithoutCommentLikeInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAnimeCommentLikesNestedInput = {
    create?: XOR<UserCreateWithoutAnimeCommentLikesInput, UserUncheckedCreateWithoutAnimeCommentLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeCommentLikesInput
    upsert?: UserUpsertWithoutAnimeCommentLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnimeCommentLikesInput, UserUpdateWithoutAnimeCommentLikesInput>, UserUncheckedUpdateWithoutAnimeCommentLikesInput>
  }

  export type CommentUpdateOneRequiredWithoutCommentLikeNestedInput = {
    create?: XOR<CommentCreateWithoutCommentLikeInput, CommentUncheckedCreateWithoutCommentLikeInput>
    connectOrCreate?: CommentCreateOrConnectWithoutCommentLikeInput
    upsert?: CommentUpsertWithoutCommentLikeInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutCommentLikeInput, CommentUpdateWithoutCommentLikeInput>, CommentUncheckedUpdateWithoutCommentLikeInput>
  }

  export type AnimeCreateNestedOneWithoutUserProgressInput = {
    create?: XOR<AnimeCreateWithoutUserProgressInput, AnimeUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutUserProgressInput
    connect?: AnimeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAnimeProgressInput = {
    create?: XOR<UserCreateWithoutAnimeProgressInput, UserUncheckedCreateWithoutAnimeProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeProgressInput
    connect?: UserWhereUniqueInput
  }

  export type AnimeUpdateOneRequiredWithoutUserProgressNestedInput = {
    create?: XOR<AnimeCreateWithoutUserProgressInput, AnimeUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutUserProgressInput
    upsert?: AnimeUpsertWithoutUserProgressInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutUserProgressInput, AnimeUpdateWithoutUserProgressInput>, AnimeUncheckedUpdateWithoutUserProgressInput>
  }

  export type UserUpdateOneRequiredWithoutAnimeProgressNestedInput = {
    create?: XOR<UserCreateWithoutAnimeProgressInput, UserUncheckedCreateWithoutAnimeProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeProgressInput
    upsert?: UserUpsertWithoutAnimeProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnimeProgressInput, UserUpdateWithoutAnimeProgressInput>, UserUncheckedUpdateWithoutAnimeProgressInput>
  }

  export type UserCreateNestedOneWithoutAnimeReviewsInput = {
    create?: XOR<UserCreateWithoutAnimeReviewsInput, UserUncheckedCreateWithoutAnimeReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutReviewsInput = {
    create?: XOR<AnimeCreateWithoutReviewsInput, AnimeUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutReviewsInput
    connect?: AnimeWhereUniqueInput
  }

  export type ReviewLikeCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type ReviewLikeUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAnimeReviewsNestedInput = {
    create?: XOR<UserCreateWithoutAnimeReviewsInput, UserUncheckedCreateWithoutAnimeReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnimeReviewsInput
    upsert?: UserUpsertWithoutAnimeReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnimeReviewsInput, UserUpdateWithoutAnimeReviewsInput>, UserUncheckedUpdateWithoutAnimeReviewsInput>
  }

  export type AnimeUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<AnimeCreateWithoutReviewsInput, AnimeUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutReviewsInput
    upsert?: AnimeUpsertWithoutReviewsInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<XOR<AnimeUpdateToOneWithWhereWithoutReviewsInput, AnimeUpdateWithoutReviewsInput>, AnimeUncheckedUpdateWithoutReviewsInput>
  }

  export type ReviewLikeUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutReviewInput | ReviewLikeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutReviewInput | ReviewLikeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutReviewInput | ReviewLikeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutReviewInput | ReviewLikeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutReviewInput | ReviewLikeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutReviewInput | ReviewLikeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReviewLikesInput = {
    create?: XOR<UserCreateWithoutReviewLikesInput, UserUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewLikesInput
    connect?: UserWhereUniqueInput
  }

  export type ReviewCreateNestedOneWithoutReviewLikesInput = {
    create?: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewLikesInput
    connect?: ReviewWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewLikesNestedInput = {
    create?: XOR<UserCreateWithoutReviewLikesInput, UserUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewLikesInput
    upsert?: UserUpsertWithoutReviewLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewLikesInput, UserUpdateWithoutReviewLikesInput>, UserUncheckedUpdateWithoutReviewLikesInput>
  }

  export type ReviewUpdateOneRequiredWithoutReviewLikesNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewLikesInput
    upsert?: ReviewUpsertWithoutReviewLikesInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewLikesInput, ReviewUpdateWithoutReviewLikesInput>, ReviewUncheckedUpdateWithoutReviewLikesInput>
  }

  export type UserSettingsCreatepreferredGenresInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserSettingsUpdatepreferredGenresInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSettingsInput, UserUpdateWithoutSettingsInput>, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type AnimeEpisodeProgressCreateNestedManyWithoutUserInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutUserInput, AnimeEpisodeProgressUncheckedCreateWithoutUserInput> | AnimeEpisodeProgressCreateWithoutUserInput[] | AnimeEpisodeProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutUserInput | AnimeEpisodeProgressCreateOrConnectWithoutUserInput[]
    createMany?: AnimeEpisodeProgressCreateManyUserInputEnvelope
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
  }

  export type AnimeCollectionCreateNestedManyWithoutUserInput = {
    create?: XOR<AnimeCollectionCreateWithoutUserInput, AnimeCollectionUncheckedCreateWithoutUserInput> | AnimeCollectionCreateWithoutUserInput[] | AnimeCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutUserInput | AnimeCollectionCreateOrConnectWithoutUserInput[]
    createMany?: AnimeCollectionCreateManyUserInputEnvelope
    connect?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
  }

  export type AnimeCollectionLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutUserInput, AnimeCollectionLikeUncheckedCreateWithoutUserInput> | AnimeCollectionLikeCreateWithoutUserInput[] | AnimeCollectionLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutUserInput | AnimeCollectionLikeCreateOrConnectWithoutUserInput[]
    createMany?: AnimeCollectionLikeCreateManyUserInputEnvelope
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
  }

  export type UserSettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewLikeCreateWithoutUserInput, ReviewLikeUncheckedCreateWithoutUserInput> | ReviewLikeCreateWithoutUserInput[] | ReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutUserInput | ReviewLikeCreateOrConnectWithoutUserInput[]
    createMany?: ReviewLikeCreateManyUserInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutUserInput, AnimeEpisodeProgressUncheckedCreateWithoutUserInput> | AnimeEpisodeProgressCreateWithoutUserInput[] | AnimeEpisodeProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutUserInput | AnimeEpisodeProgressCreateOrConnectWithoutUserInput[]
    createMany?: AnimeEpisodeProgressCreateManyUserInputEnvelope
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
  }

  export type AnimeCollectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnimeCollectionCreateWithoutUserInput, AnimeCollectionUncheckedCreateWithoutUserInput> | AnimeCollectionCreateWithoutUserInput[] | AnimeCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutUserInput | AnimeCollectionCreateOrConnectWithoutUserInput[]
    createMany?: AnimeCollectionCreateManyUserInputEnvelope
    connect?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
  }

  export type AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutUserInput, AnimeCollectionLikeUncheckedCreateWithoutUserInput> | AnimeCollectionLikeCreateWithoutUserInput[] | AnimeCollectionLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutUserInput | AnimeCollectionLikeCreateOrConnectWithoutUserInput[]
    createMany?: AnimeCollectionLikeCreateManyUserInputEnvelope
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
  }

  export type UserSettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewLikeCreateWithoutUserInput, ReviewLikeUncheckedCreateWithoutUserInput> | ReviewLikeCreateWithoutUserInput[] | ReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutUserInput | ReviewLikeCreateOrConnectWithoutUserInput[]
    createMany?: ReviewLikeCreateManyUserInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumAuthMethodFieldUpdateOperationsInput = {
    set?: $Enums.AuthMethod
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type AnimeEpisodeProgressUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutUserInput, AnimeEpisodeProgressUncheckedCreateWithoutUserInput> | AnimeEpisodeProgressCreateWithoutUserInput[] | AnimeEpisodeProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutUserInput | AnimeEpisodeProgressCreateOrConnectWithoutUserInput[]
    upsert?: AnimeEpisodeProgressUpsertWithWhereUniqueWithoutUserInput | AnimeEpisodeProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnimeEpisodeProgressCreateManyUserInputEnvelope
    set?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    disconnect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    delete?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    update?: AnimeEpisodeProgressUpdateWithWhereUniqueWithoutUserInput | AnimeEpisodeProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnimeEpisodeProgressUpdateManyWithWhereWithoutUserInput | AnimeEpisodeProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnimeEpisodeProgressScalarWhereInput | AnimeEpisodeProgressScalarWhereInput[]
  }

  export type AnimeCollectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnimeCollectionCreateWithoutUserInput, AnimeCollectionUncheckedCreateWithoutUserInput> | AnimeCollectionCreateWithoutUserInput[] | AnimeCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutUserInput | AnimeCollectionCreateOrConnectWithoutUserInput[]
    upsert?: AnimeCollectionUpsertWithWhereUniqueWithoutUserInput | AnimeCollectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnimeCollectionCreateManyUserInputEnvelope
    set?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    disconnect?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    delete?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    connect?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    update?: AnimeCollectionUpdateWithWhereUniqueWithoutUserInput | AnimeCollectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnimeCollectionUpdateManyWithWhereWithoutUserInput | AnimeCollectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnimeCollectionScalarWhereInput | AnimeCollectionScalarWhereInput[]
  }

  export type AnimeCollectionLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutUserInput, AnimeCollectionLikeUncheckedCreateWithoutUserInput> | AnimeCollectionLikeCreateWithoutUserInput[] | AnimeCollectionLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutUserInput | AnimeCollectionLikeCreateOrConnectWithoutUserInput[]
    upsert?: AnimeCollectionLikeUpsertWithWhereUniqueWithoutUserInput | AnimeCollectionLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnimeCollectionLikeCreateManyUserInputEnvelope
    set?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    disconnect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    delete?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    update?: AnimeCollectionLikeUpdateWithWhereUniqueWithoutUserInput | AnimeCollectionLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnimeCollectionLikeUpdateManyWithWhereWithoutUserInput | AnimeCollectionLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnimeCollectionLikeScalarWhereInput | AnimeCollectionLikeScalarWhereInput[]
  }

  export type UserSettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutUserInput | CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutUserInput | CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutUserInput | CommentLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutUserInput, ReviewLikeUncheckedCreateWithoutUserInput> | ReviewLikeCreateWithoutUserInput[] | ReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutUserInput | ReviewLikeCreateOrConnectWithoutUserInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutUserInput | ReviewLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewLikeCreateManyUserInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutUserInput | ReviewLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutUserInput | ReviewLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnimeEpisodeProgressCreateWithoutUserInput, AnimeEpisodeProgressUncheckedCreateWithoutUserInput> | AnimeEpisodeProgressCreateWithoutUserInput[] | AnimeEpisodeProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeEpisodeProgressCreateOrConnectWithoutUserInput | AnimeEpisodeProgressCreateOrConnectWithoutUserInput[]
    upsert?: AnimeEpisodeProgressUpsertWithWhereUniqueWithoutUserInput | AnimeEpisodeProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnimeEpisodeProgressCreateManyUserInputEnvelope
    set?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    disconnect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    delete?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    connect?: AnimeEpisodeProgressWhereUniqueInput | AnimeEpisodeProgressWhereUniqueInput[]
    update?: AnimeEpisodeProgressUpdateWithWhereUniqueWithoutUserInput | AnimeEpisodeProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnimeEpisodeProgressUpdateManyWithWhereWithoutUserInput | AnimeEpisodeProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnimeEpisodeProgressScalarWhereInput | AnimeEpisodeProgressScalarWhereInput[]
  }

  export type AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnimeCollectionCreateWithoutUserInput, AnimeCollectionUncheckedCreateWithoutUserInput> | AnimeCollectionCreateWithoutUserInput[] | AnimeCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionCreateOrConnectWithoutUserInput | AnimeCollectionCreateOrConnectWithoutUserInput[]
    upsert?: AnimeCollectionUpsertWithWhereUniqueWithoutUserInput | AnimeCollectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnimeCollectionCreateManyUserInputEnvelope
    set?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    disconnect?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    delete?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    connect?: AnimeCollectionWhereUniqueInput | AnimeCollectionWhereUniqueInput[]
    update?: AnimeCollectionUpdateWithWhereUniqueWithoutUserInput | AnimeCollectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnimeCollectionUpdateManyWithWhereWithoutUserInput | AnimeCollectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnimeCollectionScalarWhereInput | AnimeCollectionScalarWhereInput[]
  }

  export type AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnimeCollectionLikeCreateWithoutUserInput, AnimeCollectionLikeUncheckedCreateWithoutUserInput> | AnimeCollectionLikeCreateWithoutUserInput[] | AnimeCollectionLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnimeCollectionLikeCreateOrConnectWithoutUserInput | AnimeCollectionLikeCreateOrConnectWithoutUserInput[]
    upsert?: AnimeCollectionLikeUpsertWithWhereUniqueWithoutUserInput | AnimeCollectionLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnimeCollectionLikeCreateManyUserInputEnvelope
    set?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    disconnect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    delete?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    connect?: AnimeCollectionLikeWhereUniqueInput | AnimeCollectionLikeWhereUniqueInput[]
    update?: AnimeCollectionLikeUpdateWithWhereUniqueWithoutUserInput | AnimeCollectionLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnimeCollectionLikeUpdateManyWithWhereWithoutUserInput | AnimeCollectionLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnimeCollectionLikeScalarWhereInput | AnimeCollectionLikeScalarWhereInput[]
  }

  export type UserSettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutUserInput | CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutUserInput | CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutUserInput | CommentLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutUserInput, ReviewLikeUncheckedCreateWithoutUserInput> | ReviewLikeCreateWithoutUserInput[] | ReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutUserInput | ReviewLikeCreateOrConnectWithoutUserInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutUserInput | ReviewLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewLikeCreateManyUserInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutUserInput | ReviewLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutUserInput | ReviewLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRelationKindFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationKind | EnumRelationKindFieldRefInput<$PrismaModel>
    in?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationKindFilter<$PrismaModel> | $Enums.RelationKind
  }

  export type NestedEnumRelationKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationKind | EnumRelationKindFieldRefInput<$PrismaModel>
    in?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationKind[] | ListEnumRelationKindFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationKindWithAggregatesFilter<$PrismaModel> | $Enums.RelationKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationKindFilter<$PrismaModel>
    _max?: NestedEnumRelationKindFilter<$PrismaModel>
  }

  export type NestedEnumVideoKindEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.VideoKindEnum | EnumVideoKindEnumFieldRefInput<$PrismaModel>
    in?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumVideoKindEnumFilter<$PrismaModel> | $Enums.VideoKindEnum
  }

  export type NestedEnumVideoKindEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VideoKindEnum | EnumVideoKindEnumFieldRefInput<$PrismaModel>
    in?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.VideoKindEnum[] | ListEnumVideoKindEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumVideoKindEnumWithAggregatesFilter<$PrismaModel> | $Enums.VideoKindEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVideoKindEnumFilter<$PrismaModel>
    _max?: NestedEnumVideoKindEnumFilter<$PrismaModel>
  }

  export type NestedEnumAnimeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeStatus | EnumAnimeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeStatusFilter<$PrismaModel> | $Enums.AnimeStatus
  }

  export type NestedEnumAnimeKindNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeKind | EnumAnimeKindFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeKindNullableFilter<$PrismaModel> | $Enums.AnimeKind | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumAnimeRatingNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeRating | EnumAnimeRatingFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeRatingNullableFilter<$PrismaModel> | $Enums.AnimeRating | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumAnimeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeStatus | EnumAnimeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeStatus[] | ListEnumAnimeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeStatusWithAggregatesFilter<$PrismaModel> | $Enums.AnimeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnimeStatusFilter<$PrismaModel>
    _max?: NestedEnumAnimeStatusFilter<$PrismaModel>
  }

  export type NestedEnumAnimeKindNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeKind | EnumAnimeKindFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeKind[] | ListEnumAnimeKindFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeKindNullableWithAggregatesFilter<$PrismaModel> | $Enums.AnimeKind | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAnimeKindNullableFilter<$PrismaModel>
    _max?: NestedEnumAnimeKindNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumAnimeRatingNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeRating | EnumAnimeRatingFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnimeRating[] | ListEnumAnimeRatingFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnimeRatingNullableWithAggregatesFilter<$PrismaModel> | $Enums.AnimeRating | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAnimeRatingNullableFilter<$PrismaModel>
    _max?: NestedEnumAnimeRatingNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type NestedEnumParsingSessionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ParsingSessionType | EnumParsingSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParsingSessionTypeFilter<$PrismaModel> | $Enums.ParsingSessionType
  }

  export type NestedEnumParsingSessionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParsingSessionType | EnumParsingSessionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParsingSessionType[] | ListEnumParsingSessionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParsingSessionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ParsingSessionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParsingSessionTypeFilter<$PrismaModel>
    _max?: NestedEnumParsingSessionTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAnimeCollectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeCollectionType | EnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeCollectionTypeFilter<$PrismaModel> | $Enums.AnimeCollectionType
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAnimeCollectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnimeCollectionType | EnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnimeCollectionType[] | ListEnumAnimeCollectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnimeCollectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.AnimeCollectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnimeCollectionTypeFilter<$PrismaModel>
    _max?: NestedEnumAnimeCollectionTypeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type AnimeDemographicCreateWithoutDemographicInput = {
    anime: AnimeCreateNestedOneWithoutDemographicInput
  }

  export type AnimeDemographicUncheckedCreateWithoutDemographicInput = {
    animeId: string
  }

  export type AnimeDemographicCreateOrConnectWithoutDemographicInput = {
    where: AnimeDemographicWhereUniqueInput
    create: XOR<AnimeDemographicCreateWithoutDemographicInput, AnimeDemographicUncheckedCreateWithoutDemographicInput>
  }

  export type AnimeDemographicCreateManyDemographicInputEnvelope = {
    data: AnimeDemographicCreateManyDemographicInput | AnimeDemographicCreateManyDemographicInput[]
    skipDuplicates?: boolean
  }

  export type AnimeDemographicUpsertWithWhereUniqueWithoutDemographicInput = {
    where: AnimeDemographicWhereUniqueInput
    update: XOR<AnimeDemographicUpdateWithoutDemographicInput, AnimeDemographicUncheckedUpdateWithoutDemographicInput>
    create: XOR<AnimeDemographicCreateWithoutDemographicInput, AnimeDemographicUncheckedCreateWithoutDemographicInput>
  }

  export type AnimeDemographicUpdateWithWhereUniqueWithoutDemographicInput = {
    where: AnimeDemographicWhereUniqueInput
    data: XOR<AnimeDemographicUpdateWithoutDemographicInput, AnimeDemographicUncheckedUpdateWithoutDemographicInput>
  }

  export type AnimeDemographicUpdateManyWithWhereWithoutDemographicInput = {
    where: AnimeDemographicScalarWhereInput
    data: XOR<AnimeDemographicUpdateManyMutationInput, AnimeDemographicUncheckedUpdateManyWithoutDemographicInput>
  }

  export type AnimeDemographicScalarWhereInput = {
    AND?: AnimeDemographicScalarWhereInput | AnimeDemographicScalarWhereInput[]
    OR?: AnimeDemographicScalarWhereInput[]
    NOT?: AnimeDemographicScalarWhereInput | AnimeDemographicScalarWhereInput[]
    animeId?: StringFilter<"AnimeDemographic"> | string
    demographicId?: StringFilter<"AnimeDemographic"> | string
  }

  export type AnimeCreateWithoutDemographicInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutDemographicInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutDemographicInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutDemographicInput, AnimeUncheckedCreateWithoutDemographicInput>
  }

  export type DemographicCreateWithoutAnimesInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type DemographicUncheckedCreateWithoutAnimesInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type DemographicCreateOrConnectWithoutAnimesInput = {
    where: DemographicWhereUniqueInput
    create: XOR<DemographicCreateWithoutAnimesInput, DemographicUncheckedCreateWithoutAnimesInput>
  }

  export type AnimeUpsertWithoutDemographicInput = {
    update: XOR<AnimeUpdateWithoutDemographicInput, AnimeUncheckedUpdateWithoutDemographicInput>
    create: XOR<AnimeCreateWithoutDemographicInput, AnimeUncheckedCreateWithoutDemographicInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutDemographicInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutDemographicInput, AnimeUncheckedUpdateWithoutDemographicInput>
  }

  export type AnimeUpdateWithoutDemographicInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutDemographicInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type DemographicUpsertWithoutAnimesInput = {
    update: XOR<DemographicUpdateWithoutAnimesInput, DemographicUncheckedUpdateWithoutAnimesInput>
    create: XOR<DemographicCreateWithoutAnimesInput, DemographicUncheckedCreateWithoutAnimesInput>
    where?: DemographicWhereInput
  }

  export type DemographicUpdateToOneWithWhereWithoutAnimesInput = {
    where?: DemographicWhereInput
    data: XOR<DemographicUpdateWithoutAnimesInput, DemographicUncheckedUpdateWithoutAnimesInput>
  }

  export type DemographicUpdateWithoutAnimesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type DemographicUncheckedUpdateWithoutAnimesInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeGenreCreateWithoutGenreInput = {
    anime: AnimeCreateNestedOneWithoutGenresInput
  }

  export type AnimeGenreUncheckedCreateWithoutGenreInput = {
    animeId: string
  }

  export type AnimeGenreCreateOrConnectWithoutGenreInput = {
    where: AnimeGenreWhereUniqueInput
    create: XOR<AnimeGenreCreateWithoutGenreInput, AnimeGenreUncheckedCreateWithoutGenreInput>
  }

  export type AnimeGenreCreateManyGenreInputEnvelope = {
    data: AnimeGenreCreateManyGenreInput | AnimeGenreCreateManyGenreInput[]
    skipDuplicates?: boolean
  }

  export type AnimeGenreUpsertWithWhereUniqueWithoutGenreInput = {
    where: AnimeGenreWhereUniqueInput
    update: XOR<AnimeGenreUpdateWithoutGenreInput, AnimeGenreUncheckedUpdateWithoutGenreInput>
    create: XOR<AnimeGenreCreateWithoutGenreInput, AnimeGenreUncheckedCreateWithoutGenreInput>
  }

  export type AnimeGenreUpdateWithWhereUniqueWithoutGenreInput = {
    where: AnimeGenreWhereUniqueInput
    data: XOR<AnimeGenreUpdateWithoutGenreInput, AnimeGenreUncheckedUpdateWithoutGenreInput>
  }

  export type AnimeGenreUpdateManyWithWhereWithoutGenreInput = {
    where: AnimeGenreScalarWhereInput
    data: XOR<AnimeGenreUpdateManyMutationInput, AnimeGenreUncheckedUpdateManyWithoutGenreInput>
  }

  export type AnimeGenreScalarWhereInput = {
    AND?: AnimeGenreScalarWhereInput | AnimeGenreScalarWhereInput[]
    OR?: AnimeGenreScalarWhereInput[]
    NOT?: AnimeGenreScalarWhereInput | AnimeGenreScalarWhereInput[]
    animeId?: StringFilter<"AnimeGenre"> | string
    genreId?: StringFilter<"AnimeGenre"> | string
  }

  export type AnimeCreateWithoutGenresInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutGenresInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutGenresInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput>
  }

  export type GenreCreateWithoutAnimesInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type GenreUncheckedCreateWithoutAnimesInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type GenreCreateOrConnectWithoutAnimesInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutAnimesInput, GenreUncheckedCreateWithoutAnimesInput>
  }

  export type AnimeUpsertWithoutGenresInput = {
    update: XOR<AnimeUpdateWithoutGenresInput, AnimeUncheckedUpdateWithoutGenresInput>
    create: XOR<AnimeCreateWithoutGenresInput, AnimeUncheckedCreateWithoutGenresInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutGenresInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutGenresInput, AnimeUncheckedUpdateWithoutGenresInput>
  }

  export type AnimeUpdateWithoutGenresInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutGenresInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type GenreUpsertWithoutAnimesInput = {
    update: XOR<GenreUpdateWithoutAnimesInput, GenreUncheckedUpdateWithoutAnimesInput>
    create: XOR<GenreCreateWithoutAnimesInput, GenreUncheckedCreateWithoutAnimesInput>
    where?: GenreWhereInput
  }

  export type GenreUpdateToOneWithWhereWithoutAnimesInput = {
    where?: GenreWhereInput
    data: XOR<GenreUpdateWithoutAnimesInput, GenreUncheckedUpdateWithoutAnimesInput>
  }

  export type GenreUpdateWithoutAnimesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateWithoutAnimesInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeCreateWithoutPosterInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutPosterInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutPosterInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutPosterInput, AnimeUncheckedCreateWithoutPosterInput>
  }

  export type AnimeUpsertWithoutPosterInput = {
    update: XOR<AnimeUpdateWithoutPosterInput, AnimeUncheckedUpdateWithoutPosterInput>
    create: XOR<AnimeCreateWithoutPosterInput, AnimeUncheckedCreateWithoutPosterInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutPosterInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutPosterInput, AnimeUncheckedUpdateWithoutPosterInput>
  }

  export type AnimeUpdateWithoutPosterInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutPosterInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeCreateWithoutRelatedInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutRelatedInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutRelatedInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutRelatedInput, AnimeUncheckedCreateWithoutRelatedInput>
  }

  export type AnimeCreateWithoutRelatedAnimeInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutRelatedAnimeInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutRelatedAnimeInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutRelatedAnimeInput, AnimeUncheckedCreateWithoutRelatedAnimeInput>
  }

  export type AnimeUpsertWithoutRelatedInput = {
    update: XOR<AnimeUpdateWithoutRelatedInput, AnimeUncheckedUpdateWithoutRelatedInput>
    create: XOR<AnimeCreateWithoutRelatedInput, AnimeUncheckedCreateWithoutRelatedInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutRelatedInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutRelatedInput, AnimeUncheckedUpdateWithoutRelatedInput>
  }

  export type AnimeUpdateWithoutRelatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutRelatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUpsertWithoutRelatedAnimeInput = {
    update: XOR<AnimeUpdateWithoutRelatedAnimeInput, AnimeUncheckedUpdateWithoutRelatedAnimeInput>
    create: XOR<AnimeCreateWithoutRelatedAnimeInput, AnimeUncheckedCreateWithoutRelatedAnimeInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutRelatedAnimeInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutRelatedAnimeInput, AnimeUncheckedUpdateWithoutRelatedAnimeInput>
  }

  export type AnimeUpdateWithoutRelatedAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutRelatedAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeScreenshotCreateWithoutScreenshotInput = {
    anime: AnimeCreateNestedOneWithoutScreenshotsInput
  }

  export type AnimeScreenshotUncheckedCreateWithoutScreenshotInput = {
    animeId: string
  }

  export type AnimeScreenshotCreateOrConnectWithoutScreenshotInput = {
    where: AnimeScreenshotWhereUniqueInput
    create: XOR<AnimeScreenshotCreateWithoutScreenshotInput, AnimeScreenshotUncheckedCreateWithoutScreenshotInput>
  }

  export type AnimeScreenshotCreateManyScreenshotInputEnvelope = {
    data: AnimeScreenshotCreateManyScreenshotInput | AnimeScreenshotCreateManyScreenshotInput[]
    skipDuplicates?: boolean
  }

  export type AnimeScreenshotUpsertWithWhereUniqueWithoutScreenshotInput = {
    where: AnimeScreenshotWhereUniqueInput
    update: XOR<AnimeScreenshotUpdateWithoutScreenshotInput, AnimeScreenshotUncheckedUpdateWithoutScreenshotInput>
    create: XOR<AnimeScreenshotCreateWithoutScreenshotInput, AnimeScreenshotUncheckedCreateWithoutScreenshotInput>
  }

  export type AnimeScreenshotUpdateWithWhereUniqueWithoutScreenshotInput = {
    where: AnimeScreenshotWhereUniqueInput
    data: XOR<AnimeScreenshotUpdateWithoutScreenshotInput, AnimeScreenshotUncheckedUpdateWithoutScreenshotInput>
  }

  export type AnimeScreenshotUpdateManyWithWhereWithoutScreenshotInput = {
    where: AnimeScreenshotScalarWhereInput
    data: XOR<AnimeScreenshotUpdateManyMutationInput, AnimeScreenshotUncheckedUpdateManyWithoutScreenshotInput>
  }

  export type AnimeScreenshotScalarWhereInput = {
    AND?: AnimeScreenshotScalarWhereInput | AnimeScreenshotScalarWhereInput[]
    OR?: AnimeScreenshotScalarWhereInput[]
    NOT?: AnimeScreenshotScalarWhereInput | AnimeScreenshotScalarWhereInput[]
    animeId?: StringFilter<"AnimeScreenshot"> | string
    screenshotId?: StringFilter<"AnimeScreenshot"> | string
  }

  export type AnimeCreateWithoutScreenshotsInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutScreenshotsInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutScreenshotsInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutScreenshotsInput, AnimeUncheckedCreateWithoutScreenshotsInput>
  }

  export type ScreenshotsCreateWithoutAnimeScreenshotInput = {
    id?: string
    shikimoriId: string
    originalUrl?: string | null
    x332Url?: string | null
  }

  export type ScreenshotsUncheckedCreateWithoutAnimeScreenshotInput = {
    id?: string
    shikimoriId: string
    originalUrl?: string | null
    x332Url?: string | null
  }

  export type ScreenshotsCreateOrConnectWithoutAnimeScreenshotInput = {
    where: ScreenshotsWhereUniqueInput
    create: XOR<ScreenshotsCreateWithoutAnimeScreenshotInput, ScreenshotsUncheckedCreateWithoutAnimeScreenshotInput>
  }

  export type AnimeUpsertWithoutScreenshotsInput = {
    update: XOR<AnimeUpdateWithoutScreenshotsInput, AnimeUncheckedUpdateWithoutScreenshotsInput>
    create: XOR<AnimeCreateWithoutScreenshotsInput, AnimeUncheckedCreateWithoutScreenshotsInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutScreenshotsInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutScreenshotsInput, AnimeUncheckedUpdateWithoutScreenshotsInput>
  }

  export type AnimeUpdateWithoutScreenshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutScreenshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type ScreenshotsUpsertWithoutAnimeScreenshotInput = {
    update: XOR<ScreenshotsUpdateWithoutAnimeScreenshotInput, ScreenshotsUncheckedUpdateWithoutAnimeScreenshotInput>
    create: XOR<ScreenshotsCreateWithoutAnimeScreenshotInput, ScreenshotsUncheckedCreateWithoutAnimeScreenshotInput>
    where?: ScreenshotsWhereInput
  }

  export type ScreenshotsUpdateToOneWithWhereWithoutAnimeScreenshotInput = {
    where?: ScreenshotsWhereInput
    data: XOR<ScreenshotsUpdateWithoutAnimeScreenshotInput, ScreenshotsUncheckedUpdateWithoutAnimeScreenshotInput>
  }

  export type ScreenshotsUpdateWithoutAnimeScreenshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    x332Url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScreenshotsUncheckedUpdateWithoutAnimeScreenshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: StringFieldUpdateOperationsInput | string
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    x332Url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimeStudioCreateWithoutStudioInput = {
    anime: AnimeCreateNestedOneWithoutStudiosInput
  }

  export type AnimeStudioUncheckedCreateWithoutStudioInput = {
    animeId: string
  }

  export type AnimeStudioCreateOrConnectWithoutStudioInput = {
    where: AnimeStudioWhereUniqueInput
    create: XOR<AnimeStudioCreateWithoutStudioInput, AnimeStudioUncheckedCreateWithoutStudioInput>
  }

  export type AnimeStudioCreateManyStudioInputEnvelope = {
    data: AnimeStudioCreateManyStudioInput | AnimeStudioCreateManyStudioInput[]
    skipDuplicates?: boolean
  }

  export type AnimeStudioUpsertWithWhereUniqueWithoutStudioInput = {
    where: AnimeStudioWhereUniqueInput
    update: XOR<AnimeStudioUpdateWithoutStudioInput, AnimeStudioUncheckedUpdateWithoutStudioInput>
    create: XOR<AnimeStudioCreateWithoutStudioInput, AnimeStudioUncheckedCreateWithoutStudioInput>
  }

  export type AnimeStudioUpdateWithWhereUniqueWithoutStudioInput = {
    where: AnimeStudioWhereUniqueInput
    data: XOR<AnimeStudioUpdateWithoutStudioInput, AnimeStudioUncheckedUpdateWithoutStudioInput>
  }

  export type AnimeStudioUpdateManyWithWhereWithoutStudioInput = {
    where: AnimeStudioScalarWhereInput
    data: XOR<AnimeStudioUpdateManyMutationInput, AnimeStudioUncheckedUpdateManyWithoutStudioInput>
  }

  export type AnimeStudioScalarWhereInput = {
    AND?: AnimeStudioScalarWhereInput | AnimeStudioScalarWhereInput[]
    OR?: AnimeStudioScalarWhereInput[]
    NOT?: AnimeStudioScalarWhereInput | AnimeStudioScalarWhereInput[]
    animeId?: StringFilter<"AnimeStudio"> | string
    studioId?: StringFilter<"AnimeStudio"> | string
  }

  export type AnimeCreateWithoutStudiosInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutStudiosInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutStudiosInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutStudiosInput, AnimeUncheckedCreateWithoutStudiosInput>
  }

  export type StudioCreateWithoutAnimeStudioInput = {
    id?: string
    name: string
    imageUrl?: string | null
  }

  export type StudioUncheckedCreateWithoutAnimeStudioInput = {
    id?: string
    name: string
    imageUrl?: string | null
  }

  export type StudioCreateOrConnectWithoutAnimeStudioInput = {
    where: StudioWhereUniqueInput
    create: XOR<StudioCreateWithoutAnimeStudioInput, StudioUncheckedCreateWithoutAnimeStudioInput>
  }

  export type AnimeUpsertWithoutStudiosInput = {
    update: XOR<AnimeUpdateWithoutStudiosInput, AnimeUncheckedUpdateWithoutStudiosInput>
    create: XOR<AnimeCreateWithoutStudiosInput, AnimeUncheckedCreateWithoutStudiosInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutStudiosInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutStudiosInput, AnimeUncheckedUpdateWithoutStudiosInput>
  }

  export type AnimeUpdateWithoutStudiosInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutStudiosInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type StudioUpsertWithoutAnimeStudioInput = {
    update: XOR<StudioUpdateWithoutAnimeStudioInput, StudioUncheckedUpdateWithoutAnimeStudioInput>
    create: XOR<StudioCreateWithoutAnimeStudioInput, StudioUncheckedCreateWithoutAnimeStudioInput>
    where?: StudioWhereInput
  }

  export type StudioUpdateToOneWithWhereWithoutAnimeStudioInput = {
    where?: StudioWhereInput
    data: XOR<StudioUpdateWithoutAnimeStudioInput, StudioUncheckedUpdateWithoutAnimeStudioInput>
  }

  export type StudioUpdateWithoutAnimeStudioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudioUncheckedUpdateWithoutAnimeStudioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimeThemeCreateWithoutThemeInput = {
    anime: AnimeCreateNestedOneWithoutThemeInput
  }

  export type AnimeThemeUncheckedCreateWithoutThemeInput = {
    animeId: string
  }

  export type AnimeThemeCreateOrConnectWithoutThemeInput = {
    where: AnimeThemeWhereUniqueInput
    create: XOR<AnimeThemeCreateWithoutThemeInput, AnimeThemeUncheckedCreateWithoutThemeInput>
  }

  export type AnimeThemeCreateManyThemeInputEnvelope = {
    data: AnimeThemeCreateManyThemeInput | AnimeThemeCreateManyThemeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeThemeUpsertWithWhereUniqueWithoutThemeInput = {
    where: AnimeThemeWhereUniqueInput
    update: XOR<AnimeThemeUpdateWithoutThemeInput, AnimeThemeUncheckedUpdateWithoutThemeInput>
    create: XOR<AnimeThemeCreateWithoutThemeInput, AnimeThemeUncheckedCreateWithoutThemeInput>
  }

  export type AnimeThemeUpdateWithWhereUniqueWithoutThemeInput = {
    where: AnimeThemeWhereUniqueInput
    data: XOR<AnimeThemeUpdateWithoutThemeInput, AnimeThemeUncheckedUpdateWithoutThemeInput>
  }

  export type AnimeThemeUpdateManyWithWhereWithoutThemeInput = {
    where: AnimeThemeScalarWhereInput
    data: XOR<AnimeThemeUpdateManyMutationInput, AnimeThemeUncheckedUpdateManyWithoutThemeInput>
  }

  export type AnimeThemeScalarWhereInput = {
    AND?: AnimeThemeScalarWhereInput | AnimeThemeScalarWhereInput[]
    OR?: AnimeThemeScalarWhereInput[]
    NOT?: AnimeThemeScalarWhereInput | AnimeThemeScalarWhereInput[]
    animeId?: StringFilter<"AnimeTheme"> | string
    themeId?: StringFilter<"AnimeTheme"> | string
  }

  export type AnimeCreateWithoutThemeInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutThemeInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutThemeInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutThemeInput, AnimeUncheckedCreateWithoutThemeInput>
  }

  export type ThemeCreateWithoutAnimesInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type ThemeUncheckedCreateWithoutAnimesInput = {
    id?: string
    requestId?: number
    name: string
    russian: string
  }

  export type ThemeCreateOrConnectWithoutAnimesInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutAnimesInput, ThemeUncheckedCreateWithoutAnimesInput>
  }

  export type AnimeUpsertWithoutThemeInput = {
    update: XOR<AnimeUpdateWithoutThemeInput, AnimeUncheckedUpdateWithoutThemeInput>
    create: XOR<AnimeCreateWithoutThemeInput, AnimeUncheckedCreateWithoutThemeInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutThemeInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutThemeInput, AnimeUncheckedUpdateWithoutThemeInput>
  }

  export type AnimeUpdateWithoutThemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutThemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type ThemeUpsertWithoutAnimesInput = {
    update: XOR<ThemeUpdateWithoutAnimesInput, ThemeUncheckedUpdateWithoutAnimesInput>
    create: XOR<ThemeCreateWithoutAnimesInput, ThemeUncheckedCreateWithoutAnimesInput>
    where?: ThemeWhereInput
  }

  export type ThemeUpdateToOneWithWhereWithoutAnimesInput = {
    where?: ThemeWhereInput
    data: XOR<ThemeUpdateWithoutAnimesInput, ThemeUncheckedUpdateWithoutAnimesInput>
  }

  export type ThemeUpdateWithoutAnimesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeUncheckedUpdateWithoutAnimesInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    russian?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeCreateWithoutVideosInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutVideosInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutVideosInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutVideosInput, AnimeUncheckedCreateWithoutVideosInput>
  }

  export type VideoCreateWithoutAnimeVideoInput = {
    id?: string
    shikimoriId?: string | null
    url?: string | null
    name?: string | null
    kind: $Enums.VideoKindEnum
    playerUrl?: string | null
    imageUrl?: string | null
  }

  export type VideoUncheckedCreateWithoutAnimeVideoInput = {
    id?: string
    shikimoriId?: string | null
    url?: string | null
    name?: string | null
    kind: $Enums.VideoKindEnum
    playerUrl?: string | null
    imageUrl?: string | null
  }

  export type VideoCreateOrConnectWithoutAnimeVideoInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutAnimeVideoInput, VideoUncheckedCreateWithoutAnimeVideoInput>
  }

  export type AnimeUpsertWithoutVideosInput = {
    update: XOR<AnimeUpdateWithoutVideosInput, AnimeUncheckedUpdateWithoutVideosInput>
    create: XOR<AnimeCreateWithoutVideosInput, AnimeUncheckedCreateWithoutVideosInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutVideosInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutVideosInput, AnimeUncheckedUpdateWithoutVideosInput>
  }

  export type AnimeUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type VideoUpsertWithoutAnimeVideoInput = {
    update: XOR<VideoUpdateWithoutAnimeVideoInput, VideoUncheckedUpdateWithoutAnimeVideoInput>
    create: XOR<VideoCreateWithoutAnimeVideoInput, VideoUncheckedCreateWithoutAnimeVideoInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutAnimeVideoInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutAnimeVideoInput, VideoUncheckedUpdateWithoutAnimeVideoInput>
  }

  export type VideoUpdateWithoutAnimeVideoInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: EnumVideoKindEnumFieldUpdateOperationsInput | $Enums.VideoKindEnum
    playerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VideoUncheckedUpdateWithoutAnimeVideoInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: EnumVideoKindEnumFieldUpdateOperationsInput | $Enums.VideoKindEnum
    playerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimeVideoCreateWithoutVideoInput = {
    anime: AnimeCreateNestedOneWithoutVideosInput
  }

  export type AnimeVideoUncheckedCreateWithoutVideoInput = {
    animeId: string
  }

  export type AnimeVideoCreateOrConnectWithoutVideoInput = {
    where: AnimeVideoWhereUniqueInput
    create: XOR<AnimeVideoCreateWithoutVideoInput, AnimeVideoUncheckedCreateWithoutVideoInput>
  }

  export type AnimeVideoCreateManyVideoInputEnvelope = {
    data: AnimeVideoCreateManyVideoInput | AnimeVideoCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type AnimeVideoUpsertWithWhereUniqueWithoutVideoInput = {
    where: AnimeVideoWhereUniqueInput
    update: XOR<AnimeVideoUpdateWithoutVideoInput, AnimeVideoUncheckedUpdateWithoutVideoInput>
    create: XOR<AnimeVideoCreateWithoutVideoInput, AnimeVideoUncheckedCreateWithoutVideoInput>
  }

  export type AnimeVideoUpdateWithWhereUniqueWithoutVideoInput = {
    where: AnimeVideoWhereUniqueInput
    data: XOR<AnimeVideoUpdateWithoutVideoInput, AnimeVideoUncheckedUpdateWithoutVideoInput>
  }

  export type AnimeVideoUpdateManyWithWhereWithoutVideoInput = {
    where: AnimeVideoScalarWhereInput
    data: XOR<AnimeVideoUpdateManyMutationInput, AnimeVideoUncheckedUpdateManyWithoutVideoInput>
  }

  export type AnimeVideoScalarWhereInput = {
    AND?: AnimeVideoScalarWhereInput | AnimeVideoScalarWhereInput[]
    OR?: AnimeVideoScalarWhereInput[]
    NOT?: AnimeVideoScalarWhereInput | AnimeVideoScalarWhereInput[]
    animeId?: StringFilter<"AnimeVideo"> | string
    videoId?: StringFilter<"AnimeVideo"> | string
  }

  export type AnimePosterCreateWithoutAnimeInput = {
    id?: string
    shikimoriId?: string | null
    originalUrl?: string | null
    mainUrl?: string | null
  }

  export type AnimePosterUncheckedCreateWithoutAnimeInput = {
    id?: string
    shikimoriId?: string | null
    originalUrl?: string | null
    mainUrl?: string | null
  }

  export type AnimePosterCreateOrConnectWithoutAnimeInput = {
    where: AnimePosterWhereUniqueInput
    create: XOR<AnimePosterCreateWithoutAnimeInput, AnimePosterUncheckedCreateWithoutAnimeInput>
  }

  export type AnimePosterCreateManyAnimeInputEnvelope = {
    data: AnimePosterCreateManyAnimeInput | AnimePosterCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeStudioCreateWithoutAnimeInput = {
    studio: StudioCreateNestedOneWithoutAnimeStudioInput
  }

  export type AnimeStudioUncheckedCreateWithoutAnimeInput = {
    studioId: string
  }

  export type AnimeStudioCreateOrConnectWithoutAnimeInput = {
    where: AnimeStudioWhereUniqueInput
    create: XOR<AnimeStudioCreateWithoutAnimeInput, AnimeStudioUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeStudioCreateManyAnimeInputEnvelope = {
    data: AnimeStudioCreateManyAnimeInput | AnimeStudioCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type RelatedAnimeCreateWithoutAnimeInput = {
    id?: string
    relationKind: $Enums.RelationKind
    related: AnimeCreateNestedOneWithoutRelatedAnimeInput
  }

  export type RelatedAnimeUncheckedCreateWithoutAnimeInput = {
    id?: string
    relatedAnimeId: string
    relationKind: $Enums.RelationKind
  }

  export type RelatedAnimeCreateOrConnectWithoutAnimeInput = {
    where: RelatedAnimeWhereUniqueInput
    create: XOR<RelatedAnimeCreateWithoutAnimeInput, RelatedAnimeUncheckedCreateWithoutAnimeInput>
  }

  export type RelatedAnimeCreateManyAnimeInputEnvelope = {
    data: RelatedAnimeCreateManyAnimeInput | RelatedAnimeCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeVideoCreateWithoutAnimeInput = {
    video: VideoCreateNestedOneWithoutAnimeVideoInput
  }

  export type AnimeVideoUncheckedCreateWithoutAnimeInput = {
    videoId: string
  }

  export type AnimeVideoCreateOrConnectWithoutAnimeInput = {
    where: AnimeVideoWhereUniqueInput
    create: XOR<AnimeVideoCreateWithoutAnimeInput, AnimeVideoUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeVideoCreateManyAnimeInputEnvelope = {
    data: AnimeVideoCreateManyAnimeInput | AnimeVideoCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeScreenshotCreateWithoutAnimeInput = {
    screenshot: ScreenshotsCreateNestedOneWithoutAnimeScreenshotInput
  }

  export type AnimeScreenshotUncheckedCreateWithoutAnimeInput = {
    screenshotId: string
  }

  export type AnimeScreenshotCreateOrConnectWithoutAnimeInput = {
    where: AnimeScreenshotWhereUniqueInput
    create: XOR<AnimeScreenshotCreateWithoutAnimeInput, AnimeScreenshotUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeScreenshotCreateManyAnimeInputEnvelope = {
    data: AnimeScreenshotCreateManyAnimeInput | AnimeScreenshotCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeGenreCreateWithoutAnimeInput = {
    genre: GenreCreateNestedOneWithoutAnimesInput
  }

  export type AnimeGenreUncheckedCreateWithoutAnimeInput = {
    genreId: string
  }

  export type AnimeGenreCreateOrConnectWithoutAnimeInput = {
    where: AnimeGenreWhereUniqueInput
    create: XOR<AnimeGenreCreateWithoutAnimeInput, AnimeGenreUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeGenreCreateManyAnimeInputEnvelope = {
    data: AnimeGenreCreateManyAnimeInput | AnimeGenreCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeThemeCreateWithoutAnimeInput = {
    theme: ThemeCreateNestedOneWithoutAnimesInput
  }

  export type AnimeThemeUncheckedCreateWithoutAnimeInput = {
    themeId: string
  }

  export type AnimeThemeCreateOrConnectWithoutAnimeInput = {
    where: AnimeThemeWhereUniqueInput
    create: XOR<AnimeThemeCreateWithoutAnimeInput, AnimeThemeUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeThemeCreateManyAnimeInputEnvelope = {
    data: AnimeThemeCreateManyAnimeInput | AnimeThemeCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeDemographicCreateWithoutAnimeInput = {
    demographic: DemographicCreateNestedOneWithoutAnimesInput
  }

  export type AnimeDemographicUncheckedCreateWithoutAnimeInput = {
    demographicId: string
  }

  export type AnimeDemographicCreateOrConnectWithoutAnimeInput = {
    where: AnimeDemographicWhereUniqueInput
    create: XOR<AnimeDemographicCreateWithoutAnimeInput, AnimeDemographicUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeDemographicCreateManyAnimeInputEnvelope = {
    data: AnimeDemographicCreateManyAnimeInput | AnimeDemographicCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type RelatedAnimeCreateWithoutRelatedInput = {
    id?: string
    relationKind: $Enums.RelationKind
    anime: AnimeCreateNestedOneWithoutRelatedInput
  }

  export type RelatedAnimeUncheckedCreateWithoutRelatedInput = {
    id?: string
    animeId: string
    relationKind: $Enums.RelationKind
  }

  export type RelatedAnimeCreateOrConnectWithoutRelatedInput = {
    where: RelatedAnimeWhereUniqueInput
    create: XOR<RelatedAnimeCreateWithoutRelatedInput, RelatedAnimeUncheckedCreateWithoutRelatedInput>
  }

  export type RelatedAnimeCreateManyRelatedInputEnvelope = {
    data: RelatedAnimeCreateManyRelatedInput | RelatedAnimeCreateManyRelatedInput[]
    skipDuplicates?: boolean
  }

  export type AnimeEpisodeProgressCreateWithoutAnimeInput = {
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeProgressInput
  }

  export type AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput = {
    userId: string
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AnimeEpisodeProgressCreateOrConnectWithoutAnimeInput = {
    where: AnimeEpisodeProgressWhereUniqueInput
    create: XOR<AnimeEpisodeProgressCreateWithoutAnimeInput, AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeEpisodeProgressCreateManyAnimeInputEnvelope = {
    data: AnimeEpisodeProgressCreateManyAnimeInput | AnimeEpisodeProgressCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimeInCollectionCreateWithoutAnimeInput = {
    note?: string | null
    addedAt?: Date | string
    collection: AnimeCollectionCreateNestedOneWithoutItemsInput
  }

  export type AnimeInCollectionUncheckedCreateWithoutAnimeInput = {
    collectionId: string
    note?: string | null
    addedAt?: Date | string
  }

  export type AnimeInCollectionCreateOrConnectWithoutAnimeInput = {
    where: AnimeInCollectionWhereUniqueInput
    create: XOR<AnimeInCollectionCreateWithoutAnimeInput, AnimeInCollectionUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeInCollectionCreateManyAnimeInputEnvelope = {
    data: AnimeInCollectionCreateManyAnimeInput | AnimeInCollectionCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAnimeInput = {
    id?: string
    content: string
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutAnimeInput = {
    id?: string
    content: string
    userId: string
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutAnimeInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAnimeInput, CommentUncheckedCreateWithoutAnimeInput>
  }

  export type CommentCreateManyAnimeInputEnvelope = {
    data: CommentCreateManyAnimeInput | CommentCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutAnimeInput = {
    id?: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeReviewsInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutAnimeInput = {
    id?: string
    userId: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutAnimeInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutAnimeInput, ReviewUncheckedCreateWithoutAnimeInput>
  }

  export type ReviewCreateManyAnimeInputEnvelope = {
    data: ReviewCreateManyAnimeInput | ReviewCreateManyAnimeInput[]
    skipDuplicates?: boolean
  }

  export type AnimePosterUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimePosterWhereUniqueInput
    update: XOR<AnimePosterUpdateWithoutAnimeInput, AnimePosterUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimePosterCreateWithoutAnimeInput, AnimePosterUncheckedCreateWithoutAnimeInput>
  }

  export type AnimePosterUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimePosterWhereUniqueInput
    data: XOR<AnimePosterUpdateWithoutAnimeInput, AnimePosterUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimePosterUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimePosterScalarWhereInput
    data: XOR<AnimePosterUpdateManyMutationInput, AnimePosterUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimePosterScalarWhereInput = {
    AND?: AnimePosterScalarWhereInput | AnimePosterScalarWhereInput[]
    OR?: AnimePosterScalarWhereInput[]
    NOT?: AnimePosterScalarWhereInput | AnimePosterScalarWhereInput[]
    id?: StringFilter<"AnimePoster"> | string
    shikimoriId?: StringNullableFilter<"AnimePoster"> | string | null
    animeId?: StringFilter<"AnimePoster"> | string
    originalUrl?: StringNullableFilter<"AnimePoster"> | string | null
    mainUrl?: StringNullableFilter<"AnimePoster"> | string | null
  }

  export type AnimeStudioUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeStudioWhereUniqueInput
    update: XOR<AnimeStudioUpdateWithoutAnimeInput, AnimeStudioUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeStudioCreateWithoutAnimeInput, AnimeStudioUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeStudioUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeStudioWhereUniqueInput
    data: XOR<AnimeStudioUpdateWithoutAnimeInput, AnimeStudioUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeStudioUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeStudioScalarWhereInput
    data: XOR<AnimeStudioUpdateManyMutationInput, AnimeStudioUncheckedUpdateManyWithoutAnimeInput>
  }

  export type RelatedAnimeUpsertWithWhereUniqueWithoutAnimeInput = {
    where: RelatedAnimeWhereUniqueInput
    update: XOR<RelatedAnimeUpdateWithoutAnimeInput, RelatedAnimeUncheckedUpdateWithoutAnimeInput>
    create: XOR<RelatedAnimeCreateWithoutAnimeInput, RelatedAnimeUncheckedCreateWithoutAnimeInput>
  }

  export type RelatedAnimeUpdateWithWhereUniqueWithoutAnimeInput = {
    where: RelatedAnimeWhereUniqueInput
    data: XOR<RelatedAnimeUpdateWithoutAnimeInput, RelatedAnimeUncheckedUpdateWithoutAnimeInput>
  }

  export type RelatedAnimeUpdateManyWithWhereWithoutAnimeInput = {
    where: RelatedAnimeScalarWhereInput
    data: XOR<RelatedAnimeUpdateManyMutationInput, RelatedAnimeUncheckedUpdateManyWithoutAnimeInput>
  }

  export type RelatedAnimeScalarWhereInput = {
    AND?: RelatedAnimeScalarWhereInput | RelatedAnimeScalarWhereInput[]
    OR?: RelatedAnimeScalarWhereInput[]
    NOT?: RelatedAnimeScalarWhereInput | RelatedAnimeScalarWhereInput[]
    id?: StringFilter<"RelatedAnime"> | string
    animeId?: StringFilter<"RelatedAnime"> | string
    relatedAnimeId?: StringFilter<"RelatedAnime"> | string
    relationKind?: EnumRelationKindFilter<"RelatedAnime"> | $Enums.RelationKind
  }

  export type AnimeVideoUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeVideoWhereUniqueInput
    update: XOR<AnimeVideoUpdateWithoutAnimeInput, AnimeVideoUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeVideoCreateWithoutAnimeInput, AnimeVideoUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeVideoUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeVideoWhereUniqueInput
    data: XOR<AnimeVideoUpdateWithoutAnimeInput, AnimeVideoUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeVideoUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeVideoScalarWhereInput
    data: XOR<AnimeVideoUpdateManyMutationInput, AnimeVideoUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimeScreenshotUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeScreenshotWhereUniqueInput
    update: XOR<AnimeScreenshotUpdateWithoutAnimeInput, AnimeScreenshotUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeScreenshotCreateWithoutAnimeInput, AnimeScreenshotUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeScreenshotUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeScreenshotWhereUniqueInput
    data: XOR<AnimeScreenshotUpdateWithoutAnimeInput, AnimeScreenshotUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeScreenshotUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeScreenshotScalarWhereInput
    data: XOR<AnimeScreenshotUpdateManyMutationInput, AnimeScreenshotUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimeGenreUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeGenreWhereUniqueInput
    update: XOR<AnimeGenreUpdateWithoutAnimeInput, AnimeGenreUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeGenreCreateWithoutAnimeInput, AnimeGenreUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeGenreUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeGenreWhereUniqueInput
    data: XOR<AnimeGenreUpdateWithoutAnimeInput, AnimeGenreUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeGenreUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeGenreScalarWhereInput
    data: XOR<AnimeGenreUpdateManyMutationInput, AnimeGenreUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimeThemeUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeThemeWhereUniqueInput
    update: XOR<AnimeThemeUpdateWithoutAnimeInput, AnimeThemeUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeThemeCreateWithoutAnimeInput, AnimeThemeUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeThemeUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeThemeWhereUniqueInput
    data: XOR<AnimeThemeUpdateWithoutAnimeInput, AnimeThemeUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeThemeUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeThemeScalarWhereInput
    data: XOR<AnimeThemeUpdateManyMutationInput, AnimeThemeUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimeDemographicUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeDemographicWhereUniqueInput
    update: XOR<AnimeDemographicUpdateWithoutAnimeInput, AnimeDemographicUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeDemographicCreateWithoutAnimeInput, AnimeDemographicUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeDemographicUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeDemographicWhereUniqueInput
    data: XOR<AnimeDemographicUpdateWithoutAnimeInput, AnimeDemographicUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeDemographicUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeDemographicScalarWhereInput
    data: XOR<AnimeDemographicUpdateManyMutationInput, AnimeDemographicUncheckedUpdateManyWithoutAnimeInput>
  }

  export type RelatedAnimeUpsertWithWhereUniqueWithoutRelatedInput = {
    where: RelatedAnimeWhereUniqueInput
    update: XOR<RelatedAnimeUpdateWithoutRelatedInput, RelatedAnimeUncheckedUpdateWithoutRelatedInput>
    create: XOR<RelatedAnimeCreateWithoutRelatedInput, RelatedAnimeUncheckedCreateWithoutRelatedInput>
  }

  export type RelatedAnimeUpdateWithWhereUniqueWithoutRelatedInput = {
    where: RelatedAnimeWhereUniqueInput
    data: XOR<RelatedAnimeUpdateWithoutRelatedInput, RelatedAnimeUncheckedUpdateWithoutRelatedInput>
  }

  export type RelatedAnimeUpdateManyWithWhereWithoutRelatedInput = {
    where: RelatedAnimeScalarWhereInput
    data: XOR<RelatedAnimeUpdateManyMutationInput, RelatedAnimeUncheckedUpdateManyWithoutRelatedInput>
  }

  export type AnimeEpisodeProgressUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeEpisodeProgressWhereUniqueInput
    update: XOR<AnimeEpisodeProgressUpdateWithoutAnimeInput, AnimeEpisodeProgressUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeEpisodeProgressCreateWithoutAnimeInput, AnimeEpisodeProgressUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeEpisodeProgressUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeEpisodeProgressWhereUniqueInput
    data: XOR<AnimeEpisodeProgressUpdateWithoutAnimeInput, AnimeEpisodeProgressUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeEpisodeProgressUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeEpisodeProgressScalarWhereInput
    data: XOR<AnimeEpisodeProgressUpdateManyMutationInput, AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimeEpisodeProgressScalarWhereInput = {
    AND?: AnimeEpisodeProgressScalarWhereInput | AnimeEpisodeProgressScalarWhereInput[]
    OR?: AnimeEpisodeProgressScalarWhereInput[]
    NOT?: AnimeEpisodeProgressScalarWhereInput | AnimeEpisodeProgressScalarWhereInput[]
    userId?: StringFilter<"AnimeEpisodeProgress"> | string
    animeId?: StringFilter<"AnimeEpisodeProgress"> | string
    episode?: IntFilter<"AnimeEpisodeProgress"> | number
    timestamp?: IntFilter<"AnimeEpisodeProgress"> | number
    isWatched?: BoolFilter<"AnimeEpisodeProgress"> | boolean
    updatedAt?: DateTimeFilter<"AnimeEpisodeProgress"> | Date | string
    createdAt?: DateTimeFilter<"AnimeEpisodeProgress"> | Date | string
  }

  export type AnimeInCollectionUpsertWithWhereUniqueWithoutAnimeInput = {
    where: AnimeInCollectionWhereUniqueInput
    update: XOR<AnimeInCollectionUpdateWithoutAnimeInput, AnimeInCollectionUncheckedUpdateWithoutAnimeInput>
    create: XOR<AnimeInCollectionCreateWithoutAnimeInput, AnimeInCollectionUncheckedCreateWithoutAnimeInput>
  }

  export type AnimeInCollectionUpdateWithWhereUniqueWithoutAnimeInput = {
    where: AnimeInCollectionWhereUniqueInput
    data: XOR<AnimeInCollectionUpdateWithoutAnimeInput, AnimeInCollectionUncheckedUpdateWithoutAnimeInput>
  }

  export type AnimeInCollectionUpdateManyWithWhereWithoutAnimeInput = {
    where: AnimeInCollectionScalarWhereInput
    data: XOR<AnimeInCollectionUpdateManyMutationInput, AnimeInCollectionUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimeInCollectionScalarWhereInput = {
    AND?: AnimeInCollectionScalarWhereInput | AnimeInCollectionScalarWhereInput[]
    OR?: AnimeInCollectionScalarWhereInput[]
    NOT?: AnimeInCollectionScalarWhereInput | AnimeInCollectionScalarWhereInput[]
    collectionId?: StringFilter<"AnimeInCollection"> | string
    animeId?: StringFilter<"AnimeInCollection"> | string
    note?: StringNullableFilter<"AnimeInCollection"> | string | null
    addedAt?: DateTimeFilter<"AnimeInCollection"> | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutAnimeInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAnimeInput, CommentUncheckedUpdateWithoutAnimeInput>
    create: XOR<CommentCreateWithoutAnimeInput, CommentUncheckedCreateWithoutAnimeInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAnimeInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAnimeInput, CommentUncheckedUpdateWithoutAnimeInput>
  }

  export type CommentUpdateManyWithWhereWithoutAnimeInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAnimeInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    animeId?: StringNullableFilter<"Comment"> | string | null
    likesCount?: IntFilter<"Comment"> | number
    episode?: IntNullableFilter<"Comment"> | number | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutAnimeInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutAnimeInput, ReviewUncheckedUpdateWithoutAnimeInput>
    create: XOR<ReviewCreateWithoutAnimeInput, ReviewUncheckedCreateWithoutAnimeInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutAnimeInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutAnimeInput, ReviewUncheckedUpdateWithoutAnimeInput>
  }

  export type ReviewUpdateManyWithWhereWithoutAnimeInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutAnimeInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    animeId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    title?: StringNullableFilter<"Review"> | string | null
    description?: StringNullableFilter<"Review"> | string | null
    content?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAnimeCollectionInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnimeCollectionInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnimeCollectionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnimeCollectionInput, UserUncheckedCreateWithoutAnimeCollectionInput>
  }

  export type AnimeInCollectionCreateWithoutCollectionInput = {
    note?: string | null
    addedAt?: Date | string
    anime: AnimeCreateNestedOneWithoutAnimeInCollectionInput
  }

  export type AnimeInCollectionUncheckedCreateWithoutCollectionInput = {
    animeId: string
    note?: string | null
    addedAt?: Date | string
  }

  export type AnimeInCollectionCreateOrConnectWithoutCollectionInput = {
    where: AnimeInCollectionWhereUniqueInput
    create: XOR<AnimeInCollectionCreateWithoutCollectionInput, AnimeInCollectionUncheckedCreateWithoutCollectionInput>
  }

  export type AnimeInCollectionCreateManyCollectionInputEnvelope = {
    data: AnimeInCollectionCreateManyCollectionInput | AnimeInCollectionCreateManyCollectionInput[]
    skipDuplicates?: boolean
  }

  export type AnimeCollectionLikeCreateWithoutCollectionInput = {
    likedAt?: Date | string
    user: UserCreateNestedOneWithoutLikedCollectionInput
  }

  export type AnimeCollectionLikeUncheckedCreateWithoutCollectionInput = {
    userId: string
    likedAt?: Date | string
  }

  export type AnimeCollectionLikeCreateOrConnectWithoutCollectionInput = {
    where: AnimeCollectionLikeWhereUniqueInput
    create: XOR<AnimeCollectionLikeCreateWithoutCollectionInput, AnimeCollectionLikeUncheckedCreateWithoutCollectionInput>
  }

  export type AnimeCollectionLikeCreateManyCollectionInputEnvelope = {
    data: AnimeCollectionLikeCreateManyCollectionInput | AnimeCollectionLikeCreateManyCollectionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAnimeCollectionInput = {
    update: XOR<UserUpdateWithoutAnimeCollectionInput, UserUncheckedUpdateWithoutAnimeCollectionInput>
    create: XOR<UserCreateWithoutAnimeCollectionInput, UserUncheckedCreateWithoutAnimeCollectionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnimeCollectionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnimeCollectionInput, UserUncheckedUpdateWithoutAnimeCollectionInput>
  }

  export type UserUpdateWithoutAnimeCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnimeCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnimeInCollectionUpsertWithWhereUniqueWithoutCollectionInput = {
    where: AnimeInCollectionWhereUniqueInput
    update: XOR<AnimeInCollectionUpdateWithoutCollectionInput, AnimeInCollectionUncheckedUpdateWithoutCollectionInput>
    create: XOR<AnimeInCollectionCreateWithoutCollectionInput, AnimeInCollectionUncheckedCreateWithoutCollectionInput>
  }

  export type AnimeInCollectionUpdateWithWhereUniqueWithoutCollectionInput = {
    where: AnimeInCollectionWhereUniqueInput
    data: XOR<AnimeInCollectionUpdateWithoutCollectionInput, AnimeInCollectionUncheckedUpdateWithoutCollectionInput>
  }

  export type AnimeInCollectionUpdateManyWithWhereWithoutCollectionInput = {
    where: AnimeInCollectionScalarWhereInput
    data: XOR<AnimeInCollectionUpdateManyMutationInput, AnimeInCollectionUncheckedUpdateManyWithoutCollectionInput>
  }

  export type AnimeCollectionLikeUpsertWithWhereUniqueWithoutCollectionInput = {
    where: AnimeCollectionLikeWhereUniqueInput
    update: XOR<AnimeCollectionLikeUpdateWithoutCollectionInput, AnimeCollectionLikeUncheckedUpdateWithoutCollectionInput>
    create: XOR<AnimeCollectionLikeCreateWithoutCollectionInput, AnimeCollectionLikeUncheckedCreateWithoutCollectionInput>
  }

  export type AnimeCollectionLikeUpdateWithWhereUniqueWithoutCollectionInput = {
    where: AnimeCollectionLikeWhereUniqueInput
    data: XOR<AnimeCollectionLikeUpdateWithoutCollectionInput, AnimeCollectionLikeUncheckedUpdateWithoutCollectionInput>
  }

  export type AnimeCollectionLikeUpdateManyWithWhereWithoutCollectionInput = {
    where: AnimeCollectionLikeScalarWhereInput
    data: XOR<AnimeCollectionLikeUpdateManyMutationInput, AnimeCollectionLikeUncheckedUpdateManyWithoutCollectionInput>
  }

  export type AnimeCollectionLikeScalarWhereInput = {
    AND?: AnimeCollectionLikeScalarWhereInput | AnimeCollectionLikeScalarWhereInput[]
    OR?: AnimeCollectionLikeScalarWhereInput[]
    NOT?: AnimeCollectionLikeScalarWhereInput | AnimeCollectionLikeScalarWhereInput[]
    userId?: StringFilter<"AnimeCollectionLike"> | string
    collectionId?: StringFilter<"AnimeCollectionLike"> | string
    likedAt?: DateTimeFilter<"AnimeCollectionLike"> | Date | string
  }

  export type AnimeCreateWithoutAnimeInCollectionInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutAnimeInCollectionInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutAnimeInCollectionInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutAnimeInCollectionInput, AnimeUncheckedCreateWithoutAnimeInCollectionInput>
  }

  export type AnimeCollectionCreateWithoutItemsInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCollectionInput
    likes?: AnimeCollectionLikeCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionUncheckedCreateWithoutItemsInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionCreateOrConnectWithoutItemsInput = {
    where: AnimeCollectionWhereUniqueInput
    create: XOR<AnimeCollectionCreateWithoutItemsInput, AnimeCollectionUncheckedCreateWithoutItemsInput>
  }

  export type AnimeUpsertWithoutAnimeInCollectionInput = {
    update: XOR<AnimeUpdateWithoutAnimeInCollectionInput, AnimeUncheckedUpdateWithoutAnimeInCollectionInput>
    create: XOR<AnimeCreateWithoutAnimeInCollectionInput, AnimeUncheckedCreateWithoutAnimeInCollectionInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutAnimeInCollectionInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutAnimeInCollectionInput, AnimeUncheckedUpdateWithoutAnimeInCollectionInput>
  }

  export type AnimeUpdateWithoutAnimeInCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutAnimeInCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeCollectionUpsertWithoutItemsInput = {
    update: XOR<AnimeCollectionUpdateWithoutItemsInput, AnimeCollectionUncheckedUpdateWithoutItemsInput>
    create: XOR<AnimeCollectionCreateWithoutItemsInput, AnimeCollectionUncheckedCreateWithoutItemsInput>
    where?: AnimeCollectionWhereInput
  }

  export type AnimeCollectionUpdateToOneWithWhereWithoutItemsInput = {
    where?: AnimeCollectionWhereInput
    data: XOR<AnimeCollectionUpdateWithoutItemsInput, AnimeCollectionUncheckedUpdateWithoutItemsInput>
  }

  export type AnimeCollectionUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCollectionNestedInput
    likes?: AnimeCollectionLikeUpdateManyWithoutCollectionNestedInput
  }

  export type AnimeCollectionUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: AnimeCollectionLikeUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type UserCreateWithoutLikedCollectionInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikedCollectionInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikedCollectionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedCollectionInput, UserUncheckedCreateWithoutLikedCollectionInput>
  }

  export type AnimeCollectionCreateWithoutLikesInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCollectionInput
    items?: AnimeInCollectionCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionUncheckedCreateWithoutLikesInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: AnimeInCollectionUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionCreateOrConnectWithoutLikesInput = {
    where: AnimeCollectionWhereUniqueInput
    create: XOR<AnimeCollectionCreateWithoutLikesInput, AnimeCollectionUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutLikedCollectionInput = {
    update: XOR<UserUpdateWithoutLikedCollectionInput, UserUncheckedUpdateWithoutLikedCollectionInput>
    create: XOR<UserCreateWithoutLikedCollectionInput, UserUncheckedCreateWithoutLikedCollectionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikedCollectionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikedCollectionInput, UserUncheckedUpdateWithoutLikedCollectionInput>
  }

  export type UserUpdateWithoutLikedCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikedCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnimeCollectionUpsertWithoutLikesInput = {
    update: XOR<AnimeCollectionUpdateWithoutLikesInput, AnimeCollectionUncheckedUpdateWithoutLikesInput>
    create: XOR<AnimeCollectionCreateWithoutLikesInput, AnimeCollectionUncheckedCreateWithoutLikesInput>
    where?: AnimeCollectionWhereInput
  }

  export type AnimeCollectionUpdateToOneWithWhereWithoutLikesInput = {
    where?: AnimeCollectionWhereInput
    data: XOR<AnimeCollectionUpdateWithoutLikesInput, AnimeCollectionUncheckedUpdateWithoutLikesInput>
  }

  export type AnimeCollectionUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCollectionNestedInput
    items?: AnimeInCollectionUpdateManyWithoutCollectionNestedInput
  }

  export type AnimeCollectionUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: AnimeInCollectionUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type UserCreateWithoutAnimeCommentsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnimeCommentsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnimeCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnimeCommentsInput, UserUncheckedCreateWithoutAnimeCommentsInput>
  }

  export type AnimeCreateWithoutCommentsInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutCommentsInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutCommentsInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutCommentsInput, AnimeUncheckedCreateWithoutCommentsInput>
  }

  export type CommentCreateWithoutRepliesInput = {
    id?: string
    content: string
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCommentsInput
    anime?: AnimeCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    CommentLike?: CommentLikeCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutRepliesInput = {
    id?: string
    content: string
    userId: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    CommentLike?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutRepliesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
  }

  export type CommentCreateWithoutParentInput = {
    id?: string
    content: string
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCommentsInput
    anime?: AnimeCreateNestedOneWithoutCommentsInput
    replies?: CommentCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutParentInput = {
    id?: string
    content: string
    userId: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutParentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentCreateManyParentInputEnvelope = {
    data: CommentCreateManyParentInput | CommentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type CommentLikeCreateWithoutCommentInput = {
    likedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCommentLikesInput
  }

  export type CommentLikeUncheckedCreateWithoutCommentInput = {
    userId: string
    likedAt?: Date | string
  }

  export type CommentLikeCreateOrConnectWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    create: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput>
  }

  export type CommentLikeCreateManyCommentInputEnvelope = {
    data: CommentLikeCreateManyCommentInput | CommentLikeCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAnimeCommentsInput = {
    update: XOR<UserUpdateWithoutAnimeCommentsInput, UserUncheckedUpdateWithoutAnimeCommentsInput>
    create: XOR<UserCreateWithoutAnimeCommentsInput, UserUncheckedCreateWithoutAnimeCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnimeCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnimeCommentsInput, UserUncheckedUpdateWithoutAnimeCommentsInput>
  }

  export type UserUpdateWithoutAnimeCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnimeCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnimeUpsertWithoutCommentsInput = {
    update: XOR<AnimeUpdateWithoutCommentsInput, AnimeUncheckedUpdateWithoutCommentsInput>
    create: XOR<AnimeCreateWithoutCommentsInput, AnimeUncheckedCreateWithoutCommentsInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutCommentsInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutCommentsInput, AnimeUncheckedUpdateWithoutCommentsInput>
  }

  export type AnimeUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type CommentUpsertWithoutRepliesInput = {
    update: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCommentsNestedInput
    anime?: AnimeUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    CommentLike?: CommentLikeUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CommentLike?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
  }

  export type CommentUpdateManyWithWhereWithoutParentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutParentInput>
  }

  export type CommentLikeUpsertWithWhereUniqueWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    update: XOR<CommentLikeUpdateWithoutCommentInput, CommentLikeUncheckedUpdateWithoutCommentInput>
    create: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput>
  }

  export type CommentLikeUpdateWithWhereUniqueWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    data: XOR<CommentLikeUpdateWithoutCommentInput, CommentLikeUncheckedUpdateWithoutCommentInput>
  }

  export type CommentLikeUpdateManyWithWhereWithoutCommentInput = {
    where: CommentLikeScalarWhereInput
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentLikeScalarWhereInput = {
    AND?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
    OR?: CommentLikeScalarWhereInput[]
    NOT?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
    userId?: StringFilter<"CommentLike"> | string
    commentId?: StringFilter<"CommentLike"> | string
    likedAt?: DateTimeFilter<"CommentLike"> | Date | string
  }

  export type UserCreateWithoutAnimeCommentLikesInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnimeCommentLikesInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnimeCommentLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnimeCommentLikesInput, UserUncheckedCreateWithoutAnimeCommentLikesInput>
  }

  export type CommentCreateWithoutCommentLikeInput = {
    id?: string
    content: string
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeCommentsInput
    anime?: AnimeCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutCommentLikeInput = {
    id?: string
    content: string
    userId: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutCommentLikeInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCommentLikeInput, CommentUncheckedCreateWithoutCommentLikeInput>
  }

  export type UserUpsertWithoutAnimeCommentLikesInput = {
    update: XOR<UserUpdateWithoutAnimeCommentLikesInput, UserUncheckedUpdateWithoutAnimeCommentLikesInput>
    create: XOR<UserCreateWithoutAnimeCommentLikesInput, UserUncheckedCreateWithoutAnimeCommentLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnimeCommentLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnimeCommentLikesInput, UserUncheckedUpdateWithoutAnimeCommentLikesInput>
  }

  export type UserUpdateWithoutAnimeCommentLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnimeCommentLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithoutCommentLikeInput = {
    update: XOR<CommentUpdateWithoutCommentLikeInput, CommentUncheckedUpdateWithoutCommentLikeInput>
    create: XOR<CommentCreateWithoutCommentLikeInput, CommentUncheckedCreateWithoutCommentLikeInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutCommentLikeInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutCommentLikeInput, CommentUncheckedUpdateWithoutCommentLikeInput>
  }

  export type CommentUpdateWithoutCommentLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCommentsNestedInput
    anime?: AnimeUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutCommentLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AnimeCreateWithoutUserProgressInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
    reviews?: ReviewCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutUserProgressInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutUserProgressInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutUserProgressInput, AnimeUncheckedCreateWithoutUserProgressInput>
  }

  export type UserCreateWithoutAnimeProgressInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnimeProgressInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnimeProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnimeProgressInput, UserUncheckedCreateWithoutAnimeProgressInput>
  }

  export type AnimeUpsertWithoutUserProgressInput = {
    update: XOR<AnimeUpdateWithoutUserProgressInput, AnimeUncheckedUpdateWithoutUserProgressInput>
    create: XOR<AnimeCreateWithoutUserProgressInput, AnimeUncheckedCreateWithoutUserProgressInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutUserProgressInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutUserProgressInput, AnimeUncheckedUpdateWithoutUserProgressInput>
  }

  export type AnimeUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type UserUpsertWithoutAnimeProgressInput = {
    update: XOR<UserUpdateWithoutAnimeProgressInput, UserUncheckedUpdateWithoutAnimeProgressInput>
    create: XOR<UserCreateWithoutAnimeProgressInput, UserUncheckedCreateWithoutAnimeProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnimeProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnimeProgressInput, UserUncheckedUpdateWithoutAnimeProgressInput>
  }

  export type UserUpdateWithoutAnimeProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnimeProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAnimeReviewsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnimeReviewsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnimeReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnimeReviewsInput, UserUncheckedCreateWithoutAnimeReviewsInput>
  }

  export type AnimeCreateWithoutReviewsInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionCreateNestedManyWithoutAnimeInput
    comments?: CommentCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutReviewsInput = {
    id?: string
    alias?: string | null
    malId?: string | null
    shikimoriId?: string | null
    name: string
    description?: string | null
    russian?: string | null
    english?: string | null
    japanese?: string | null
    synonyms?: AnimeCreatesynonymsInput | string[]
    status?: $Enums.AnimeStatus
    kind?: $Enums.AnimeKind | null
    episodes: number
    episodesAired: number
    duration?: number | null
    score?: number | null
    shikimoriScore?: number | null
    airedOn?: string | null
    releasedOn?: string | null
    shikimoriUrl?: string | null
    season?: string | null
    isCensored?: boolean | null
    rating?: $Enums.AnimeRating | null
    nextEpisodeAt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    poster?: AnimePosterUncheckedCreateNestedManyWithoutAnimeInput
    studios?: AnimeStudioUncheckedCreateNestedManyWithoutAnimeInput
    related?: RelatedAnimeUncheckedCreateNestedManyWithoutAnimeInput
    videos?: AnimeVideoUncheckedCreateNestedManyWithoutAnimeInput
    screenshots?: AnimeScreenshotUncheckedCreateNestedManyWithoutAnimeInput
    genres?: AnimeGenreUncheckedCreateNestedManyWithoutAnimeInput
    theme?: AnimeThemeUncheckedCreateNestedManyWithoutAnimeInput
    demographic?: AnimeDemographicUncheckedCreateNestedManyWithoutAnimeInput
    relatedAnime?: RelatedAnimeUncheckedCreateNestedManyWithoutRelatedInput
    userProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutAnimeInput
    animeInCollection?: AnimeInCollectionUncheckedCreateNestedManyWithoutAnimeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutReviewsInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutReviewsInput, AnimeUncheckedCreateWithoutReviewsInput>
  }

  export type ReviewLikeCreateWithoutReviewInput = {
    likedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewLikesInput
  }

  export type ReviewLikeUncheckedCreateWithoutReviewInput = {
    userId: string
    likedAt?: Date | string
  }

  export type ReviewLikeCreateOrConnectWithoutReviewInput = {
    where: ReviewLikeWhereUniqueInput
    create: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput>
  }

  export type ReviewLikeCreateManyReviewInputEnvelope = {
    data: ReviewLikeCreateManyReviewInput | ReviewLikeCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAnimeReviewsInput = {
    update: XOR<UserUpdateWithoutAnimeReviewsInput, UserUncheckedUpdateWithoutAnimeReviewsInput>
    create: XOR<UserCreateWithoutAnimeReviewsInput, UserUncheckedCreateWithoutAnimeReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnimeReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnimeReviewsInput, UserUncheckedUpdateWithoutAnimeReviewsInput>
  }

  export type UserUpdateWithoutAnimeReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnimeReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnimeUpsertWithoutReviewsInput = {
    update: XOR<AnimeUpdateWithoutReviewsInput, AnimeUncheckedUpdateWithoutReviewsInput>
    create: XOR<AnimeCreateWithoutReviewsInput, AnimeUncheckedCreateWithoutReviewsInput>
    where?: AnimeWhereInput
  }

  export type AnimeUpdateToOneWithWhereWithoutReviewsInput = {
    where?: AnimeWhereInput
    data: XOR<AnimeUpdateWithoutReviewsInput, AnimeUncheckedUpdateWithoutReviewsInput>
  }

  export type AnimeUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUpdateManyWithoutAnimeNestedInput
    comments?: CommentUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    malId?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    russian?: NullableStringFieldUpdateOperationsInput | string | null
    english?: NullableStringFieldUpdateOperationsInput | string | null
    japanese?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: AnimeUpdatesynonymsInput | string[]
    status?: EnumAnimeStatusFieldUpdateOperationsInput | $Enums.AnimeStatus
    kind?: NullableEnumAnimeKindFieldUpdateOperationsInput | $Enums.AnimeKind | null
    episodes?: IntFieldUpdateOperationsInput | number
    episodesAired?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    shikimoriScore?: NullableFloatFieldUpdateOperationsInput | number | null
    airedOn?: NullableStringFieldUpdateOperationsInput | string | null
    releasedOn?: NullableStringFieldUpdateOperationsInput | string | null
    shikimoriUrl?: NullableStringFieldUpdateOperationsInput | string | null
    season?: NullableStringFieldUpdateOperationsInput | string | null
    isCensored?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rating?: NullableEnumAnimeRatingFieldUpdateOperationsInput | $Enums.AnimeRating | null
    nextEpisodeAt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poster?: AnimePosterUncheckedUpdateManyWithoutAnimeNestedInput
    studios?: AnimeStudioUncheckedUpdateManyWithoutAnimeNestedInput
    related?: RelatedAnimeUncheckedUpdateManyWithoutAnimeNestedInput
    videos?: AnimeVideoUncheckedUpdateManyWithoutAnimeNestedInput
    screenshots?: AnimeScreenshotUncheckedUpdateManyWithoutAnimeNestedInput
    genres?: AnimeGenreUncheckedUpdateManyWithoutAnimeNestedInput
    theme?: AnimeThemeUncheckedUpdateManyWithoutAnimeNestedInput
    demographic?: AnimeDemographicUncheckedUpdateManyWithoutAnimeNestedInput
    relatedAnime?: RelatedAnimeUncheckedUpdateManyWithoutRelatedNestedInput
    userProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeNestedInput
    animeInCollection?: AnimeInCollectionUncheckedUpdateManyWithoutAnimeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type ReviewLikeUpsertWithWhereUniqueWithoutReviewInput = {
    where: ReviewLikeWhereUniqueInput
    update: XOR<ReviewLikeUpdateWithoutReviewInput, ReviewLikeUncheckedUpdateWithoutReviewInput>
    create: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput>
  }

  export type ReviewLikeUpdateWithWhereUniqueWithoutReviewInput = {
    where: ReviewLikeWhereUniqueInput
    data: XOR<ReviewLikeUpdateWithoutReviewInput, ReviewLikeUncheckedUpdateWithoutReviewInput>
  }

  export type ReviewLikeUpdateManyWithWhereWithoutReviewInput = {
    where: ReviewLikeScalarWhereInput
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyWithoutReviewInput>
  }

  export type ReviewLikeScalarWhereInput = {
    AND?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
    OR?: ReviewLikeScalarWhereInput[]
    NOT?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
    userId?: StringFilter<"ReviewLike"> | string
    reviewId?: StringFilter<"ReviewLike"> | string
    likedAt?: DateTimeFilter<"ReviewLike"> | Date | string
  }

  export type UserCreateWithoutReviewLikesInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewLikesInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewLikesInput, UserUncheckedCreateWithoutReviewLikesInput>
  }

  export type ReviewCreateWithoutReviewLikesInput = {
    id?: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAnimeReviewsInput
    anime: AnimeCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutReviewLikesInput = {
    id?: string
    userId: string
    animeId: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutReviewLikesInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
  }

  export type UserUpsertWithoutReviewLikesInput = {
    update: XOR<UserUpdateWithoutReviewLikesInput, UserUncheckedUpdateWithoutReviewLikesInput>
    create: XOR<UserCreateWithoutReviewLikesInput, UserUncheckedCreateWithoutReviewLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewLikesInput, UserUncheckedUpdateWithoutReviewLikesInput>
  }

  export type UserUpdateWithoutReviewLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReviewUpsertWithoutReviewLikesInput = {
    update: XOR<ReviewUpdateWithoutReviewLikesInput, ReviewUncheckedUpdateWithoutReviewLikesInput>
    create: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewLikesInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewLikesInput, ReviewUncheckedUpdateWithoutReviewLikesInput>
  }

  export type ReviewUpdateWithoutReviewLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeReviewsNestedInput
    anime?: AnimeUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutSettingsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeCreateNestedManyWithoutUserInput
    animeComments?: CommentCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    animeReviews?: ReviewCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: string
    username: string
    email: string
    password: string
    displayName: string
    picture?: string | null
    role?: $Enums.UserRole
    method?: $Enums.AuthMethod
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    animeProgress?: AnimeEpisodeProgressUncheckedCreateNestedManyWithoutUserInput
    animeCollection?: AnimeCollectionUncheckedCreateNestedManyWithoutUserInput
    likedCollection?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutUserInput
    animeComments?: CommentUncheckedCreateNestedManyWithoutUserInput
    animeCommentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    animeReviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUpdateManyWithoutUserNestedInput
    animeComments?: CommentUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    animeProgress?: AnimeEpisodeProgressUncheckedUpdateManyWithoutUserNestedInput
    animeCollection?: AnimeCollectionUncheckedUpdateManyWithoutUserNestedInput
    likedCollection?: AnimeCollectionLikeUncheckedUpdateManyWithoutUserNestedInput
    animeComments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    animeCommentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    animeReviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AnimeEpisodeProgressCreateWithoutUserInput = {
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
    anime: AnimeCreateNestedOneWithoutUserProgressInput
  }

  export type AnimeEpisodeProgressUncheckedCreateWithoutUserInput = {
    animeId: string
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AnimeEpisodeProgressCreateOrConnectWithoutUserInput = {
    where: AnimeEpisodeProgressWhereUniqueInput
    create: XOR<AnimeEpisodeProgressCreateWithoutUserInput, AnimeEpisodeProgressUncheckedCreateWithoutUserInput>
  }

  export type AnimeEpisodeProgressCreateManyUserInputEnvelope = {
    data: AnimeEpisodeProgressCreateManyUserInput | AnimeEpisodeProgressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AnimeCollectionCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: AnimeInCollectionCreateNestedManyWithoutCollectionInput
    likes?: AnimeCollectionLikeCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: AnimeInCollectionUncheckedCreateNestedManyWithoutCollectionInput
    likes?: AnimeCollectionLikeUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type AnimeCollectionCreateOrConnectWithoutUserInput = {
    where: AnimeCollectionWhereUniqueInput
    create: XOR<AnimeCollectionCreateWithoutUserInput, AnimeCollectionUncheckedCreateWithoutUserInput>
  }

  export type AnimeCollectionCreateManyUserInputEnvelope = {
    data: AnimeCollectionCreateManyUserInput | AnimeCollectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AnimeCollectionLikeCreateWithoutUserInput = {
    likedAt?: Date | string
    collection: AnimeCollectionCreateNestedOneWithoutLikesInput
  }

  export type AnimeCollectionLikeUncheckedCreateWithoutUserInput = {
    collectionId: string
    likedAt?: Date | string
  }

  export type AnimeCollectionLikeCreateOrConnectWithoutUserInput = {
    where: AnimeCollectionLikeWhereUniqueInput
    create: XOR<AnimeCollectionLikeCreateWithoutUserInput, AnimeCollectionLikeUncheckedCreateWithoutUserInput>
  }

  export type AnimeCollectionLikeCreateManyUserInputEnvelope = {
    data: AnimeCollectionLikeCreateManyUserInput | AnimeCollectionLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutUserInput = {
    id?: string
    theme?: string
    language?: string
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: UserSettingsCreatepreferredGenresInput | string[]
  }

  export type UserSettingsUncheckedCreateWithoutUserInput = {
    id?: string
    theme?: string
    language?: string
    show18plus?: boolean
    showActivity?: boolean
    showAnimeList?: boolean
    showAllCommentsInProfile?: boolean
    showCollections?: boolean
    showLikedCollections?: boolean
    showLikedReviews?: boolean
    showReviews?: boolean
    notificationsOn?: boolean
    preferredGenres?: UserSettingsCreatepreferredGenresInput | string[]
  }

  export type UserSettingsCreateOrConnectWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    content: string
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    anime?: AnimeCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
    CommentLike?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentLikeCreateWithoutUserInput = {
    likedAt?: Date | string
    comment: CommentCreateNestedOneWithoutCommentLikeInput
  }

  export type CommentLikeUncheckedCreateWithoutUserInput = {
    commentId: string
    likedAt?: Date | string
  }

  export type CommentLikeCreateOrConnectWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    create: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput>
  }

  export type CommentLikeCreateManyUserInputEnvelope = {
    data: CommentLikeCreateManyUserInput | CommentLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    id?: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    anime: AnimeCreateNestedOneWithoutReviewsInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: string
    animeId: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewLikeCreateWithoutUserInput = {
    likedAt?: Date | string
    review: ReviewCreateNestedOneWithoutReviewLikesInput
  }

  export type ReviewLikeUncheckedCreateWithoutUserInput = {
    reviewId: string
    likedAt?: Date | string
  }

  export type ReviewLikeCreateOrConnectWithoutUserInput = {
    where: ReviewLikeWhereUniqueInput
    create: XOR<ReviewLikeCreateWithoutUserInput, ReviewLikeUncheckedCreateWithoutUserInput>
  }

  export type ReviewLikeCreateManyUserInputEnvelope = {
    data: ReviewLikeCreateManyUserInput | ReviewLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntNullableFilter<"Account"> | number | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: StringNullableFilter<"Account"> | string | null
  }

  export type AnimeEpisodeProgressUpsertWithWhereUniqueWithoutUserInput = {
    where: AnimeEpisodeProgressWhereUniqueInput
    update: XOR<AnimeEpisodeProgressUpdateWithoutUserInput, AnimeEpisodeProgressUncheckedUpdateWithoutUserInput>
    create: XOR<AnimeEpisodeProgressCreateWithoutUserInput, AnimeEpisodeProgressUncheckedCreateWithoutUserInput>
  }

  export type AnimeEpisodeProgressUpdateWithWhereUniqueWithoutUserInput = {
    where: AnimeEpisodeProgressWhereUniqueInput
    data: XOR<AnimeEpisodeProgressUpdateWithoutUserInput, AnimeEpisodeProgressUncheckedUpdateWithoutUserInput>
  }

  export type AnimeEpisodeProgressUpdateManyWithWhereWithoutUserInput = {
    where: AnimeEpisodeProgressScalarWhereInput
    data: XOR<AnimeEpisodeProgressUpdateManyMutationInput, AnimeEpisodeProgressUncheckedUpdateManyWithoutUserInput>
  }

  export type AnimeCollectionUpsertWithWhereUniqueWithoutUserInput = {
    where: AnimeCollectionWhereUniqueInput
    update: XOR<AnimeCollectionUpdateWithoutUserInput, AnimeCollectionUncheckedUpdateWithoutUserInput>
    create: XOR<AnimeCollectionCreateWithoutUserInput, AnimeCollectionUncheckedCreateWithoutUserInput>
  }

  export type AnimeCollectionUpdateWithWhereUniqueWithoutUserInput = {
    where: AnimeCollectionWhereUniqueInput
    data: XOR<AnimeCollectionUpdateWithoutUserInput, AnimeCollectionUncheckedUpdateWithoutUserInput>
  }

  export type AnimeCollectionUpdateManyWithWhereWithoutUserInput = {
    where: AnimeCollectionScalarWhereInput
    data: XOR<AnimeCollectionUpdateManyMutationInput, AnimeCollectionUncheckedUpdateManyWithoutUserInput>
  }

  export type AnimeCollectionScalarWhereInput = {
    AND?: AnimeCollectionScalarWhereInput | AnimeCollectionScalarWhereInput[]
    OR?: AnimeCollectionScalarWhereInput[]
    NOT?: AnimeCollectionScalarWhereInput | AnimeCollectionScalarWhereInput[]
    id?: StringFilter<"AnimeCollection"> | string
    userId?: StringFilter<"AnimeCollection"> | string
    title?: StringFilter<"AnimeCollection"> | string
    description?: StringNullableFilter<"AnimeCollection"> | string | null
    isPublic?: BoolFilter<"AnimeCollection"> | boolean
    type?: EnumAnimeCollectionTypeFilter<"AnimeCollection"> | $Enums.AnimeCollectionType
    createdAt?: DateTimeFilter<"AnimeCollection"> | Date | string
    updatedAt?: DateTimeFilter<"AnimeCollection"> | Date | string
  }

  export type AnimeCollectionLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: AnimeCollectionLikeWhereUniqueInput
    update: XOR<AnimeCollectionLikeUpdateWithoutUserInput, AnimeCollectionLikeUncheckedUpdateWithoutUserInput>
    create: XOR<AnimeCollectionLikeCreateWithoutUserInput, AnimeCollectionLikeUncheckedCreateWithoutUserInput>
  }

  export type AnimeCollectionLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: AnimeCollectionLikeWhereUniqueInput
    data: XOR<AnimeCollectionLikeUpdateWithoutUserInput, AnimeCollectionLikeUncheckedUpdateWithoutUserInput>
  }

  export type AnimeCollectionLikeUpdateManyWithWhereWithoutUserInput = {
    where: AnimeCollectionLikeScalarWhereInput
    data: XOR<AnimeCollectionLikeUpdateManyMutationInput, AnimeCollectionLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSettingsUpsertWithoutUserInput = {
    update: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    where?: UserSettingsWhereInput
  }

  export type UserSettingsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserSettingsWhereInput
    data: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserSettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    show18plus?: BoolFieldUpdateOperationsInput | boolean
    showActivity?: BoolFieldUpdateOperationsInput | boolean
    showAnimeList?: BoolFieldUpdateOperationsInput | boolean
    showAllCommentsInProfile?: BoolFieldUpdateOperationsInput | boolean
    showCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedReviews?: BoolFieldUpdateOperationsInput | boolean
    showReviews?: BoolFieldUpdateOperationsInput | boolean
    notificationsOn?: BoolFieldUpdateOperationsInput | boolean
    preferredGenres?: UserSettingsUpdatepreferredGenresInput | string[]
  }

  export type UserSettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    show18plus?: BoolFieldUpdateOperationsInput | boolean
    showActivity?: BoolFieldUpdateOperationsInput | boolean
    showAnimeList?: BoolFieldUpdateOperationsInput | boolean
    showAllCommentsInProfile?: BoolFieldUpdateOperationsInput | boolean
    showCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedCollections?: BoolFieldUpdateOperationsInput | boolean
    showLikedReviews?: BoolFieldUpdateOperationsInput | boolean
    showReviews?: BoolFieldUpdateOperationsInput | boolean
    notificationsOn?: BoolFieldUpdateOperationsInput | boolean
    preferredGenres?: UserSettingsUpdatepreferredGenresInput | string[]
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    update: XOR<CommentLikeUpdateWithoutUserInput, CommentLikeUncheckedUpdateWithoutUserInput>
    create: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput>
  }

  export type CommentLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    data: XOR<CommentLikeUpdateWithoutUserInput, CommentLikeUncheckedUpdateWithoutUserInput>
  }

  export type CommentLikeUpdateManyWithWhereWithoutUserInput = {
    where: CommentLikeScalarWhereInput
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewLikeWhereUniqueInput
    update: XOR<ReviewLikeUpdateWithoutUserInput, ReviewLikeUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewLikeCreateWithoutUserInput, ReviewLikeUncheckedCreateWithoutUserInput>
  }

  export type ReviewLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewLikeWhereUniqueInput
    data: XOR<ReviewLikeUpdateWithoutUserInput, ReviewLikeUncheckedUpdateWithoutUserInput>
  }

  export type ReviewLikeUpdateManyWithWhereWithoutUserInput = {
    where: ReviewLikeScalarWhereInput
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type AnimeDemographicCreateManyDemographicInput = {
    animeId: string
  }

  export type AnimeDemographicUpdateWithoutDemographicInput = {
    anime?: AnimeUpdateOneRequiredWithoutDemographicNestedInput
  }

  export type AnimeDemographicUncheckedUpdateWithoutDemographicInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeDemographicUncheckedUpdateManyWithoutDemographicInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeGenreCreateManyGenreInput = {
    animeId: string
  }

  export type AnimeGenreUpdateWithoutGenreInput = {
    anime?: AnimeUpdateOneRequiredWithoutGenresNestedInput
  }

  export type AnimeGenreUncheckedUpdateWithoutGenreInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeGenreUncheckedUpdateManyWithoutGenreInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeScreenshotCreateManyScreenshotInput = {
    animeId: string
  }

  export type AnimeScreenshotUpdateWithoutScreenshotInput = {
    anime?: AnimeUpdateOneRequiredWithoutScreenshotsNestedInput
  }

  export type AnimeScreenshotUncheckedUpdateWithoutScreenshotInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeScreenshotUncheckedUpdateManyWithoutScreenshotInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeStudioCreateManyStudioInput = {
    animeId: string
  }

  export type AnimeStudioUpdateWithoutStudioInput = {
    anime?: AnimeUpdateOneRequiredWithoutStudiosNestedInput
  }

  export type AnimeStudioUncheckedUpdateWithoutStudioInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeStudioUncheckedUpdateManyWithoutStudioInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeThemeCreateManyThemeInput = {
    animeId: string
  }

  export type AnimeThemeUpdateWithoutThemeInput = {
    anime?: AnimeUpdateOneRequiredWithoutThemeNestedInput
  }

  export type AnimeThemeUncheckedUpdateWithoutThemeInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeThemeUncheckedUpdateManyWithoutThemeInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeVideoCreateManyVideoInput = {
    animeId: string
  }

  export type AnimeVideoUpdateWithoutVideoInput = {
    anime?: AnimeUpdateOneRequiredWithoutVideosNestedInput
  }

  export type AnimeVideoUncheckedUpdateWithoutVideoInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeVideoUncheckedUpdateManyWithoutVideoInput = {
    animeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimePosterCreateManyAnimeInput = {
    id?: string
    shikimoriId?: string | null
    originalUrl?: string | null
    mainUrl?: string | null
  }

  export type AnimeStudioCreateManyAnimeInput = {
    studioId: string
  }

  export type RelatedAnimeCreateManyAnimeInput = {
    id?: string
    relatedAnimeId: string
    relationKind: $Enums.RelationKind
  }

  export type AnimeVideoCreateManyAnimeInput = {
    videoId: string
  }

  export type AnimeScreenshotCreateManyAnimeInput = {
    screenshotId: string
  }

  export type AnimeGenreCreateManyAnimeInput = {
    genreId: string
  }

  export type AnimeThemeCreateManyAnimeInput = {
    themeId: string
  }

  export type AnimeDemographicCreateManyAnimeInput = {
    demographicId: string
  }

  export type RelatedAnimeCreateManyRelatedInput = {
    id?: string
    animeId: string
    relationKind: $Enums.RelationKind
  }

  export type AnimeEpisodeProgressCreateManyAnimeInput = {
    userId: string
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AnimeInCollectionCreateManyAnimeInput = {
    collectionId: string
    note?: string | null
    addedAt?: Date | string
  }

  export type CommentCreateManyAnimeInput = {
    id?: string
    content: string
    userId: string
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyAnimeInput = {
    id?: string
    userId: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimePosterUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mainUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimePosterUncheckedUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mainUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimePosterUncheckedUpdateManyWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    shikimoriId?: NullableStringFieldUpdateOperationsInput | string | null
    originalUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mainUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimeStudioUpdateWithoutAnimeInput = {
    studio?: StudioUpdateOneRequiredWithoutAnimeStudioNestedInput
  }

  export type AnimeStudioUncheckedUpdateWithoutAnimeInput = {
    studioId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeStudioUncheckedUpdateManyWithoutAnimeInput = {
    studioId?: StringFieldUpdateOperationsInput | string
  }

  export type RelatedAnimeUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
    related?: AnimeUpdateOneRequiredWithoutRelatedAnimeNestedInput
  }

  export type RelatedAnimeUncheckedUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    relatedAnimeId?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
  }

  export type RelatedAnimeUncheckedUpdateManyWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    relatedAnimeId?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
  }

  export type AnimeVideoUpdateWithoutAnimeInput = {
    video?: VideoUpdateOneRequiredWithoutAnimeVideoNestedInput
  }

  export type AnimeVideoUncheckedUpdateWithoutAnimeInput = {
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeVideoUncheckedUpdateManyWithoutAnimeInput = {
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeScreenshotUpdateWithoutAnimeInput = {
    screenshot?: ScreenshotsUpdateOneRequiredWithoutAnimeScreenshotNestedInput
  }

  export type AnimeScreenshotUncheckedUpdateWithoutAnimeInput = {
    screenshotId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeScreenshotUncheckedUpdateManyWithoutAnimeInput = {
    screenshotId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeGenreUpdateWithoutAnimeInput = {
    genre?: GenreUpdateOneRequiredWithoutAnimesNestedInput
  }

  export type AnimeGenreUncheckedUpdateWithoutAnimeInput = {
    genreId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeGenreUncheckedUpdateManyWithoutAnimeInput = {
    genreId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeThemeUpdateWithoutAnimeInput = {
    theme?: ThemeUpdateOneRequiredWithoutAnimesNestedInput
  }

  export type AnimeThemeUncheckedUpdateWithoutAnimeInput = {
    themeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeThemeUncheckedUpdateManyWithoutAnimeInput = {
    themeId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeDemographicUpdateWithoutAnimeInput = {
    demographic?: DemographicUpdateOneRequiredWithoutAnimesNestedInput
  }

  export type AnimeDemographicUncheckedUpdateWithoutAnimeInput = {
    demographicId?: StringFieldUpdateOperationsInput | string
  }

  export type AnimeDemographicUncheckedUpdateManyWithoutAnimeInput = {
    demographicId?: StringFieldUpdateOperationsInput | string
  }

  export type RelatedAnimeUpdateWithoutRelatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
    anime?: AnimeUpdateOneRequiredWithoutRelatedNestedInput
  }

  export type RelatedAnimeUncheckedUpdateWithoutRelatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
  }

  export type RelatedAnimeUncheckedUpdateManyWithoutRelatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    relationKind?: EnumRelationKindFieldUpdateOperationsInput | $Enums.RelationKind
  }

  export type AnimeEpisodeProgressUpdateWithoutAnimeInput = {
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeProgressNestedInput
  }

  export type AnimeEpisodeProgressUncheckedUpdateWithoutAnimeInput = {
    userId?: StringFieldUpdateOperationsInput | string
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeEpisodeProgressUncheckedUpdateManyWithoutAnimeInput = {
    userId?: StringFieldUpdateOperationsInput | string
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeInCollectionUpdateWithoutAnimeInput = {
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collection?: AnimeCollectionUpdateOneRequiredWithoutItemsNestedInput
  }

  export type AnimeInCollectionUncheckedUpdateWithoutAnimeInput = {
    collectionId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeInCollectionUncheckedUpdateManyWithoutAnimeInput = {
    collectionId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeReviewsNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutAnimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeInCollectionCreateManyCollectionInput = {
    animeId: string
    note?: string | null
    addedAt?: Date | string
  }

  export type AnimeCollectionLikeCreateManyCollectionInput = {
    userId: string
    likedAt?: Date | string
  }

  export type AnimeInCollectionUpdateWithoutCollectionInput = {
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneRequiredWithoutAnimeInCollectionNestedInput
  }

  export type AnimeInCollectionUncheckedUpdateWithoutCollectionInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeInCollectionUncheckedUpdateManyWithoutCollectionInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionLikeUpdateWithoutCollectionInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikedCollectionNestedInput
  }

  export type AnimeCollectionLikeUncheckedUpdateWithoutCollectionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionLikeUncheckedUpdateManyWithoutCollectionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyParentInput = {
    id?: string
    content: string
    userId: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentLikeCreateManyCommentInput = {
    userId: string
    likedAt?: Date | string
  }

  export type CommentUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCommentsNestedInput
    anime?: AnimeUpdateOneWithoutCommentsNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeUpdateWithoutCommentInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnimeCommentLikesNestedInput
  }

  export type CommentLikeUncheckedUpdateWithoutCommentInput = {
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeUncheckedUpdateManyWithoutCommentInput = {
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewLikeCreateManyReviewInput = {
    userId: string
    likedAt?: Date | string
  }

  export type ReviewLikeUpdateWithoutReviewInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewLikesNestedInput
  }

  export type ReviewLikeUncheckedUpdateWithoutReviewInput = {
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewLikeUncheckedUpdateManyWithoutReviewInput = {
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimeEpisodeProgressCreateManyUserInput = {
    animeId: string
    episode: number
    timestamp: number
    isWatched?: boolean
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AnimeCollectionCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublic?: boolean
    type?: $Enums.AnimeCollectionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimeCollectionLikeCreateManyUserInput = {
    collectionId: string
    likedAt?: Date | string
  }

  export type CommentCreateManyUserInput = {
    id?: string
    content: string
    animeId?: string | null
    likesCount?: number
    episode?: number | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentLikeCreateManyUserInput = {
    commentId: string
    likedAt?: Date | string
  }

  export type ReviewCreateManyUserInput = {
    id?: string
    animeId: string
    rating: number
    title?: string | null
    description?: string | null
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewLikeCreateManyUserInput = {
    reviewId: string
    likedAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeEpisodeProgressUpdateWithoutUserInput = {
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneRequiredWithoutUserProgressNestedInput
  }

  export type AnimeEpisodeProgressUncheckedUpdateWithoutUserInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeEpisodeProgressUncheckedUpdateManyWithoutUserInput = {
    animeId?: StringFieldUpdateOperationsInput | string
    episode?: IntFieldUpdateOperationsInput | number
    timestamp?: IntFieldUpdateOperationsInput | number
    isWatched?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: AnimeInCollectionUpdateManyWithoutCollectionNestedInput
    likes?: AnimeCollectionLikeUpdateManyWithoutCollectionNestedInput
  }

  export type AnimeCollectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: AnimeInCollectionUncheckedUpdateManyWithoutCollectionNestedInput
    likes?: AnimeCollectionLikeUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type AnimeCollectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumAnimeCollectionTypeFieldUpdateOperationsInput | $Enums.AnimeCollectionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionLikeUpdateWithoutUserInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collection?: AnimeCollectionUpdateOneRequiredWithoutLikesNestedInput
  }

  export type AnimeCollectionLikeUncheckedUpdateWithoutUserInput = {
    collectionId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCollectionLikeUncheckedUpdateManyWithoutUserInput = {
    collectionId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
    CommentLike?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    animeId?: NullableStringFieldUpdateOperationsInput | string | null
    likesCount?: IntFieldUpdateOperationsInput | number
    episode?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeUpdateWithoutUserInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: CommentUpdateOneRequiredWithoutCommentLikeNestedInput
  }

  export type CommentLikeUncheckedUpdateWithoutUserInput = {
    commentId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeUncheckedUpdateManyWithoutUserInput = {
    commentId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneRequiredWithoutReviewsNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    animeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewLikeUpdateWithoutUserInput = {
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUpdateOneRequiredWithoutReviewLikesNestedInput
  }

  export type ReviewLikeUncheckedUpdateWithoutUserInput = {
    reviewId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewLikeUncheckedUpdateManyWithoutUserInput = {
    reviewId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}