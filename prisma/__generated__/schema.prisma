model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int?    @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  @@map("accounts")
}

model Anime {
  id             String            @id @default(uuid())
  malId          String?           @unique
  shikimoriId    String?           @unique
  name           String
  description    String?
  russian        String?
  english        String?
  japanese       String?
  synonyms       String[]
  status         AnimeStatus       @default(anons)
  kind           AnimeKind?
  episodes       Int
  episodesAired  Int
  duration       Int?
  score          Float?
  shikimoriScore Float?
  airedOn        String?
  releasedOn     String?
  shikimoriUrl   String?
  season         String?
  poster         AnimePoster[]
  isCensored     Boolean?
  rating         AnimeRating?
  nextEpisodeAt  String?
  // userRates      UserRate[]
  studios        AnimeStudio[]
  related        RelatedAnime[]    @relation("AnimeToRelatedAnime")
  videos         AnimeVideo[]
  screenshots    AnimeScreenshot[]
  genres         AnimeGenre[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  relatedAnime RelatedAnime[] @relation("RelatedAnimeToAnime")

  @@unique([name, shikimoriId])
  @@map("animes")
}

model Genre {
  id        String       @id @default(uuid())
  requestId Int          @unique @default(autoincrement())
  name      String       @unique
  russian   String
  animes    AnimeGenre[]

  @@map("genres")
}

model Studio {
  id          String        @id @default(uuid())
  name        String        @unique
  imageUrl    String?
  AnimeStudio AnimeStudio[]

  @@map("studios")
}

model AnimeStudio {
  animeId  String
  studioId String
  anime    Anime  @relation(fields: [animeId], references: [id])
  studio   Studio @relation(fields: [studioId], references: [id])

  @@id([animeId, studioId])
  @@map("anime_studios")
}

model RelatedAnime {
  id             String       @id @default(uuid())
  animeId        String
  relatedAnimeId String
  relationKind   RelationKind

  anime   Anime @relation("AnimeToRelatedAnime", fields: [animeId], references: [id])
  related Anime @relation("RelatedAnimeToAnime", fields: [relatedAnimeId], references: [id])

  @@unique([animeId, relatedAnimeId])
  @@map("related_animes")
}

model AnimeGenre {
  animeId String
  genreId String
  anime   Anime  @relation(fields: [animeId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  @@id([animeId, genreId])
  @@map("anime_genres")
}

model AnimePoster {
  id          String  @id @default(uuid())
  shikimoriId String?
  animeId     String
  originalUrl String?
  mainUrl     String?
  anime       Anime   @relation(fields: [animeId], references: [id])

  @@map("anime_posters")
}

model AnimeVideo {
  animeId String
  videoId String

  anime Anime @relation(fields: [animeId], references: [id])
  video Video @relation(fields: [videoId], references: [id])

  @@id([animeId, videoId])
  @@map("anime_videos")
}

model AnimeScreenshot {
  animeId      String
  screenshotId String

  anime      Anime       @relation(fields: [animeId], references: [id])
  screenshot Screenshots @relation(fields: [screenshotId], references: [id])

  @@id([animeId, screenshotId])
  @@map("anime_screenshots")
}

model Video {
  id          String        @id @default(uuid())
  shikimoriId String?       @unique
  url         String?
  name        String?
  kind        VideoKindEnum
  playerUrl   String?
  imageUrl    String?
  animeVideo  AnimeVideo[]

  @@map("videos")
}

model Screenshots {
  id              String            @id @default(uuid())
  shikimoriId     String            @unique
  originalUrl     String?
  x332Url         String?
  animeScreenshot AnimeScreenshot[]

  @@map("screenshots")
}

enum VideoKindEnum {
  pv
  character_trailer
  cm
  op
  ed
  op_ed_clip
  clip
  other
  episode_preview
}

enum AnimeStatus {
  anons
  ongoing
  released
}

enum AnimeKind {
  tv
  movie
  ova
  ona
  special
  tv_special
  music
  pv
  cm
}

enum AnimeRating {
  none
  g
  pg
  pg_13
  r
  r_plus
  rx
}

enum RelationKind {
  adaptation
  alternative_setting
  alternative_version
  character
  full_story
  other
  parent_story
  prequel
  sequel
  side_story
  spin_off
  summary
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

model ParsingSession {
  id                Int                @id @unique @default(autoincrement())
  name              String
  status            String
  type              ParsingSessionType
  lastProcessedPage Int
  processedPages    Int
  processedItems    Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("parsing_session")
}

enum ParsingSessionStatus {
  CREATED
  RUNNING
  COMPLETED
  PAUSED
  FAILED
}

enum ParsingSessionType {
  CREATE_DATABASE
  UPDATE_ONGOINGS
  UPDATE_THIS_YEAR
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../__generated__"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  displayName String
  picture     String?

  role               UserRole @default(REGULAR)
  isVerified         Boolean  @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean  @default(false) @map("is_two_factor_enabled")

  method   AuthMethod @default(CREDENTIALS)
  accounts Account[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}
