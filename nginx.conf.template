server {
  resolver 127.0.0.11 valid=30s;
  listen ${APPLICATION_PORT};
  server_name ${APPLICATION_HOST};

  client_max_body_size 20M;
  keepalive_timeout 15s;
  sendfile on;

  # определяем допустимый origin
  set $cors_origin '';

  if ($http_origin = "http://localhost:3000") {
    set $cors_origin $http_origin;
  }

  # === Проксирование API документации с CORS ===
  location ~* ^/api/v1/docs(.*)$ {
    if ($request_method = OPTIONS) {
      add_header 'Access-Control-Allow-Origin' $cors_origin;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
			add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, recaptcha' always;
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Length' 0;
      add_header 'Content-Type' 'text/plain; charset=UTF-8';
      return 204;
    }

    add_header 'Access-Control-Allow-Origin' $cors_origin always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, recaptcha' always;

    proxy_pass http://${DOCS_MICROSERVICE_HOST}:${DOCS_MICROSERVICE_PORT}/docs$1;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # === Проксирование всех API запросов с CORS ===
  location ~* ^/api/ {
    if ($request_method = OPTIONS) {
      add_header 'Access-Control-Allow-Origin' $cors_origin;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
			add_header 'Access-Control-Allow-Credentials' 'true' always;
			add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, recaptcha' always;

      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Length' 0;
      add_header 'Content-Type' 'text/plain; charset=UTF-8';
      return 204;
    }

    add_header 'Access-Control-Allow-Origin' $cors_origin always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, recaptcha' always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;

    # определяем целевой сервис
    set $service_host "";
    if ($uri ~* ^/api/v1/auth) {
      set $service_host ${AUTH_MICROSERVICE_HOST}:${AUTH_MICROSERVICE_PORT};
    }
    if ($uri ~* ^/api/v1/user) {
      set $service_host ${USER_MICROSERVICE_HOST}:${USER_MICROSERVICE_PORT};
    }
    if ($uri ~* ^/api/v1/anime) {
      set $service_host ${ANIME_MICROSERVICE_HOST}:${ANIME_MICROSERVICE_PORT};
    }
    if ($uri ~* ^/api/v1/update-anime) {
      set $service_host ${UPDATE_ANIME_MICROSERVICE_HOST}:${UPDATE_ANIME_MICROSERVICE_PORT};
    }

    # перезапись пути
    rewrite ^/api/v1/(.*)$ /v1/$1 break;

    # проксируем запрос
    proxy_pass http://$service_host;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # === Проксирование RabbitMQ UI ===
  location /rabbitmq {
    proxy_pass http://${RABBIT_MQ_HOST}:${RABBIT_MQ_MANAGEMENT_PORT};
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    rewrite ^/rabbitmq/(.*)$ /$1 break;
  }

  # === Обработка ошибок ===
  error_page 400 401 403 404 /40x.html;
  error_page 500 502 503 504 /50x.html;

  location = /40x.html {
    root /usr/share/nginx/html;
    internal;
  }

  location = /50x.html {
    root /usr/share/nginx/html;
    internal;
  }
}
