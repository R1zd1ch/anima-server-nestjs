services:
  db:
    container_name: postgres
    image: postgres:15.2
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    container_name: redis
    image: redis:7.0
    restart: always
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  nginx:
    container_name: nginx-gateway
    image: nginx:latest
    ports:
      - '0.0.0.0:${APPLICATION_PORT}:${APPLICATION_PORT}'
    volumes:
      - ./nginx.conf.template:/etc/nginx/templates/default.conf.template
    environment:
      - AUTH_MICROSERVICE_PORT=${AUTH_MICROSERVICE_PORT}
      - AUTH_MICROSERVICE_HOST=${AUTH_MICROSERVICE_HOST}
      - UPDATE_ANIME_MICROSERVICE_PORT=${UPDATE_ANIME_MICROSERVICE_PORT}
      - UPDATE_ANIME_MICROSERVICE_HOST=${UPDATE_ANIME_MICROSERVICE_HOST}
      - ANIME_MICROSERVICE_PORT=${ANIME_MICROSERVICE_PORT}
      - ANIME_MICROSERVICE_HOST=${ANIME_MICROSERVICE_HOST}
      - USER_MICROSERVICE_PORT=${USER_MICROSERVICE_PORT}
      - USER_MICROSERVICE_HOST=${USER_MICROSERVICE_HOST}
      - APPLICATION_PORT=${APPLICATION_PORT}
      - APPLICATION_HOST=${APPLICATION_HOST}
      - RABBIT_MQ_MANAGEMENT_PORT=${RABBIT_MQ_MANAGEMENT_PORT}
      - RABBIT_MQ_HOST=${RABBIT_MQ_HOST}
      - DOCS_MICROSERVICE_HOST=${DOCS_MICROSERVICE_HOST}
      - DOCS_MICROSERVICE_PORT=${DOCS_MICROSERVICE_PORT}
    depends_on:
      auth-microservice:
        condition: service_started
      update-anime-microservice:
        condition: service_started
      anime-microservice:
        condition: service_started
      user-microservice:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - '${RABBIT_MQ_PORT}:${RABBIT_MQ_PORT}'
      - '${RABBIT_MQ_MANAGEMENT_PORT}:${RABBIT_MQ_MANAGEMENT_PORT}'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_PASSWORD}
    networks:
      - backend

  auth-microservice:
    container_name: ${AUTH_MICROSERVICE_HOST}
    build:
      context: .
      dockerfile: dockerfile
      args:
        SERVICE: auth-microservice
    ports:
      - '${AUTH_MICROSERVICE_PORT}:${AUTH_MICROSERVICE_PORT}'
    env_file:
      - .env
    environment:
      - RABBIT_MQ_HOST=rabbitmq
      - APP_MODE=auth-microservice
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - backend

  user-microservice:
    container_name: ${USER_MICROSERVICE_HOST}
    build:
      context: .
      dockerfile: dockerfile
      args:
        SERVICE: user-microservice
    ports:
      - '${USER_MICROSERVICE_PORT}:${USER_MICROSERVICE_PORT}'
    env_file:
      - .env
    environment:
      - RABBIT_MQ_HOST=rabbitmq
      - APP_MODE=user-microservice
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      auth-microservice:
        condition: service_started
    networks:
      - backend

  update-anime-microservice:
    container_name: ${UPDATE_ANIME_MICROSERVICE_HOST}
    build:
      context: .
      dockerfile: dockerfile
      args:
        SERVICE: update-anime-microservice
    ports:
      - '${UPDATE_ANIME_MICROSERVICE_PORT}:${UPDATE_ANIME_MICROSERVICE_PORT}'
    env_file:
      - .env
    environment:
      - RABBIT_MQ_HOST=rabbitmq
      - APP_MODE=update-anime-microservice
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      auth-microservice:
        condition: service_started
    networks:
      - backend

  anime-microservice:
    container_name: ${ANIME_MICROSERVICE_HOST}
    build:
      context: .
      dockerfile: dockerfile
      args:
        SERVICE: anime-microservice
    ports:
      - '${ANIME_MICROSERVICE_PORT}:${ANIME_MICROSERVICE_PORT}'
    env_file:
      - .env
    environment:
      - RABBIT_MQ_HOST=rabbitmq
      - APP_MODE=anime-microservice
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      auth-microservice:
        condition: service_started
      user-microservice:
        condition: service_started
      update-anime-microservice:
        condition: service_started
    networks:
      - backend

  docs-microservice:
    container_name: ${DOCS_MICROSERVICE_HOST}
    build:
      context: .
      dockerfile: dockerfile
      args:
        SERVICE: docs-microservice
    ports:
      - '${DOCS_MICROSERVICE_PORT}:${DOCS_MICROSERVICE_PORT}'
    env_file:
      - .env
    environment:
      - APP_MODE=docs-microservice
    depends_on:
      auth-microservice:
        condition: service_started
      user-microservice:
        condition: service_started
      anime-microservice:
        condition: service_started
      update-anime-microservice:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
      nginx:
        condition: service_started
    networks:
      - backend

volumes:
  postgres_data:
  redis_data:

networks:
  backend:
